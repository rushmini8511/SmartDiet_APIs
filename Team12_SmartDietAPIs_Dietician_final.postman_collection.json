{
	"info": {
		"_postman_id": "a5d82c91-e499-401e-ade4-fa27c6a6cf9d",
		"name": "Team12_SmartDietAPIs_Dietician_final",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33024937",
		"_collection_link": "https://team12-api-hackathon.postman.co/workspace/Team12_SmartDiet-APIs_Postman-H~642872c2-9787-4e43-8117-f254f6d07eba/collection/33024937-a5d82c91-e499-401e-ade4-fa27c6a6cf9d?action=share&source=collection_link&creator=33024937"
	},
	"item": [
		{
			"name": "Admin login",
			"item": [
				{
					"name": "login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"adminToken\",jsonData.token);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"test\",\r\n  \"userLoginEmail\": \"Team12@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/login",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Dietician Module",
			"item": [
				{
					"name": "Retrive all Dieticians",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/dietician",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"dietician"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrive all dieticians with invalid endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code is 404\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(404);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"pm.collectionVariables.set(\"Getdietician\", \"/diet\");\r",
									"\r",
									"console.log(\"Endpoint set to invalid value:\", pm.collectionVariables.get(\"Getdietician\"));\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}{{InvalidEndPoint}}",
							"host": [
								"{{baseURL}}{{InvalidEndPoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "No auth Retrive all dieticians",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code is 401\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(401);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.timestamp).to.exist;\r",
									"    pm.expect(responseData.status).to.exist;\r",
									"    pm.expect(responseData.error).to.exist;\r",
									"    pm.expect(responseData.path).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"\r",
									"\r",
									"pm.request.auth = {\r",
									"    type: 'noauth'\r",
									"};\r",
									"\r",
									"\r",
									"pm.request.headers.remove(\"Authorization\");\r",
									"\r",
									"console.log(\"Auth set to No Auth. Authorization header removed.\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/dietician",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"dietician"
							]
						}
					},
					"response": []
				},
				{
					"name": "no auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code is 401\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(401);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//pm.request.headers.remove(\"Authorization\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n  \"ContactNumber\": \"{{Dietician_ContactNumber}}\",\r\n  \"DateOfBirth\": \"{{Dietician_DateOfBirth}}\",\r\n  \"Education\": \"{{Dietician_Education}}\",\r\n  \"Email\": \"{{Dietician_Email}}\",\r\n  \"Firstname\": \"{{Dietician_Firstname}}\",\r\n  \"HospitalCity\": \"{{Dietician_HospitalCity}}\",\r\n  \"HospitalName\": \"{{Dietician_HospitalName}}\",\r\n  \"HospitalPincode\": \"{{Dietician_HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{Dietician_HospitalStreet}}\",\r\n  \"Lastname\": \"{{Dietician_Lastname}}\"\r\n \r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{postdietician}}",
							"host": [
								"{{baseURL}}{{postdietician}}"
							]
						}
					},
					"response": [
						{
							"name": "no auth",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ContactNumber\": \"9123456700\",\r\n  \"DateOfBirth\": \"2022-07-26T18:14:08.570Z\",\r\n  \"Education\": \"M.sc\",\r\n  \"Email\": \"dietician1@gmail.com\",\r\n  \"Firstname\": \"sara\",\r\n  \"HospitalCity\": \"kitchener\",\r\n  \"HospitalName\": \"stmary\",\r\n  \"HospitalPincode\": \"621704\",\r\n  \"HospitalStreet\": \"lanewheat\",\r\n  \"Lastname\": \"raj\"\r\n \r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/dietician",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"dietician"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722720215&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=6DMqy1nOF2nxGpwa98q6C5LwZT2ZrqXlzH9LAy3nqgc%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722720215&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=6DMqy1nOF2nxGpwa98q6C5LwZT2ZrqXlzH9LAy3nqgc%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 03 Aug 2024 21:23:35 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2024-08-03T21:23:35.452+00:00\",\n    \"status\": 401,\n    \"error\": \"Unauthorized\",\n    \"path\": \"/dietician/dietician\"\n}"
						}
					]
				},
				{
					"name": "lastname missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//  raw request body\r",
									"let requestBody = pm.request.body.raw;\r",
									"\r",
									"\r",
									"let parsedBody = JSON.parse(requestBody);\r",
									"\r",
									"\r",
									"let includeLastname = pm.variables.get(\"Dietician_Lastname\") === 'false';\r",
									"\r",
									"//  modify the request body\r",
									"if (!includeLastname) {\r",
									"    // Remove the Lastname field if `Dietician_Lastname` is false\r",
									"    delete parsedBody.Lastname;\r",
									"}\r",
									"\r",
									"// Update the request body with the modified JSON\r",
									"pm.request.body.raw = JSON.stringify(parsedBody);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n  \"ContactNumber\": \"{{Dietician_ContactNumber}}\",\r\n  \"DateOfBirth\": \"{{Dietician_DateOfBirth}}\",\r\n  \"Education\": \"{{Dietician_Education}}\",\r\n  \"Email\": \"{{Dietician_Email}}\",\r\n  \"Firstname\": \"{{Dietician_Firstname}}\",\r\n  \"HospitalCity\": \"{{Dietician_HospitalCity}}\",\r\n  \"HospitalName\": \"{{Dietician_HospitalName}}\",\r\n  \"HospitalPincode\": \"{{Dietician_HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{Dietician_HospitalStreet}}\",\r\n  \"Lastname\": \"{{Dietician_Lastname}}\"\r\n \r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/dietician",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"dietician"
							]
						}
					},
					"response": [
						{
							"name": "Create Dietician",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ContactNumber\": \"9123452785\",\r\n  \"DateOfBirth\": \"2024-07-26T18:14:08.570Z\",\r\n  \"Education\": \"M.sc\",\r\n  \"Email\": \"dietician1@gmail.com\",\r\n  \"Firstname\": \"sara\",\r\n  \"HospitalCity\": \"kitchener\",\r\n  \"HospitalName\": \"stmary\",\r\n  \"HospitalPincode\": \"621704\",\r\n  \"HospitalStreet\": \"lanewheat\",\r\n  \"Lastname\": \"raj\"\r\n \r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/dietician",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"dietician"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722727612&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=hC9%2Fv2KJjanBUphpGfTsYB0smj6C2bgdpvILcLwrXhQ%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722727612&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=hC9%2Fv2KJjanBUphpGfTsYB0smj6C2bgdpvILcLwrXhQ%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Location",
									"value": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/dietician/1025"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 03 Aug 2024 23:26:52 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1025,\n    \"loginPassword\": \"Hyacinth24\",\n    \"Firstname\": \"sara\",\n    \"Lastname\": \"raj\",\n    \"ContactNumber\": \"9123452785\",\n    \"DateOfBirth\": \"2024-07-26T18:14:08.570+00:00\",\n    \"Email\": \"dietician1@gmail.com\",\n    \"HospitalName\": \"stmary\",\n    \"HospitalStreet\": \"lanewheat\",\n    \"HospitalCity\": \"kitchener\",\n    \"HospitalPincode\": \"621704\",\n    \"Education\": \"M.sc\"\n}"
						}
					]
				},
				{
					"name": "firstname missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"let requestBody = pm.request.body.raw;\r",
									"\r",
									"\r",
									"let parsedBody = JSON.parse(requestBody);\r",
									"\r",
									"\r",
									"let includeFirstname = pm.variables.get(\"Dietician_Firstname\") === 'false';\r",
									"\r",
									"\r",
									"if (!includeFirstname) {\r",
									"   \r",
									"    delete parsedBody.Firstname;\r",
									"}\r",
									"\r",
									"\r",
									"pm.request.body.raw = JSON.stringify(parsedBody);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n  \"ContactNumber\": \"{{Dietician_ContactNumber}}\",\r\n  \"DateOfBirth\": \"{{Dietician_DateOfBirth}}\",\r\n  \"Education\": \"{{Dietician_Education}}\",\r\n  \"Email\": \"{{Dietician_Email}}\",\r\n  \"Firstname\": \"{{Dietician_Firstname}}\",\r\n  \"HospitalCity\": \"{{Dietician_HospitalCity}}\",\r\n  \"HospitalName\": \"{{Dietician_HospitalName}}\",\r\n  \"HospitalPincode\": \"{{Dietician_HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{Dietician_HospitalStreet}}\",\r\n  \"Lastname\": \"{{Dietician_Lastname}}\"\r\n \r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/dietician",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"dietician"
							]
						}
					},
					"response": [
						{
							"name": "Create Dietician",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ContactNumber\": \"9123452785\",\r\n  \"DateOfBirth\": \"2024-07-26T18:14:08.570Z\",\r\n  \"Education\": \"M.sc\",\r\n  \"Email\": \"dietician1@gmail.com\",\r\n  \"Firstname\": \"sara\",\r\n  \"HospitalCity\": \"kitchener\",\r\n  \"HospitalName\": \"stmary\",\r\n  \"HospitalPincode\": \"621704\",\r\n  \"HospitalStreet\": \"lanewheat\",\r\n  \"Lastname\": \"raj\"\r\n \r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/dietician",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"dietician"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722727612&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=hC9%2Fv2KJjanBUphpGfTsYB0smj6C2bgdpvILcLwrXhQ%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722727612&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=hC9%2Fv2KJjanBUphpGfTsYB0smj6C2bgdpvILcLwrXhQ%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Location",
									"value": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/dietician/1025"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 03 Aug 2024 23:26:52 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1025,\n    \"loginPassword\": \"Hyacinth24\",\n    \"Firstname\": \"sara\",\n    \"Lastname\": \"raj\",\n    \"ContactNumber\": \"9123452785\",\n    \"DateOfBirth\": \"2024-07-26T18:14:08.570+00:00\",\n    \"Email\": \"dietician1@gmail.com\",\n    \"HospitalName\": \"stmary\",\n    \"HospitalStreet\": \"lanewheat\",\n    \"HospitalCity\": \"kitchener\",\n    \"HospitalPincode\": \"621704\",\n    \"Education\": \"M.sc\"\n}"
						}
					]
				},
				{
					"name": "DOB future date",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.dateOfBirth).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"\r",
									"let requestBody = pm.request.body.raw;\r",
									"\r",
									"\r",
									"let parsedBody = JSON.parse(requestBody);\r",
									"\r",
									"\r",
									"let DOB_future = pm.iterationData.get(\"DOB_future\");\r",
									"\r",
									"\r",
									"parsedBody.DateOfBirth = DOB_future;\r",
									"\r",
									"\r",
									"pm.request.body.raw = JSON.stringify(parsedBody);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n  \"ContactNumber\": \"{{Dietician_ContactNumber}}\",\r\n  \"DateOfBirth\": \"{{Dietician_DateOfBirth}}\",\r\n  \"Education\": \"{{Dietician_Education}}\",\r\n  \"Email\": \"{{Dietician_Email}}\",\r\n  \"Firstname\": \"{{Dietician_Firstname}}\",\r\n  \"HospitalCity\": \"{{Dietician_HospitalCity}}\",\r\n  \"HospitalName\": \"{{Dietician_HospitalName}}\",\r\n  \"HospitalPincode\": \"{{Dietician_HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{Dietician_HospitalStreet}}\",\r\n  \"Lastname\": \"{{Dietician_Lastname}}\"\r\n \r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/dietician",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"dietician"
							]
						}
					},
					"response": [
						{
							"name": "dietician created Copy",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ContactNumber\": \"9123456785\",\r\n  \"DateOfBirth\": \"2024-10-26T18:14:08.570Z\",\r\n  \"Education\": \"M.sc\",\r\n  \"Email\": \"dietician1@gmail.com\",\r\n  \"Firstname\": \"sara\",\r\n  \"HospitalCity\": \"kitchener\",\r\n  \"HospitalName\": \"stmary\",\r\n  \"HospitalPincode\": \"621704\",\r\n  \"HospitalStreet\": \"lanewheat\",\r\n  \"Lastname\": \"raj\"\r\n \r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/dietician",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"dietician"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722716868&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=0q46FXDOZF8HidBiXXD15b7gtEfBZ4kdAXgJmi7o77A%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722716868&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=0q46FXDOZF8HidBiXXD15b7gtEfBZ4kdAXgJmi7o77A%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 03 Aug 2024 20:27:48 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"dateOfBirth\": \"Date of Birth must be a date in the past or in the present\"\n}"
						}
					]
				},
				{
					"name": "invalidpincode",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"let requestBody = pm.request.body.raw;\r",
									"console.log(\"Original Request Body:\", requestBody);\r",
									"\r",
									"\r",
									"let parsedBody = JSON.parse(requestBody);\r",
									"\r",
									"\r",
									"let Dietician_invalidpincode = pm.iterationData.get(\"Dietician_invalidpincode\");\r",
									"console.log(\"Invalid Pincode from CSV:\", Dietician_invalidpincode);\r",
									"\r",
									"\r",
									"\r",
									"parsedBody.HospitalPincode = Dietician_invalidpincode;\r",
									"console.log(\"Modified Request Body:\", JSON.stringify(parsedBody));\r",
									"\r",
									"\r",
									"pm.request.body.raw = JSON.stringify(parsedBody);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required field - dHospitalPinCode\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.dHospitalPinCode).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n  \"ContactNumber\": \"{{Dietician_ContactNumber}}\",\r\n  \"DateOfBirth\": \"{{Dietician_DateOfBirth}}\",\r\n  \"Education\": \"{{Dietician_Education}}\",\r\n  \"Email\": \"{{Dietician_Email}}\",\r\n  \"Firstname\": \"{{Dietician_Firstname}}\",\r\n  \"HospitalCity\": \"{{Dietician_HospitalCity}}\",\r\n  \"HospitalName\": \"{{Dietician_HospitalName}}\",\r\n  \"HospitalPincode\": \"{{Dietician_HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{Dietician_HospitalStreet}}\",\r\n  \"Lastname\": \"{{Dietician_Lastname}}\"\r\n \r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/dietician",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"dietician"
							]
						}
					},
					"response": []
				},
				{
					"name": "Email empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"let requestBody = pm.request.body.raw;\r",
									"\r",
									"\r",
									"let parsedBody = JSON.parse(requestBody);\r",
									"\r",
									"\r",
									"let includeEmail = pm.variables.get(\"Dietician_Email\") === 'true';\r",
									"\r",
									"//  modify the request body\r",
									"if (!includeEmail) {\r",
									"  \r",
									"    delete parsedBody.Email;\r",
									"}\r",
									"\r",
									"// Update the request body with the modified JSON\r",
									"pm.request.body.raw = JSON.stringify(parsedBody);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n  \"ContactNumber\": \"{{Dietician_ContactNumber}}\",\r\n  \"DateOfBirth\": \"{{Dietician_DateOfBirth}}\",\r\n  \"Education\": \"{{Dietician_Education}}\",\r\n  \"Email\": \"{{Dietician_Email}}\",\r\n  \"Firstname\": \"{{Dietician_Firstname}}\",\r\n  \"HospitalCity\": \"{{Dietician_HospitalCity}}\",\r\n  \"HospitalName\": \"{{Dietician_HospitalName}}\",\r\n  \"HospitalPincode\": \"{{Dietician_HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{Dietician_HospitalStreet}}\",\r\n  \"Lastname\": \"{{Dietician_Lastname}}\"\r\n \r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/dietician",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"dietician"
							]
						}
					},
					"response": [
						{
							"name": "Create Dietician",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ContactNumber\": \"9123452785\",\r\n  \"DateOfBirth\": \"2024-07-26T18:14:08.570Z\",\r\n  \"Education\": \"M.sc\",\r\n  \"Email\": \"dietician1@gmail.com\",\r\n  \"Firstname\": \"sara\",\r\n  \"HospitalCity\": \"kitchener\",\r\n  \"HospitalName\": \"stmary\",\r\n  \"HospitalPincode\": \"621704\",\r\n  \"HospitalStreet\": \"lanewheat\",\r\n  \"Lastname\": \"raj\"\r\n \r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/dietician",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"dietician"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722727612&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=hC9%2Fv2KJjanBUphpGfTsYB0smj6C2bgdpvILcLwrXhQ%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722727612&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=hC9%2Fv2KJjanBUphpGfTsYB0smj6C2bgdpvILcLwrXhQ%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Location",
									"value": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/dietician/1025"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 03 Aug 2024 23:26:52 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1025,\n    \"loginPassword\": \"Hyacinth24\",\n    \"Firstname\": \"sara\",\n    \"Lastname\": \"raj\",\n    \"ContactNumber\": \"9123452785\",\n    \"DateOfBirth\": \"2024-07-26T18:14:08.570+00:00\",\n    \"Email\": \"dietician1@gmail.com\",\n    \"HospitalName\": \"stmary\",\n    \"HospitalStreet\": \"lanewheat\",\n    \"HospitalCity\": \"kitchener\",\n    \"HospitalPincode\": \"621704\",\n    \"Education\": \"M.sc\"\n}"
						}
					]
				},
				{
					"name": "education empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"\r",
									"let requestBody = pm.request.body.raw;\r",
									"\r",
									"\r",
									"let parsedBody = JSON.parse(requestBody);\r",
									"\r",
									"\r",
									"let includeEducation = pm.variables.get(\"Dietician_Education\") === 'false';\r",
									"\r",
									"//  modify the request body\r",
									"if (!includeEducation) {\r",
									"    \r",
									"    delete parsedBody.Education;\r",
									"}\r",
									"\r",
									"\r",
									"pm.request.body.raw = JSON.stringify(parsedBody);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n  \"ContactNumber\": \"{{Dietician_ContactNumber}}\",\r\n  \"DateOfBirth\": \"{{Dietician_DateOfBirth}}\",\r\n  \"Education\": \"{{Dietician_Education}}\",\r\n  \"Email\": \"{{Dietician_Email}}\",\r\n  \"Firstname\": \"{{Dietician_Firstname}}\",\r\n  \"HospitalCity\": \"{{Dietician_HospitalCity}}\",\r\n  \"HospitalName\": \"{{Dietician_HospitalName}}\",\r\n  \"HospitalPincode\": \"{{Dietician_HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{Dietician_HospitalStreet}}\",\r\n  \"Lastname\": \"{{Dietician_Lastname}}\"\r\n \r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/dietician",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"dietician"
							]
						}
					},
					"response": [
						{
							"name": "Create Dietician",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ContactNumber\": \"9123452785\",\r\n  \"DateOfBirth\": \"2024-07-26T18:14:08.570Z\",\r\n  \"Education\": \"M.sc\",\r\n  \"Email\": \"dietician1@gmail.com\",\r\n  \"Firstname\": \"sara\",\r\n  \"HospitalCity\": \"kitchener\",\r\n  \"HospitalName\": \"stmary\",\r\n  \"HospitalPincode\": \"621704\",\r\n  \"HospitalStreet\": \"lanewheat\",\r\n  \"Lastname\": \"raj\"\r\n \r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/dietician",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"dietician"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722727612&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=hC9%2Fv2KJjanBUphpGfTsYB0smj6C2bgdpvILcLwrXhQ%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722727612&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=hC9%2Fv2KJjanBUphpGfTsYB0smj6C2bgdpvILcLwrXhQ%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Location",
									"value": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/dietician/1025"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 03 Aug 2024 23:26:52 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1025,\n    \"loginPassword\": \"Hyacinth24\",\n    \"Firstname\": \"sara\",\n    \"Lastname\": \"raj\",\n    \"ContactNumber\": \"9123452785\",\n    \"DateOfBirth\": \"2024-07-26T18:14:08.570+00:00\",\n    \"Email\": \"dietician1@gmail.com\",\n    \"HospitalName\": \"stmary\",\n    \"HospitalStreet\": \"lanewheat\",\n    \"HospitalCity\": \"kitchener\",\n    \"HospitalPincode\": \"621704\",\n    \"Education\": \"M.sc\"\n}"
						}
					]
				},
				{
					"name": "invalid endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code is 404\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n  \"ContactNumber\": \"{{Dietician_ContactNumber}}\",\r\n  \"DateOfBirth\": \"{{Dietician_DateOfBirth}}\",\r\n  \"Education\": \"{{Dietician_Education}}\",\r\n  \"Email\": \"{{Dietician_Email}}\",\r\n  \"Firstname\": \"{{Dietician_Firstname}}\",\r\n  \"HospitalCity\": \"{{Dietician_HospitalCity}}\",\r\n  \"HospitalName\": \"{{Dietician_HospitalName}}\",\r\n  \"HospitalPincode\": \"{{Dietician_HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{Dietician_HospitalStreet}}\",\r\n  \"Lastname\": \"{{Dietician_Lastname}}\"\r\n \r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}{{invalidendpoint}}",
							"host": [
								"{{BaseURL}}{{invalidendpoint}}"
							]
						}
					},
					"response": [
						{
							"name": "existing contact details Copy",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ContactNumber\": \"9123456788\",\r\n  \"DateOfBirth\": \"2024-06-26T18:14:08.570Z\",\r\n  \"Education\": \"M.sc\",\r\n  \"Email\": \"dietician1@gmail.com\",\r\n  \"Firstname\": \"sara\",\r\n  \"HospitalCity\": \"kitchener\",\r\n  \"HospitalName\": \"stmary\",\r\n  \"HospitalPincode\": \"617042\",\r\n  \"HospitalStreet\": \"lanewheat\",\r\n  \"Lastname\": \"raj\"\r\n \r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/dietici",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"dietici"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722718291&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=OsTPHIYqwfUg06z4RWlyaSdWF%2BGf%2Be0wK8SCGP%2FD%2Beo%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722718291&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=OsTPHIYqwfUg06z4RWlyaSdWF%2BGf%2Be0wK8SCGP%2FD%2Beo%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 03 Aug 2024 20:51:31 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2024-08-03T20:51:31.736+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/dietician/dietici\"\n}"
						}
					]
				},
				{
					"name": "hospitalcity empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"// Get the raw request body\r",
									"let requestBody = pm.request.body.raw;\r",
									"\r",
									"// Parse the JSON body\r",
									"let parsedBody = JSON.parse(requestBody);\r",
									"\r",
									"// Get the value of `Dietician_Firstname` from the environment or collection variables\r",
									"let includeHospitalcity = pm.variables.get(\"Dietician_Hospitalcity\") === 'true';\r",
									"\r",
									"// Conditionally modify the request body\r",
									"if (!includeHospitalcity) {\r",
									"    // Remove the Firstname field if `Dietician_Firstname` is false\r",
									"    delete parsedBody.HospitalCity;\r",
									"}\r",
									"\r",
									"// Update the request body with the modified JSON\r",
									"pm.request.body.raw = JSON.stringify(parsedBody);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n  \"ContactNumber\": \"{{Dietician_ContactNumber}}\",\r\n  \"DateOfBirth\": \"{{Dietician_DateOfBirth}}\",\r\n  \"Education\": \"{{Dietician_Education}}\",\r\n  \"Email\": \"{{Dietician_Email}}\",\r\n  \"Firstname\": \"{{Dietician_Firstname}}\",\r\n  \"HospitalCity\": \"{{Dietician_HospitalCity}}\",\r\n  \"HospitalName\": \"{{Dietician_HospitalName}}\",\r\n  \"HospitalPincode\": \"{{Dietician_HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{Dietician_HospitalStreet}}\",\r\n  \"Lastname\": \"{{Dietician_Lastname}}\"\r\n \r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/dietician",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"dietician"
							]
						}
					},
					"response": [
						{
							"name": "Create Dietician",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ContactNumber\": \"9123452785\",\r\n  \"DateOfBirth\": \"2024-07-26T18:14:08.570Z\",\r\n  \"Education\": \"M.sc\",\r\n  \"Email\": \"dietician1@gmail.com\",\r\n  \"Firstname\": \"sara\",\r\n  \"HospitalCity\": \"kitchener\",\r\n  \"HospitalName\": \"stmary\",\r\n  \"HospitalPincode\": \"621704\",\r\n  \"HospitalStreet\": \"lanewheat\",\r\n  \"Lastname\": \"raj\"\r\n \r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/dietician",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"dietician"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722727612&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=hC9%2Fv2KJjanBUphpGfTsYB0smj6C2bgdpvILcLwrXhQ%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722727612&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=hC9%2Fv2KJjanBUphpGfTsYB0smj6C2bgdpvILcLwrXhQ%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Location",
									"value": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/dietician/1025"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 03 Aug 2024 23:26:52 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1025,\n    \"loginPassword\": \"Hyacinth24\",\n    \"Firstname\": \"sara\",\n    \"Lastname\": \"raj\",\n    \"ContactNumber\": \"9123452785\",\n    \"DateOfBirth\": \"2024-07-26T18:14:08.570+00:00\",\n    \"Email\": \"dietician1@gmail.com\",\n    \"HospitalName\": \"stmary\",\n    \"HospitalStreet\": \"lanewheat\",\n    \"HospitalCity\": \"kitchener\",\n    \"HospitalPincode\": \"621704\",\n    \"Education\": \"M.sc\"\n}"
						}
					]
				},
				{
					"name": "hospital street empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"// Get the raw request body\r",
									"let requestBody = pm.request.body.raw;\r",
									"\r",
									"// Parse the JSON body\r",
									"let parsedBody = JSON.parse(requestBody);\r",
									"\r",
									"// Get the value of `Dietician_Firstname` from the environment or collection variables\r",
									"let includeHospitalStreet = pm.variables.get(\"Dietician_HospitalStreet\") === 'true';\r",
									"\r",
									"// Conditionally modify the request body\r",
									"if (!includeHospitalStreet) {\r",
									"    // Remove the Firstname field if `Dietician_Firstname` is false\r",
									"    delete parsedBody.HospitalStreet;\r",
									"}\r",
									"\r",
									"// Update the request body with the modified JSON\r",
									"pm.request.body.raw = JSON.stringify(parsedBody);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n  \"ContactNumber\": \"{{Dietician_ContactNumber}}\",\r\n  \"DateOfBirth\": \"{{Dietician_DateOfBirth}}\",\r\n  \"Education\": \"{{Dietician_Education}}\",\r\n  \"Email\": \"{{Dietician_Email}}\",\r\n  \"Firstname\": \"{{Dietician_Firstname}}\",\r\n  \"HospitalCity\": \"{{Dietician_HospitalCity}}\",\r\n  \"HospitalName\": \"{{Dietician_HospitalName}}\",\r\n  \"HospitalPincode\": \"{{Dietician_HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{Dietician_HospitalStreet}}\",\r\n  \"Lastname\": \"{{Dietician_Lastname}}\"\r\n \r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/dietician",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"dietician"
							]
						}
					},
					"response": [
						{
							"name": "Create Dietician",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ContactNumber\": \"9123452785\",\r\n  \"DateOfBirth\": \"2024-07-26T18:14:08.570Z\",\r\n  \"Education\": \"M.sc\",\r\n  \"Email\": \"dietician1@gmail.com\",\r\n  \"Firstname\": \"sara\",\r\n  \"HospitalCity\": \"kitchener\",\r\n  \"HospitalName\": \"stmary\",\r\n  \"HospitalPincode\": \"621704\",\r\n  \"HospitalStreet\": \"lanewheat\",\r\n  \"Lastname\": \"raj\"\r\n \r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/dietician",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"dietician"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722727612&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=hC9%2Fv2KJjanBUphpGfTsYB0smj6C2bgdpvILcLwrXhQ%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722727612&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=hC9%2Fv2KJjanBUphpGfTsYB0smj6C2bgdpvILcLwrXhQ%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Location",
									"value": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/dietician/1025"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 03 Aug 2024 23:26:52 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1025,\n    \"loginPassword\": \"Hyacinth24\",\n    \"Firstname\": \"sara\",\n    \"Lastname\": \"raj\",\n    \"ContactNumber\": \"9123452785\",\n    \"DateOfBirth\": \"2024-07-26T18:14:08.570+00:00\",\n    \"Email\": \"dietician1@gmail.com\",\n    \"HospitalName\": \"stmary\",\n    \"HospitalStreet\": \"lanewheat\",\n    \"HospitalCity\": \"kitchener\",\n    \"HospitalPincode\": \"621704\",\n    \"Education\": \"M.sc\"\n}"
						}
					]
				},
				{
					"name": "hospital name missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"// Get the raw request body\r",
									"let requestBody = pm.request.body.raw;\r",
									"\r",
									"// Parse the JSON body\r",
									"let parsedBody = JSON.parse(requestBody);\r",
									"\r",
									"// Get the value of `Dietician_Firstname` from the environment or collection variables\r",
									"let includeHospitalName = pm.variables.get(\"Dietician_HospitalName\") === 'true';\r",
									"\r",
									"// Conditionally modify the request body\r",
									"if (!includeHospitalName) {\r",
									"    // Remove the Firstname field if `Dietician_Firstname` is false\r",
									"    delete parsedBody.HospitalName;\r",
									"}\r",
									"\r",
									"// Update the request body with the modified JSON\r",
									"pm.request.body.raw = JSON.stringify(parsedBody);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n  \"ContactNumber\": \"{{Dietician_ContactNumber}}\",\r\n  \"DateOfBirth\": \"{{Dietician_DateOfBirth}}\",\r\n  \"Education\": \"{{Dietician_Education}}\",\r\n  \"Email\": \"{{Dietician_Email}}\",\r\n  \"Firstname\": \"{{Dietician_Firstname}}\",\r\n  \"HospitalCity\": \"{{Dietician_HospitalCity}}\",\r\n  \"HospitalName\": \"{{Dietician_HospitalName}}\",\r\n  \"HospitalPincode\": \"{{Dietician_HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{Dietician_HospitalStreet}}\",\r\n  \"Lastname\": \"{{Dietician_Lastname}}\"\r\n \r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/dietician",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"dietician"
							]
						}
					},
					"response": [
						{
							"name": "Create Dietician",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ContactNumber\": \"9123452785\",\r\n  \"DateOfBirth\": \"2024-07-26T18:14:08.570Z\",\r\n  \"Education\": \"M.sc\",\r\n  \"Email\": \"dietician1@gmail.com\",\r\n  \"Firstname\": \"sara\",\r\n  \"HospitalCity\": \"kitchener\",\r\n  \"HospitalName\": \"stmary\",\r\n  \"HospitalPincode\": \"621704\",\r\n  \"HospitalStreet\": \"lanewheat\",\r\n  \"Lastname\": \"raj\"\r\n \r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/dietician",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"dietician"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722727612&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=hC9%2Fv2KJjanBUphpGfTsYB0smj6C2bgdpvILcLwrXhQ%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722727612&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=hC9%2Fv2KJjanBUphpGfTsYB0smj6C2bgdpvILcLwrXhQ%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Location",
									"value": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/dietician/1025"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 03 Aug 2024 23:26:52 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1025,\n    \"loginPassword\": \"Hyacinth24\",\n    \"Firstname\": \"sara\",\n    \"Lastname\": \"raj\",\n    \"ContactNumber\": \"9123452785\",\n    \"DateOfBirth\": \"2024-07-26T18:14:08.570+00:00\",\n    \"Email\": \"dietician1@gmail.com\",\n    \"HospitalName\": \"stmary\",\n    \"HospitalStreet\": \"lanewheat\",\n    \"HospitalCity\": \"kitchener\",\n    \"HospitalPincode\": \"621704\",\n    \"Education\": \"M.sc\"\n}"
						}
					]
				},
				{
					"name": "invalid content type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 415\", function () {\r",
									"    pm.response.to.have.status(415);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is 'Unsupported Media Type'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eql(\"Unsupported Media Type\");\r",
									"    pm.expect(jsonData.status).to.eql(415);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"pm.request.headers.add({\r",
									"    key: 'Content-Type',\r",
									"    value: 'text/plain'  \r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n  \"ContactNumber\": \"{{Dietician_ContactNumber}}\",\r\n  \"DateOfBirth\": \"{{Dietician_DateOfBirth}}\",\r\n  \"Education\": \"{{Dietician_Education}}\",\r\n  \"Email\": \"{{Dietician_Email}}\",\r\n  \"Firstname\": \"{{Dietician_Firstname}}\",\r\n  \"HospitalCity\": \"{{Dietician_HospitalCity}}\",\r\n  \"HospitalName\": \"{{Dietician_HospitalName}}\",\r\n  \"HospitalPincode\": \"{{Dietician_HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{Dietician_HospitalStreet}}\",\r\n  \"Lastname\": \"{{Dietician_Lastname}}\"\r\n \r\n}\r\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/dietician",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"dietician"
							]
						}
					},
					"response": [
						{
							"name": "dietician created contactno chnaged",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ContactNumber\": \"9123456700\",\r\n  \"DateOfBirth\": \"2024-07-26T18:14:08.570Z\",\r\n  \"Education\": \"M.sc\",\r\n  \"Email\": \"dietician1@gmail.com\",\r\n  \"Firstname\": \"sara\",\r\n  \"HospitalCity\": \"kitchener\",\r\n  \"HospitalName\": \"stmary\",\r\n  \"HospitalPincode\": \"621704\",\r\n  \"HospitalStreet\": \"lanewheat\",\r\n  \"Lastname\": \"raj\"\r\n \r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/dietician",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"dietician"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722634473&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=Oiwa0b3BW7IHcfh5604uWpN4OFzqroWq62aWuZ2nMFc%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722634473&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=Oiwa0b3BW7IHcfh5604uWpN4OFzqroWq62aWuZ2nMFc%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Location",
									"value": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/dietician/807"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 02 Aug 2024 21:34:33 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 807,\n    \"loginPassword\": \"Primrose33\",\n    \"Firstname\": \"sara\",\n    \"Lastname\": \"raj\",\n    \"ContactNumber\": \"9123456700\",\n    \"DateOfBirth\": \"2024-07-26T18:14:08.570+00:00\",\n    \"Email\": \"dietician1@gmail.com\",\n    \"HospitalName\": \"stmary\",\n    \"HospitalStreet\": \"lanewheat\",\n    \"HospitalCity\": \"kitchener\",\n    \"HospitalPincode\": \"621704\",\n    \"Education\": \"M.sc\"\n}"
						},
						{
							"name": "dietician created dob changed",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ContactNumber\": \"9123456700\",\r\n  \"DateOfBirth\": \"2022-07-26T18:14:08.570Z\",\r\n  \"Education\": \"M.sc\",\r\n  \"Email\": \"dietician1@gmail.com\",\r\n  \"Firstname\": \"sara\",\r\n  \"HospitalCity\": \"kitchener\",\r\n  \"HospitalName\": \"stmary\",\r\n  \"HospitalPincode\": \"621704\",\r\n  \"HospitalStreet\": \"lanewheat\",\r\n  \"Lastname\": \"raj\"\r\n \r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/dietician",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"dietician"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722635097&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=TQW4zM4RfyOZnJ93fvn3ODGkwh43pK6qjzl6C5K1MKo%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722635097&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=TQW4zM4RfyOZnJ93fvn3ODGkwh43pK6qjzl6C5K1MKo%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Location",
									"value": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/dietician/812"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 02 Aug 2024 21:44:57 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 812,\n    \"loginPassword\": \"Daisy77\",\n    \"Firstname\": \"sara\",\n    \"Lastname\": \"raj\",\n    \"ContactNumber\": \"9123456700\",\n    \"DateOfBirth\": \"2022-07-26T18:14:08.570+00:00\",\n    \"Email\": \"dietician1@gmail.com\",\n    \"HospitalName\": \"stmary\",\n    \"HospitalStreet\": \"lanewheat\",\n    \"HospitalCity\": \"kitchener\",\n    \"HospitalPincode\": \"621704\",\n    \"Education\": \"M.sc\"\n}"
						}
					]
				},
				{
					"name": "existing details contact change",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"// Get the raw request body\r",
									"let requestBody = pm.request.body.raw;\r",
									"\r",
									"// Parse the JSON body\r",
									"let parsedBody = JSON.parse(requestBody);\r",
									"\r",
									"// Get the contact from the data file (assuming the data file is used for the iteration)\r",
									"let contact_change = pm.iterationData.get(\"contact_change\");\r",
									"\r",
									"// Replace the contact field with the another number from the data file\r",
									"parsedBody.ContactNumber = contact_change;\r",
									"\r",
									"// Update the request body with the modified JSON\r",
									"pm.request.body.raw = JSON.stringify(parsedBody);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code is 400\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Error code is present in the response\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.errorCode).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Error message is present in the response\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.errorMessage).to.exist.and.to.be.a('string');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n  \"ContactNumber\": \"{{Dietician_ContactNumber}}\",\r\n  \"DateOfBirth\": \"{{Dietician_DateOfBirth}}\",\r\n  \"Education\": \"{{Dietician_Education}}\",\r\n  \"Email\": \"{{Dietician_Email}}\",\r\n  \"Firstname\": \"{{Dietician_Firstname}}\",\r\n  \"HospitalCity\": \"{{Dietician_HospitalCity}}\",\r\n  \"HospitalName\": \"{{Dietician_HospitalName}}\",\r\n  \"HospitalPincode\": \"{{Dietician_HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{Dietician_HospitalStreet}}\",\r\n  \"Lastname\": \"{{Dietician_Lastname}}\"\r\n \r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{postdietician}}",
							"host": [
								"{{baseURL}}{{postdietician}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "unique fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get the raw request body\r",
									"let requestBody = pm.request.body.raw;\r",
									"\r",
									"// Parse the JSON body\r",
									"let parsedBody = JSON.parse(requestBody);\r",
									"\r",
									"// Get the  date from the data file \r",
									"let unique_DOB = pm.iterationData.get(\"unique_DOB\");\r",
									"let unique_contact = pm.iterationData.get(\"unique_contact\");\r",
									"\r",
									"\r",
									"parsedBody.DateOfBirth = unique_DOB;\r",
									"parsedBody.ContactNumber =unique_contact;\r",
									"\r",
									"// Updates the request body with the modified JSON\r",
									"pm.request.body.raw = JSON.stringify(parsedBody);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n  \"ContactNumber\": \"{{Dietician_ContactNumber}}\",\r\n  \"DateOfBirth\": \"{{Dietician_DateOfBirth}}\",\r\n  \"Education\": \"{{Dietician_Education}}\",\r\n  \"Email\": \"{{Dietician_Email}}\",\r\n  \"Firstname\": \"{{Dietician_Firstname}}\",\r\n  \"HospitalCity\": \"{{Dietician_HospitalCity}}\",\r\n  \"HospitalName\": \"{{Dietician_HospitalName}}\",\r\n  \"HospitalPincode\": \"{{Dietician_HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{Dietician_HospitalStreet}}\",\r\n  \"Lastname\": \"{{Dietician_Lastname}}\"\r\n \r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/dietician",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"dietician"
							]
						}
					},
					"response": [
						{
							"name": "unique fields",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ContactNumber\": \"9123456780\",\r\n  \"DateOfBirth\": \"2024-07-26T18:14:08.570Z\",\r\n  \"Education\": \"M.sc\",\r\n  \"Email\": \"dietician1@gmail.com\",\r\n  \"Firstname\": \"sara\",\r\n  \"HospitalCity\": \"kitchener\",\r\n  \"HospitalName\": \"stmary\",\r\n  \"HospitalPincode\": \"621704\",\r\n  \"HospitalStreet\": \"lanewheat\",\r\n  \"Lastname\": \"raj\"\r\n \r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/dietician",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"dietician"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722716972&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=eJXMTEvNnYla6O7GQQ1fCNjLwSBSYuECnKx1vyyVXTg%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722716972&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=eJXMTEvNnYla6O7GQQ1fCNjLwSBSYuECnKx1vyyVXTg%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 03 Aug 2024 20:29:32 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"errorCode\": \"DUPLICATE_ENTITY\",\n    \"errorMessage\": \"Dietician user with given date of birth and contact already exists\"\n}"
						}
					]
				},
				{
					"name": "Create Dietician",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// setting dietician iD to environment \r",
									"var responseData=pm.response.json();\r",
									"\r",
									"pm.environment.set(\"dieticianId\", responseData.id);\r",
									"pm.environment.set(\"dieticianEmail\", responseData.Email);\r",
									"pm.environment.set(\"dieticianLoginPassword\", responseData.loginPassword); \r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"// Test to check for schema validation in the response\r",
									"pm.test(\"Response schema is valid\", function () {\r",
									"    const schema = {\r",
									"        type: \"object\",\r",
									"        properties: {\r",
									"            id: { type: \"number\" },\r",
									"            loginPassword: { type: \"string\" },\r",
									"            Firstname: { type: \"string\" },\r",
									"            Lastname: { type: \"string\" },\r",
									"            ContactNumber: { type: \"string\" },\r",
									"            DateOfBirth: { type: \"string\", format: \"date-time\" },\r",
									"            Email: { type: \"string\", format: \"email\" },\r",
									"            HospitalName: { type: \"string\" },\r",
									"            HospitalStreet: { type: \"string\" },\r",
									"            HospitalCity: { type: \"string\" },\r",
									"            HospitalPincode: { type: \"string\" },\r",
									"            Education: { type: \"string\" }\r",
									"        },\r",
									"        required: [\"id\", \"loginPassword\", \"Firstname\", \"Lastname\", \"ContactNumber\", \"DateOfBirth\", \"Email\", \"HospitalName\", \"HospitalStreet\", \"HospitalCity\", \"HospitalPincode\", \"Education\"]\r",
									"    };\r",
									"\r",
									"    pm.expect(pm.response.json()).to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"const authToken = pm.environment.get(\"authToken\");\r",
									"pm.request.headers.add({\r",
									"    key: \"Authorization\",\r",
									"    value: `Bearer ${authToken}`\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n  \"ContactNumber\": \"{{Dietician_ContactNumber}}\",\r\n  \"DateOfBirth\": \"{{Dietician_DateOfBirth}}\",\r\n  \"Education\": \"{{Dietician_Education}}\",\r\n  \"Email\": \"{{Dietician_Email}}\",\r\n  \"Firstname\": \"{{Dietician_Firstname}}\",\r\n  \"HospitalCity\": \"{{Dietician_HospitalCity}}\",\r\n  \"HospitalName\": \"{{Dietician_HospitalName}}\",\r\n  \"HospitalPincode\": \"{{Dietician_HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{Dietician_HospitalStreet}}\",\r\n  \"Lastname\": \"{{Dietician_Lastname}}\"\r\n \r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/dietician",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"dietician"
							]
						}
					},
					"response": [
						{
							"name": "Create Dietician",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ContactNumber\": \"9123452785\",\r\n  \"DateOfBirth\": \"2024-07-26T18:14:08.570Z\",\r\n  \"Education\": \"M.sc\",\r\n  \"Email\": \"dietician1@gmail.com\",\r\n  \"Firstname\": \"sara\",\r\n  \"HospitalCity\": \"kitchener\",\r\n  \"HospitalName\": \"stmary\",\r\n  \"HospitalPincode\": \"621704\",\r\n  \"HospitalStreet\": \"lanewheat\",\r\n  \"Lastname\": \"raj\"\r\n \r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/dietician",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"dietician"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722727612&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=hC9%2Fv2KJjanBUphpGfTsYB0smj6C2bgdpvILcLwrXhQ%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722727612&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=hC9%2Fv2KJjanBUphpGfTsYB0smj6C2bgdpvILcLwrXhQ%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "Location",
									"value": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/dietician/1025"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 03 Aug 2024 23:26:52 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1025,\n    \"loginPassword\": \"Hyacinth24\",\n    \"Firstname\": \"sara\",\n    \"Lastname\": \"raj\",\n    \"ContactNumber\": \"9123452785\",\n    \"DateOfBirth\": \"2024-07-26T18:14:08.570+00:00\",\n    \"Email\": \"dietician1@gmail.com\",\n    \"HospitalName\": \"stmary\",\n    \"HospitalStreet\": \"lanewheat\",\n    \"HospitalCity\": \"kitchener\",\n    \"HospitalPincode\": \"621704\",\n    \"Education\": \"M.sc\"\n}"
						}
					]
				},
				{
					"name": "(ID)Retrive  with no auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is within acceptable limits\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); \r",
									"});\r",
									"\r",
									"pm.test(\"Response status code is 401\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(401);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Error message is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error message should not be empty\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/dietician/{{dieticianId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"dietician",
								"{{dieticianId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "(ID) Retrive with Auth",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains the ID\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property('id');\r",
									"   \r",
									"    pm.expect(responseJson.id).to.be.a('string'); \r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/dietician/{{dieticianId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"dietician",
								"{{dieticianId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "(ID)Retrive with invalidendpoint",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"pm.collectionVariables.set(\"GetIddietician\", \"/diet\");\r",
									"\r",
									"console.log(\"Endpoint set to invalid value:\", pm.collectionVariables.get(\"GetIddietician\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code is 404\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}{{InvalidEndPoint}}",
							"host": [
								"{{baseURL}}{{InvalidEndPoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "(ID)Retrive with BaseURLinvalid",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"BaseURL\", \"https://dietician-july--80f2590665cc.herokuapp.com/dietician\");\r",
									"\r",
									"console.log(\"Base URL set to invalid value:\", pm.collectionVariables.get(\"BaseURL\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is within acceptable limits\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); \r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response status code is 404\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(404);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has Content-Type header with value 'text/html'\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/html\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains the expected error message or title\", function () {\r",
									"    const expectedErrorMessage = \"Heroku | Application Error\";\r",
									"    pm.expect(pm.response.text()).to.include(expectedErrorMessage);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Ensure that the 'viewport' meta tag is present in the response body\", function () {\r",
									"    const responseData = pm.response.text();\r",
									"    \r",
									"    pm.expect(responseData).to.include('<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">');\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{InvalidBaseURL}}/dietician/{{dieticianId}}",
							"host": [
								"{{InvalidBaseURL}}"
							],
							"path": [
								"dietician",
								"{{dieticianId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Dietician by ID without mandatory fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.environment.get(\"missingMandatoryFields\")) {\r",
									"    pm.test(\"Request Validation\", function () {\r",
									"        pm.response.to.have.status(400); // Expecting a 400 Bad Request\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"Request Validation\", function () {\r",
									"        pm.response.to.have.status(200); // Expecting a 200 OK or 204 No Content for successful update\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let requestBody = pm.request.body.raw;\r",
									"let parsedBody = JSON.parse(requestBody);\r",
									"\r",
									"const mandatoryFields = [\"Firstname\", \"Lastname\", \"Email\"];\r",
									"const missingFields = [];\r",
									"\r",
									"mandatoryFields.forEach(field => {\r",
									"    if (!parsedBody[field]) {\r",
									"        missingFields.push(field);\r",
									"    }\r",
									"});\r",
									"\r",
									"if (missingFields.length > 0) {\r",
									"    console.log(\"Missing mandatory fields:\", missingFields.join(\", \"));\r",
									"    pm.environment.set(\"missingMandatoryFields\", true);\r",
									"} else {\r",
									"    pm.environment.set(\"missingMandatoryFields\", false);\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n  \"ContactNumber\": \"{{Dietician_ContactNumber}}\",\r\n  \"DateOfBirth\": \"{{Dietician_DateOfBirth}}\",\r\n  \"Education\": \"{{Dietician_Education}}\",\r\n  \"Email\": \"{{Dietician_Email}}\",\r\n  \"Firstname\": \"{{Dietician_Firstname}}\",\r\n  \"HospitalCity\": \"{{Dietician_HospitalCity}}\",\r\n  \"HospitalName\": \"{{Dietician_HospitalName}}\",\r\n  \"HospitalPincode\": \"{{Dietician_HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{Dietician_HospitalStreet}}\",\r\n  \"Lastname\": \"{{Dietician_Lastname}}\"\r\n \r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/dietician/{{dieticianId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"dietician",
								"{{dieticianId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Dietician by ID with an invalid Email Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"commonTests.invalidInputsRequest();\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Error message for input\", () => {\r",
									"pm.expect(jsonData.userLoginEmail).to.eql(\"Invalid Email Id!\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let requestBody = pm.request.body.raw;\r",
									"\r",
									"\r",
									"let parsedBody = JSON.parse(requestBody);\r",
									"\r",
									"\r",
									"let Dietician_updateInvalidEmailID = pm.iterationData.get(\"Dietician_updateInvalidEmailID\");\r",
									"\r",
									"\r",
									"parsedBody.Email = Dietician_updateInvalidEmailID;\r",
									"\r",
									"\r",
									"pm.request.body.raw = JSON.stringify(parsedBody);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n  \"ContactNumber\": \"{{Dietician_ContactNumber}}\",\r\n  \"DateOfBirth\": \"{{Dietician_DateOfBirth}}\",\r\n  \"Education\": \"{{Dietician_Education}}\",\r\n  \"Email\": \"{{Dietician_Email}}\",\r\n  \"Firstname\": \"{{Dietician_Firstname}}\",\r\n  \"HospitalCity\": \"{{Dietician_HospitalCity}}\",\r\n  \"HospitalName\": \"{{Dietician_HospitalName}}\",\r\n  \"HospitalPincode\": \"{{Dietician_HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{Dietician_HospitalStreet}}\",\r\n  \"Lastname\": \"{{Dietician_Lastname}}\"\r\n \r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/dietician/{{dieticianId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"dietician",
								"{{dieticianId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Dietician by ID with an invalid education",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"commonTests.invalidInputsRequest();\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Error message for input\", () => {\r",
									"pm.expect(jsonData.userLoginEmail).to.eql(\"Invalid Email Id!\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let requestBody = pm.request.body.raw;\r",
									"\r",
									"\r",
									"let parsedBody = JSON.parse(requestBody);\r",
									"\r",
									"\r",
									"let Dietician_updateInvalidEducation= pm.iterationData.get(\"Dietician_updateInvalidEducation\");\r",
									"\r",
									"\r",
									"parsedBody.Education= Dietician_updateInvalidEducation;\r",
									"\r",
									"\r",
									"pm.request.body.raw = JSON.stringify(parsedBody);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n  \"ContactNumber\": \"{{Dietician_ContactNumber}}\",\r\n  \"DateOfBirth\": \"{{Dietician_DateOfBirth}}\",\r\n  \"Education\": \"{{Dietician_Education}}\",\r\n  \"Email\": \"{{Dietician_Email}}\",\r\n  \"Firstname\": \"{{Dietician_Firstname}}\",\r\n  \"HospitalCity\": \"{{Dietician_HospitalCity}}\",\r\n  \"HospitalName\": \"{{Dietician_HospitalName}}\",\r\n  \"HospitalPincode\": \"{{Dietician_HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{Dietician_HospitalStreet}}\",\r\n  \"Lastname\": \"{{Dietician_Lastname}}\"\r\n \r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/dietician/{{dieticianId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"dietician",
								"{{dieticianId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Dietician by ID with an invalid contactnumber",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"commonTests.invalidInputsRequest();\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Error message for input\", () => {\r",
									"pm.expect(jsonData.userLoginEmail).to.eql(\"Invalid Email Id!\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let requestBody = pm.request.body.raw;\r",
									"\r",
									"\r",
									"let parsedBody = JSON.parse(requestBody);\r",
									"\r",
									"\r",
									"let Dietician_updateInvalidContactNumber = pm.iterationData.get(\"Dietician_updateInvalidContactNumber\");\r",
									"\r",
									"\r",
									"parsedBody.ContactNumber = Dietician_updateInvalidContactNumber;\r",
									"\r",
									"\r",
									"pm.request.body.raw = JSON.stringify(parsedBody);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n  \"ContactNumber\": \"{{Dietician_ContactNumber}}\",\r\n  \"DateOfBirth\": \"{{Dietician_DateOfBirth}}\",\r\n  \"Education\": \"{{Dietician_Education}}\",\r\n  \"Email\": \"{{Dietician_Email}}\",\r\n  \"Firstname\": \"{{Dietician_Firstname}}\",\r\n  \"HospitalCity\": \"{{Dietician_HospitalCity}}\",\r\n  \"HospitalName\": \"{{Dietician_HospitalName}}\",\r\n  \"HospitalPincode\": \"{{Dietician_HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{Dietician_HospitalStreet}}\",\r\n  \"Lastname\": \"{{Dietician_Lastname}}\"\r\n \r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/dietician/{{dieticianId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"dietician",
								"{{dieticianId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Dietician by ID with valid lastname",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"commonTests.validGetPutRequest();\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"//const responseDOB= new Date(jsonData.DateOfBirth).toISOString();\r",
									"\r",
									"pm.test(\"Check proper updation of input fields\", ()=> {\r",
									"pm.expect(jsonData.ContactNumber).to.eql(pm.iterationData.get(\"Dietician_updateContactNumber\").toString());\r",
									"//pm.expect(responseDOB).to.eql(new Date(pm.iterationData.get(\"DateOfBirth\")).toISOString());\r",
									"pm.expect(jsonData.Education).to.eql(pm.iterationData.get(\"Dietician_updateEducation\"));\r",
									"pm.expect(jsonData.Email).to.eql(pm.iterationData.get(\"Dietician_updateEmail\"));\r",
									"pm.expect(jsonData.Firstname).to.eql(pm.iterationData.get(\"Dietician_updateFirstname\"));\r",
									"pm.expect(jsonData.HospitalCity).to.eql(pm.iterationData.get(\"Dietician_updateHospitalCity\"));\r",
									"pm.expect(jsonData.HospitalName).to.eql(pm.iterationData.get(\"Dietician_updateHospitalName\"));\r",
									"pm.expect(jsonData.HospitalPincode).to.eql(pm.iterationData.get(\"Dietician_updatePincode\").toString());\r",
									"pm.expect(jsonData.Lastname).to.eql(pm.iterationData.get(\"Dietician_updateLastname\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Check proper updation of HospitalStreet field\", ()=> {\r",
									"pm.expect(jsonData.HospitalStreet).to.eql(pm.iterationData.get(\"Dietician_updateHospitalStreet\"));\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ContactNumber\": \"{{Dietician_updateContactNumber}}\",\r\n  \"DateOfBirth\": \"{{Dietician_updateDOB}}\",\r\n  \"Education\": \"{{Dietician_updateEducation}}\",\r\n  \"Email\": \"{{Dietician_updateEmail}}\",\r\n  \"Firstname\": \"{{Dietician_updateFirstname}}\",\r\n  \"HospitalCity\": \"{{Dietician_updateHospitalCity}}\",\r\n  \"HospitalName\": \"{{Dietician_updateHospitalName}}\",\r\n  \"HospitalPincode\": \"{{Dietician_updatePincode}}\",\r\n  \"HospitalStreet\": \"{{Dietician_updateHospitalStreet}}\",\r\n  \"Lastname\": \"{{Dietician_updateLastname}}\"\r\n \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/dietician/{{dieticianId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"dietician",
								"{{dieticianId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Dietician by ID with existing uniquefields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ContactNumber\": \"{{Dietician_ContactNumber}}\",\r\n  \"DateOfBirth\": \"{{Dietician_DateOfBirth}}\",\r\n  \"Education\": \"{{Dietician_Education}}\",\r\n  \"Email\": \"{{Dietician_Email}}\",\r\n  \"Firstname\": \"{{Dietician_Firstname}}\",\r\n  \"HospitalCity\": \"{{Dietician_HospitalCity}}\",\r\n  \"HospitalName\": \"{{Dietician_HospitalName}}\",\r\n  \"HospitalPincode\": \"{{Dietician_HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{Dietician_HospitalStreet}}\",\r\n  \"Lastname\": \"{{Dietician_Lastname}}\"\r\n \r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/dietician/{{dieticianId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"dietician",
								"{{dieticianId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Dietician by ID with invalid lastname",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains validation errors\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property('error');\r",
									"    pm.expect(responseJson.details).to.have.all.keys('name', 'experience');\r",
									"});\r",
									"\r",
									" "
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let requestBody = pm.request.body.raw;\r",
									"\r",
									"\r",
									"let parsedBody = JSON.parse(requestBody);\r",
									"\r",
									"\r",
									"let Dietician_updateInvalidLastName = pm.iterationData.get(\"Dietician_updateInvalidLastName\");\r",
									"\r",
									"\r",
									"parsedBody.Lastname = Dietician_updateInvalidLastName;\r",
									"\r",
									"\r",
									"pm.request.body.raw = JSON.stringify(parsedBody);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n  \"ContactNumber\": \"{{Dietician_ContactNumber}}\",\r\n  \"DateOfBirth\": \"{{Dietician_DateOfBirth}}\",\r\n  \"Education\": \"{{Dietician_Education}}\",\r\n  \"Email\": \"{{Dietician_Email}}\",\r\n  \"Firstname\": \"{{Dietician_Firstname}}\",\r\n  \"HospitalCity\": \"{{Dietician_HospitalCity}}\",\r\n  \"HospitalName\": \"{{Dietician_HospitalName}}\",\r\n  \"HospitalPincode\": \"{{Dietician_HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{Dietician_HospitalStreet}}\",\r\n  \"Lastname\": \"{{Dietician_Lastname}}\"\r\n \r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/dietician/{{dieticianId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"dietician",
								"{{dieticianId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Dietician with an invalid  ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"commonTests.notFoundRequest();\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"const invalidDietcianID = pm.collectionVariables.get(\"invalidDietcianID\");\r",
									"\r",
									"pm.test(\"Error message for invalid ID\", () => {   \r",
									" const expectedMessage = `Dietician with ${invalidDietcianID} does not exists`;\r",
									"pm.expect(jsonData.errorMessage).to.eql(expectedMessage);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n  \"ContactNumber\": \"{{Dietician_ContactNumber}}\",\r\n  \"DateOfBirth\": \"{{Dietician_DateOfBirth}}\",\r\n  \"Education\": \"{{Dietician_Education}}\",\r\n  \"Email\": \"{{Dietician_Email}}\",\r\n  \"Firstname\": \"{{Dietician_Firstname}}\",\r\n  \"HospitalCity\": \"{{Dietician_HospitalCity}}\",\r\n  \"HospitalName\": \"{{Dietician_HospitalName}}\",\r\n  \"HospitalPincode\": \"{{Dietician_HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{Dietician_HospitalStreet}}\",\r\n  \"Lastname\": \"{{Dietician_Lastname}}\"\r\n \r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/dietician/0",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"dietician",
								"0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Dietician by ID with valid inputs Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"commonTests.validGetPutRequest();\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"const responseDOB= new Date(jsonData.DateOfBirth).toISOString();\r",
									"\r",
									"pm.test(\"Check proper updation of input fields\", ()=> {\r",
									"pm.expect(jsonData.ContactNumber).to.eql(pm.iterationData.get(\"Dietician_updateContactNumber\").toString());\r",
									"//pm.expect(responseDOB).to.eql(new Date(pm.iterationData.get(\"DateOfBirth\")).toISOString());\r",
									"pm.expect(jsonData.Education).to.eql(pm.iterationData.get(\"Dietician_updateEducation\"));\r",
									"pm.expect(jsonData.Email).to.eql(pm.iterationData.get(\"Dietician_updateEmail\"));\r",
									"pm.expect(jsonData.Firstname).to.eql(pm.iterationData.get(\"Dietician_updateFirstname\"));\r",
									"pm.expect(jsonData.HospitalCity).to.eql(pm.iterationData.get(\"Dietician_updateHospitalCity\"));\r",
									"pm.expect(jsonData.HospitalName).to.eql(pm.iterationData.get(\"Dietician_updateHospitalName\"));\r",
									"pm.expect(jsonData.HospitalPincode).to.eql(pm.iterationData.get(\"Dietician_updatePincode\").toString());\r",
									"pm.expect(jsonData.Lastname).to.eql(pm.iterationData.get(\"Dietician_updateLastname\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Check proper updation of HospitalStreet field\", ()=> {\r",
									"pm.expect(jsonData.HospitalStreet).to.eql(pm.iterationData.get(\"Dietician_updateHospitalStreet\"));\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken_col}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ContactNumber\": \"{{Dietician_updateContactNumber}}\",\r\n  \"DateOfBirth\": \"{{Dietician_updateDOB}}\",\r\n  \"Education\": \"{{Dietician_updateEducation}}\",\r\n  \"Email\": \"{{Dietician_updateEmail}}\",\r\n  \"Firstname\": \"{{Dietician_updateFirstname}}\",\r\n  \"HospitalCity\": \"{{Dietician_updateHospitalCity}}\",\r\n  \"HospitalName\": \"{{Dietician_updateHospitalName}}\",\r\n  \"HospitalPincode\": \"{{Dietician_updatePincode}}\",\r\n  \"HospitalStreet\": \"{{Dietician_updateHospitalStreet}}\",\r\n  \"Lastname\": \"{{Dietician_updateLastname}}\"\r\n \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/dietician/1145",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"dietician",
								"1145"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Dietician by ID with an existing contactNumber and DOB Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"commonTests.invalidInputsRequest();\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let requestBody = pm.request.body.raw;\r",
									"let parsedBody = JSON.parse(requestBody);\r",
									"\r",
									"\r",
									"parsedBody.ContactNumber = pm.iterationData.get(\"Dietician_updateExistingContactNo\");\r",
									"parsedBody.DateOfBirth = pm.iterationData.get(\"Dietician_updateExistingDOB\");\r",
									"\r",
									"pm.request.body.raw = JSON.stringify(parsedBody);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken_col}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n  \"ContactNumber\": \"{{Dietician_ContactNumber}}\",\r\n  \"DateOfBirth\": \"{{Dietician_DateOfBirth}}\",\r\n  \"Education\": \"{{Dietician_Education}}\",\r\n  \"Email\": \"{{Dietician_Email}}\",\r\n  \"Firstname\": \"{{Dietician_Firstname}}\",\r\n  \"HospitalCity\": \"{{Dietician_HospitalCity}}\",\r\n  \"HospitalName\": \"{{Dietician_HospitalName}}\",\r\n  \"HospitalPincode\": \"{{Dietician_HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{Dietician_HospitalStreet}}\",\r\n  \"Lastname\": \"{{Dietician_Lastname}}\"\r\n \r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/dietician/913",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"dietician",
								"913"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Dietician by ID without mandatory fields Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"commonTests.invalidInputsRequest();\r",
									"const jsonData = pm.response.json();\r",
									"//let expectedErrorMessage = JSON.parse(pm.variables.get(\"Dietician_mandatoryFieldsErrorMessage\"));\r",
									"let expectedErrorMessage =\r",
									"{\r",
									"   \"lastName\": \"Dietician's lastname is required!\",\r",
									"    \"dHospitalName\": \"Dietician's hospital name is required!\",\r",
									"    \"firstName\": \"Dietician's firstname is required!\",\r",
									"    \"dHospitalCityName\": \"Dietician's hospital city name is required!\",\r",
									"    \"userLoginEmail\": \"Dietician's login email is required!\",\r",
									"    \"contact\": \"Dietician's contact number is required!\",\r",
									"    \"dEducation\": \"Dietician's education is required!\",\r",
									"    \"dateOfBirth\": \"Date of Birth is Mandatory!\",\r",
									"    \"dHospitalPinCode\": \"Dietician's hospital pincode is required!\",\r",
									"    \"dHospitalStreetName\": \"Dietician's hospital street name is required!\"\r",
									"};\r",
									"\r",
									"Object.keys(expectedErrorMessage).forEach(field => {\r",
									"    pm.test(`Error message for missing mandatory field ${field}`, ()=> {\r",
									"        pm.expect(jsonData[field]).to.eql(expectedErrorMessage[field]);\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let requestBody = pm.request.body.raw;\r",
									"\r",
									"let parsedBody = JSON.parse(requestBody);\r",
									"\r",
									"const variableFieldPairs = [\r",
									"    { variable: \"Dietician_ContactNumber\", field: \"ContactNumber\" },\r",
									"    { variable: \"Dietician_DateOfBirth\", field: \"DateOfBirth\" },\r",
									"    { variable: \"Dietician_Education\", field: \"Education\" },\r",
									"    { variable: \"Dietician_Email\", field: \"Email\" },\r",
									"    { variable: \"Dietician_Firstname\", field: \"Firstname\" },\r",
									"    { variable: \"Dietician_HospitalCity\", field: \"HospitalCity\" },\r",
									"    { variable: \"Dietician_HospitalName\", field: \"HospitalName\" },\r",
									"    { variable: \"Dietician_HospitalPincode\", field: \"HospitalPincode\" },\r",
									"    { variable: \"Dietician_HospitalStreet\", field: \"HospitalStreet\" },\r",
									"    { variable: \"Dietician_Lastname\", field: \"Lastname\" }\r",
									"];\r",
									"\r",
									"variableFieldPairs.forEach(pair => {\r",
									"    let includeField = pm.variables.get(pair.variable) ;\r",
									"    if (includeField) {\r",
									"        delete parsedBody[pair.field];\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.request.body.raw = JSON.stringify(parsedBody);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken_col}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n  \"ContactNumber\": \"{{Dietician_ContactNumber}}\",\r\n  \"DateOfBirth\": \"{{Dietician_DateOfBirth}}\",\r\n  \"Education\": \"{{Dietician_Education}}\",\r\n  \"Email\": \"{{Dietician_Email}}\",\r\n  \"Firstname\": \"{{Dietician_Firstname}}\",\r\n  \"HospitalCity\": \"{{Dietician_HospitalCity}}\",\r\n  \"HospitalName\": \"{{Dietician_HospitalName}}\",\r\n  \"HospitalPincode\": \"{{Dietician_HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{Dietician_HospitalStreet}}\",\r\n  \"Lastname\": \"{{Dietician_Lastname}}\"\r\n \r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/dietician/{{dieticianID_collec}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"dietician",
								"{{dieticianID_collec}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Dietician by ID without authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code is 401\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(401);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Error message is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error message should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.remove(\"Authorization\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n  \"ContactNumber\": \"{{Dietician_ContactNumber}}\",\r\n  \"DateOfBirth\": \"{{Dietician_DateOfBirth}}\",\r\n  \"Education\": \"{{Dietician_Education}}\",\r\n  \"Email\": \"{{Dietician_Email}}\",\r\n  \"Firstname\": \"{{Dietician_Firstname}}\",\r\n  \"HospitalCity\": \"{{Dietician_HospitalCity}}\",\r\n  \"HospitalName\": \"{{Dietician_HospitalName}}\",\r\n  \"HospitalPincode\": \"{{Dietician_HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{Dietician_HospitalStreet}}\",\r\n  \"Lastname\": \"{{Dietician_Lastname}}\"\r\n \r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/dietician/{{dieticianId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"dietician",
								"{{dieticianId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Dietician by ID with invalid URL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"commonTests.notFoundRequest();\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n  \"ContactNumber\": \"{{Dietician_ContactNumber}}\",\r\n  \"DateOfBirth\": \"{{Dietician_DateOfBirth}}\",\r\n  \"Education\": \"{{Dietician_Education}}\",\r\n  \"Email\": \"{{Dietician_Email}}\",\r\n  \"Firstname\": \"{{Dietician_Firstname}}\",\r\n  \"HospitalCity\": \"{{Dietician_HospitalCity}}\",\r\n  \"HospitalName\": \"{{Dietician_HospitalName}}\",\r\n  \"HospitalPincode\": \"{{Dietician_HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{Dietician_HospitalStreet}}\",\r\n  \"Lastname\": \"{{Dietician_Lastname}}\"\r\n \r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{InvalidBaseURL}}/dietician/{{dieticianId}}",
							"host": [
								"{{InvalidBaseURL}}"
							],
							"path": [
								"dietician",
								"{{dieticianId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Dietician login",
			"item": [
				{
					"name": "Dietician login without body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"commonTests.invalidInputsRequest();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/login",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": [
						{
							"name": "without_body_400",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/dietician",
									"protocol": "https",
									"host": [
										"dietician-july-api-hackathon-80f2590665cc",
										"herokuapp",
										"com"
									],
									"path": [
										"dietician",
										"dietician"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722651115&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=3H%2F8ne3ZjkQqEmIsQuoquOqiM8%2Bl3Q6DRG68mVUKEOs%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722651115&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=3H%2F8ne3ZjkQqEmIsQuoquOqiM8%2Bl3Q6DRG68mVUKEOs%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 03 Aug 2024 02:11:55 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2024-08-03T02:11:55.862+00:00\",\n    \"status\": 400,\n    \"error\": \"Bad Request\",\n    \"path\": \"/dietician/dietician\"\n}"
						},
						{
							"name": "LOG IN without body",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/dietician",
									"protocol": "https",
									"host": [
										"dietician-july-api-hackathon-80f2590665cc",
										"herokuapp",
										"com"
									],
									"path": [
										"dietician",
										"dietician"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1723050158&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=7X1wliNkdeBxBQ7V6XBzFlqTFSgxdCz6jL3Lh1%2B0%2Fjo%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1723050158&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=7X1wliNkdeBxBQ7V6XBzFlqTFSgxdCz6jL3Lh1%2B0%2Fjo%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 07 Aug 2024 17:02:38 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2024-08-07T17:02:38.621+00:00\",\n    \"status\": 400,\n    \"error\": \"Bad Request\",\n    \"path\": \"/dietician/dietician\"\n}"
						}
					]
				},
				{
					"name": "Dietician login with invalid credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"commonTests.unauthorizedRequest();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"{{invalidPassword}}\",\r\n  \"userLoginEmail\": \"{{invalidEmail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/login",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": [
						{
							"name": "invalid_creden_400",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"Fy0fgxhfgh9\",\r\n  \"userLoginEmail\": \"Rueckedfdsgdfgdfgr9hoo.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/dietician",
									"protocol": "https",
									"host": [
										"dietician-july-api-hackathon-80f2590665cc",
										"herokuapp",
										"com"
									],
									"path": [
										"dietician",
										"dietician"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722651385&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=p4taClJex4Fe7tBgqlMGR0A31jHDYPDMYcSJKoBNfHQ%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722651385&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=p4taClJex4Fe7tBgqlMGR0A31jHDYPDMYcSJKoBNfHQ%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 03 Aug 2024 02:16:25 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"lastName\": \"Dietician's lastname is required!\",\n    \"firstName\": \"Dietician's firstname is required!\",\n    \"dHospitalName\": \"Dietician's hospital name is required!\",\n    \"dHospitalCityName\": \"Dietician's hospital city name is required!\",\n    \"userLoginEmail\": \"Dietician's login email is required!\",\n    \"contact\": \"Dietician's contact number is required!\",\n    \"dEducation\": \"Dietician's education is required!\",\n    \"dateOfBirth\": \"Date of Birth is Mandatory!\",\n    \"dHospitalPinCode\": \"Dietician's hospital pincode is required!\",\n    \"dHospitalStreetName\": \"Dietician's hospital street name is required!\"\n}"
						},
						{
							"name": "Dietician_login_003",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"Fy0fgxhfgh9\",\r\n  \"userLoginEmail\": \"Rueckedfdsgdfgdfgr9hoo.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/login",
									"protocol": "https",
									"host": [
										"dietician-july-api-hackathon-80f2590665cc",
										"herokuapp",
										"com"
									],
									"path": [
										"dietician",
										"login"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722702798&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=UP5fYwsCq0bnUDiAAsqfakPeMeIRdvA9jmdpjqVcMow%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722702798&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=UP5fYwsCq0bnUDiAAsqfakPeMeIRdvA9jmdpjqVcMow%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 03 Aug 2024 16:33:18 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"errorCode\": \"Invalid UserName or Password\",\n    \"errorMessage\": \"Bad credentials\"\n}"
						}
					]
				},
				{
					"name": "Dietician login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jasonData= pm.response.json();\r",
									"pm.environment.set(\"dieticianToken\", jasonData.token);\r",
									"\r",
									"commonTests.validGetPutRequest();\r",
									"commonTests.loginSchemaValidation();\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"{{dieticianLoginPassword}}\",\r\n  \"userLoginEmail\": \"{{dieticianEmail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/login",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": [
						{
							"name": "success_200",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"Funny09\",\r\n  \"userLoginEmail\": \"Reina_Ruecker97@yahoo.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/login",
									"protocol": "https",
									"host": [
										"dietician-july-api-hackathon-80f2590665cc",
										"herokuapp",
										"com"
									],
									"path": [
										"dietician",
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722645533&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=hiTDTg4LU4IS1t%2FZYwCLbuF0GKtL3RRRBMjWVouk7us%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722645533&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=hiTDTg4LU4IS1t%2FZYwCLbuF0GKtL3RRRBMjWVouk7us%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 03 Aug 2024 00:38:53 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"token\": \"eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJSZWluYV9SdWVja2VyOTdAeWFob28uY29tIiwiaWF0IjoxNzIyNjQ1NTMzLCJleHAiOjE3MjI2NzQzMzN9.iECKUmGuRiUCByyc1aWTtkxYQfIxw6lLW9GIeJ-13qLrUaL3qMHg2I--8GomLrsBG5ISVjc3pUR1Mv-Haw5a5w\",\n    \"type\": \"Bearer \",\n    \"userId\": 7142,\n    \"loginUserEmail\": \"Reina_Ruecker97@yahoo.com\",\n    \"roles\": [\n        \"ROLE_DIETICIAN\"\n    ]\n}"
						},
						{
							"name": "Dietician_login_001",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"Funny09\",\r\n  \"userLoginEmail\": \"Reina_Ruecker97@yahoo.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/login",
									"protocol": "https",
									"host": [
										"dietician-july-api-hackathon-80f2590665cc",
										"herokuapp",
										"com"
									],
									"path": [
										"dietician",
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722645634&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=zFP%2BxRMffr5uVWSOJIQGD4AHXOk0IWSOiQnlSbJSnMg%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722645634&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=zFP%2BxRMffr5uVWSOJIQGD4AHXOk0IWSOiQnlSbJSnMg%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 03 Aug 2024 00:40:34 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"token\": \"eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJSZWluYV9SdWVja2VyOTdAeWFob28uY29tIiwiaWF0IjoxNzIyNjQ1NjM0LCJleHAiOjE3MjI2NzQ0MzR9.trr5601rctCO1BIMKlQeCxMnXQNfCnXvijXKhh0hqCaVaUkSjYuyY3KS8INYT234k5scFYJd93iw92W_uYhqzw\",\n    \"type\": \"Bearer \",\n    \"userId\": 7142,\n    \"loginUserEmail\": \"Reina_Ruecker97@yahoo.com\",\n    \"roles\": [\n        \"ROLE_DIETICIAN\"\n    ]\n}"
						}
					]
				}
			]
		},
		{
			"name": "Patient Module",
			"item": [
				{
					"name": "Create Patient with Missing FirstName",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get the form data object\r",
									"let formData = pm.request.body.formdata;\r",
									"\r",
									"\r",
									"if (formData) {\r",
									"    console.log(\"FormData exists and count method is available.\");\r",
									"\r",
									"    \r",
									"    let count = formData.count();\r",
									"    console.log(\"Number of fields in formData: \" + count);\r",
									"\r",
									"    \r",
									"    for (let i = 0; i < count; i++) {\r",
									"        let item = formData.get(i);\r",
									"\r",
									"       \r",
									"        if (item) {\r",
									"            console.log(\"Item at index \" + i + \": \", item);\r",
									"\r",
									"            if (item.key === \"FirstName\") {\r",
									"                let includeFirstname = pm.variables.get(\"Patient_Firstname\") === 'true';\r",
									"                \r",
									"               \r",
									"                if (!includeFirstname) {\r",
									"                    formData.remove(item.key); \r",
									"                }\r",
									"            }\r",
									"        } else {\r",
									"            console.error(\"Form data item is undefined or null at index \" + i);\r",
									"        }\r",
									"    }\r",
									"} else {\r",
									"    console.error(\"Form data is undefined or does not have a count method.\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status code is 400\", function () {\r",
									"  pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response has valid JSON body\", function () {\r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData).to.have.property('timestamp');\r",
									"  pm.expect(responseData).to.have.property('status');\r",
									"  pm.expect(responseData).to.have.property('error');\r",
									"  pm.expect(responseData).to.have.property('path');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dieticianToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "PatientInfo",
									"value": "{ \"FirstName\": \"{{Patient_FirstName}}\",\n\"LastName\": \"{{Patient_LastName}}\",\n\"ContactNumber\": \"{{Patient_ContactNumber}}\",\n\"Email\": \"{{Patient_Email}}\",\n\"Allergy\": \"{{Allergy}}\",\n\"FoodPreference\": \"{{FoodPreference}}\",\n\"CuisineCategory\":\"{{CuisineCategory}}\",\n\"DateOfBirth\": \"{{Patient_DateOfBirth}}\"\n}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseURL}}/patient",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"patient"
							]
						}
					},
					"response": [
						{
							"name": "Missing CuisineCategory",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "PatientInfo",
											"value": "{ \"FirstName\": \"Sony\",\n\"LastName\": \"Sony\",\n\"ContactNumber\": \"9005089943\",\n\"Email\": \"Sony@gmail.com\",\n\"Allergy\": \"pecan\",\n\"FoodPreference\": \"Nonveg\",\n\"CuisineCategory\":\"\",\n\"DateOfBirth\": \"1977-02-04\"\n}",
											"type": "text"
										},
										{
											"key": "File",
											"type": "file",
											"src": "postman-cloud:///1ef50041-b0cf-4520-834f-a4054daded29"
										}
									]
								},
								"url": {
									"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/patient",
									"protocol": "https",
									"host": [
										"dietician-july-api-hackathon-80f2590665cc",
										"herokuapp",
										"com"
									],
									"path": [
										"dietician",
										"patient"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722700373&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=2e9rfCi5OiUxg4ojh9w8b3NnNJYz6X9NrgSQfIVOFTo%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722700373&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=2e9rfCi5OiUxg4ojh9w8b3NnNJYz6X9NrgSQfIVOFTo%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 03 Aug 2024 15:52:53 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2024-08-03T15:52:53.395+00:00\",\n    \"status\": 400,\n    \"error\": \"Bad Request\",\n    \"path\": \"/dietician/patient\"\n}"
						},
						{
							"name": "Misspelled Mandatory Field",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "PatientInfo",
											"value": "{ \"FirstName\": \"Sony\",\n\"LastName\": \"Sony\",\n\"ContactNumber\": \"9005089943\",\n\"Email\": \"Sony@gmail.com\",\n\"Allergy\": \"pecun\",\n\"FoodPreference\": \"Nonveg\",\n\"CuisineCategory\":\"Indian\",\n\"DateOfBirth\": \"1967-02-04\"\n}",
											"type": "text"
										},
										{
											"key": "File",
											"type": "file",
											"src": "postman-cloud:///1ef50041-b0cf-4520-834f-a4054daded29"
										}
									]
								},
								"url": {
									"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/patient",
									"protocol": "https",
									"host": [
										"dietician-july-api-hackathon-80f2590665cc",
										"herokuapp",
										"com"
									],
									"path": [
										"dietician",
										"patient"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722700698&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=Vn53yrwk%2BT0L8LNDLLM4R6f%2FaUmbrkKTlf2i4lyz9o8%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722700698&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=Vn53yrwk%2BT0L8LNDLLM4R6f%2FaUmbrkKTlf2i4lyz9o8%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 03 Aug 2024 15:58:19 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2024-08-03T15:58:19.300+00:00\",\n    \"status\": 400,\n    \"error\": \"Bad Request\",\n    \"path\": \"/dietician/patient\"\n}"
						},
						{
							"name": "Missing FirstName",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "PatientInfo",
											"value": "{ \"FirstName\": \"\",\n\"LastName\": \"Sony\",\n\"ContactNumber\": \"9005089943\",\n\"Email\": \"Sony@gmail.com\",\n\"Allergy\": \"pecun\",\n\"FoodPreference\": \"Nonveg\",\n\"CuisineCategory\":\"Indian\",\n\"DateOfBirth\": \"1967-02-04\"\n}",
											"type": "text"
										},
										{
											"key": "File",
											"type": "file",
											"src": "postman-cloud:///1ef50041-b0cf-4520-834f-a4054daded29"
										}
									]
								},
								"url": {
									"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/patient",
									"protocol": "https",
									"host": [
										"dietician-july-api-hackathon-80f2590665cc",
										"herokuapp",
										"com"
									],
									"path": [
										"dietician",
										"patient"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1723012486&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=sXI2rOl8PVav1FKQ4ThDGRk0fn5JqQOulRb3tVXix7s%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1723012486&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=sXI2rOl8PVav1FKQ4ThDGRk0fn5JqQOulRb3tVXix7s%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 07 Aug 2024 06:34:46 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2024-08-07T06:34:46.841+00:00\",\n    \"status\": 400,\n    \"error\": \"Bad Request\",\n    \"path\": \"/dietician/patient\"\n}"
						}
					]
				},
				{
					"name": "Create Patient with Invalid Endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Renamed the variable to responseData\r",
									"pm.test(\"Status code is 404\", () => {\r",
									"  pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error message should not be empty\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dietToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "PatientId",
									"value": ": { \"FirstName\": \"{{Patient_FirstName}}\",\n\"LastName\": \"{{Patient_LastName}}\",\n\"ContactNumber\": \"{{Patient_ContactNumber}}\",\n\"Email\": \"{{Patient_Email}}\",\n\"Allergy\": \"{{Allergy}}\",\n\"FoodPreference\": \"{{FoodPreference}}\",\n\"CuisineCategory\":\"{{CuisineCategory}}\",\n\"DateOfBirth\": \"{{Patient_DateOfBirth}}\"\n}\n",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseURL}}{{invalidEndpoint}}",
							"host": [
								"{{baseURL}}{{invalidEndpoint}}"
							]
						}
					},
					"response": [
						{
							"name": "New Request",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "PatientId",
											"value": ": { \"FirstName\": \"Sing\",\n\"LastName\": \"sing\",\n\"ContactNumber\": \"7878786778\",\n\"Email\": \"sing@gmail.com\",\n\"Allergy\": \"egg\",\n\"FoodPreference\": \"Vegetarian\",\n\"CuisineCategory\":\"lebanese\",\n\"DateOfBirth\": \"1996-02-14\"\n}\n",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef50041-b0cf-4520-834f-a4054daded29"
										}
									]
								},
								"url": {
									"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/info",
									"protocol": "https",
									"host": [
										"dietician-july-api-hackathon-80f2590665cc",
										"herokuapp",
										"com"
									],
									"path": [
										"dietician",
										"info"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722632637&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=0WfCplco7FJTq3s14Knmf%2FFN14sBI5hNZ5gjgQfHz28%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722632637&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=0WfCplco7FJTq3s14Knmf%2FFN14sBI5hNZ5gjgQfHz28%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 02 Aug 2024 21:03:57 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2024-08-02T21:03:57.979+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/dietician/info\"\n}"
						},
						{
							"name": "Create Patient with Invalid Endpoint",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "PatientId",
											"value": ": { \"FirstName\": \"Sing\",\n\"LastName\": \"sing\",\n\"ContactNumber\": \"7878786778\",\n\"Email\": \"sing@gmail.com\",\n\"Allergy\": \"egg\",\n\"FoodPreference\": \"Vegetarian\",\n\"CuisineCategory\":\"lebanese\",\n\"DateOfBirth\": \"1996-02-14\"\n}\n",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef50041-b0cf-4520-834f-a4054daded29"
										}
									]
								},
								"url": {
									"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/info",
									"protocol": "https",
									"host": [
										"dietician-july-api-hackathon-80f2590665cc",
										"herokuapp",
										"com"
									],
									"path": [
										"dietician",
										"info"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1723037888&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=zc5rywuj0ywUQYvBLmwRB3qEzx0kEYMEEBTFf7FWTMY%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1723037888&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=zc5rywuj0ywUQYvBLmwRB3qEzx0kEYMEEBTFf7FWTMY%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 07 Aug 2024 13:38:08 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2024-08-07T13:38:08.551+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/dietician/info\"\n}"
						}
					]
				},
				{
					"name": "Create Patient with Invalid authorisation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// commonTests.unauthorizedRequest;\r",
									"\r",
									"pm.test(\"Status code is 401\", () => {\r",
									"  pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error message is a non-empty string\", function () {\r",
									"    // const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(pm.response.json().error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error message should not be empty\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.remove(\"Authorization\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "PatientId",
									"value": ": { \"FirstName\": \"{{Patient_FirstName}}\",\n\"LastName\": \"{{Patient_LastName}}\",\n\"ContactNumber\": \"{{Patient_ContactNumber}}\",\n\"Email\": \"{{Patient_Email}}\",\n\"Allergy\": \"{{Allergy}}\",\n\"FoodPreference\": \"{{FoodPreference}}\",\n\"CuisineCategory\":\"{{CuisineCategory}}\",\n\"DateOfBirth\": \"{{Patient_DateOfBirth}}\"\n}\n",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseURL}}/patient",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"patient"
							]
						}
					},
					"response": [
						{
							"name": "New Request",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "PatientId",
											"value": ": { \"FirstName\": \"Sing\",\n\"LastName\": \"sing\",\n\"ContactNumber\": \"7878786778\",\n\"Email\": \"sing@gmail.com\",\n\"Allergy\": \"egg\",\n\"FoodPreference\": \"Vegetarian\",\n\"CuisineCategory\":\"lebanese\",\n\"DateOfBirth\": \"1996-02-14\"\n}\n",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef50041-b0cf-4520-834f-a4054daded29"
										}
									]
								},
								"url": {
									"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/info",
									"protocol": "https",
									"host": [
										"dietician-july-api-hackathon-80f2590665cc",
										"herokuapp",
										"com"
									],
									"path": [
										"dietician",
										"info"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722632637&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=0WfCplco7FJTq3s14Knmf%2FFN14sBI5hNZ5gjgQfHz28%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722632637&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=0WfCplco7FJTq3s14Knmf%2FFN14sBI5hNZ5gjgQfHz28%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 02 Aug 2024 21:03:57 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2024-08-02T21:03:57.979+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/dietician/info\"\n}"
						},
						{
							"name": "Create Patient with Invalid authorisation",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "PatientId",
											"value": ": { \"FirstName\": \"Sing\",\n\"LastName\": \"sing\",\n\"ContactNumber\": \"7878786778\",\n\"Email\": \"sing@gmail.com\",\n\"Allergy\": \"egg\",\n\"FoodPreference\": \"Vegetarian\",\n\"CuisineCategory\":\"lebanese\",\n\"DateOfBirth\": \"1996-02-14\"\n}\n",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef50041-b0cf-4520-834f-a4054daded29"
										}
									]
								},
								"url": {
									"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/patient",
									"protocol": "https",
									"host": [
										"dietician-july-api-hackathon-80f2590665cc",
										"herokuapp",
										"com"
									],
									"path": [
										"dietician",
										"patient"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1723038626&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=5WTPZmqO5O8GNjsWLJSIIe4yitKB%2F38B7gpWOGspF40%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1723038626&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=5WTPZmqO5O8GNjsWLJSIIe4yitKB%2F38B7gpWOGspF40%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 07 Aug 2024 13:50:26 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2024-08-07T13:50:27.023+00:00\",\n    \"status\": 401,\n    \"error\": \"Unauthorized\",\n    \"path\": \"/dietician/patient\"\n}"
						}
					]
				},
				{
					"name": "Create Patient_Invalid DOB_FutureDate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Renamed the 'jsonBody' variable to 'responseJSON'\r",
									"var responseJSON = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status code is 400\", function () {\r",
									"  pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"// pm.test(\"Response has valid JSON body\", function () {\r",
									"//   pm.expect(responseJSON).to.be.an('object');\r",
									"//   pm.expect(responseJSON).to.have.property('timestamp');\r",
									"//   pm.expect(responseJSON).to.have.property('status');\r",
									"//   pm.expect(responseJSON).to.have.property('error');\r",
									"//   pm.expect(responseJSON).to.have.property('path');\r",
									"// });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"let formData = pm.request.body.formdata;\r",
									"\r",
									"if (formData) {\r",
									"    console.log(\"FormData exists and count method is available.\");\r",
									"\r",
									"    // Dob future from csv file\r",
									"    let futureDateOfBirth = pm.iterationData.get(\"future_date_of_birth\");\r",
									"\r",
									"    \r",
									"    console.log(\"Future Date of Birth from CSV: \" + futureDateOfBirth);\r",
									"\r",
									"    let count = formData.count();\r",
									"    console.log(\"Number of fields in formData: \" + count);\r",
									"\r",
									"    //  form data fields iteration\r",
									"    for (let i = 0; i < count; i++) {\r",
									"        let item = formData.get(i);\r",
									"\r",
									"        if (item) {\r",
									"            console.log(\"Item at index \" + i + \": \", item);\r",
									"\r",
									"            \r",
									"            if (item.key === \"DateOfBirth\") {\r",
									"                // replaced the future date value\r",
									"                item.value = futureDateOfBirth;\r",
									"                console.log(\"Updated DateOfBirth to: \" + futureDateOfBirth);\r",
									"            }\r",
									"        } else {\r",
									"            console.error(\"Form data item is undefined or null at index \" + i);\r",
									"        }\r",
									"    }\r",
									"} else {\r",
									"    console.error(\"Form data is undefined or does not have a count method.\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dietToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "PatientIno",
									"value": "{ \"FirstName\": \"{{Patient_FirstName}}\",\n\"LastName\": \"{{Patient_LastName}}\",\n\"ContactNumber\": \"{{Patient_ContactNumber}}\",\n\"Email\": \"{{Patient_Email}}\",\n\"Allergy\": \"{{Allergy}}\",\n\"FoodPreference\": \"{{FoodPreference}}\",\n\"CuisineCategory\":\"{{CuisineCategory}}\",\n\"DateOfBirth\": \"{{Patient_DateOfBirth}}\"\n}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseURL}}/patient",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"patient"
							]
						}
					},
					"response": [
						{
							"name": "Create Patient_Invalid DOB_Futuredate",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "PatientIno",
											"value": "{ \"FirstName\": \"Reena\",\n\"LastName\": \"Swaha\",\n\"ContactNumber\": \"9005089945\",\n\"Email\": \"Reena@gmail.com\",\n\"Allergy\": \"walnut\",\n\"FoodPreference\": \"Vegan\",\n\"CuisineCategory\":\"goan\",\n\"DateOfBirth\": \"2026-01-01\"\n}",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef4f81e-6866-4e80-b96a-b1a87c11c05d"
										}
									]
								},
								"url": {
									"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/patient",
									"protocol": "https",
									"host": [
										"dietician-july-api-hackathon-80f2590665cc",
										"herokuapp",
										"com"
									],
									"path": [
										"dietician",
										"patient"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1723041914&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=dRxJWv%2FYUsGX9GXLY3lHnPT55DYVYeTTjRyIZuaBubI%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1723041914&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=dRxJWv%2FYUsGX9GXLY3lHnPT55DYVYeTTjRyIZuaBubI%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 07 Aug 2024 14:45:13 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2024-08-07T14:45:14.759+00:00\",\n    \"status\": 400,\n    \"error\": \"Bad Request\",\n    \"path\": \"/dietician/patient\"\n}"
						}
					]
				},
				{
					"name": "Create Patient with Invalid BaseURL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(404);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has Content-Type header with value 'text/html'\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/html\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains the expected error message or title\", function () {\r",
									"    const expectedErrorMessage = \"Heroku | Application Error\";\r",
									"    pm.expect(pm.response.text()).to.include(expectedErrorMessage);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate that the 'iframe' tag is present in the response body\", function () {\r",
									"    const responseData = pm.response.text();\r",
									"    \r",
									"    pm.expect(responseData).to.include('<iframe src=\"//www.herokucdn.com/error-pages/no-such-app.html\"></iframe>');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Ensure that the 'viewport' meta tag is present in the response body\", function () {\r",
									"    const responseData = pm.response.text();\r",
									"    \r",
									"    pm.expect(responseData).to.include('<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">');\r",
									"});\r",
									"//commonTests.notFoundRequest();\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dietToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "PatientId",
									"value": "{ \"FirstName\": \"{{Patient_FirstName}}\",\n\"LastName\": \"{{Patient_LastName}}\",\n\"ContactNumber\": \"{{Patient_ContactNumber}}\",\n\"Email\": \"{{Patient_Email}}\",\n\"Allergy\": \"{{Allergy}}\",\n\"FoodPreference\": \"{{FoodPreference}}\",\n\"CuisineCategory\":\"{{CuisineCategory}}\",\n\"DateOfBirth\": \"{{Patient_DateOfBirth}}\"\n}\n",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{invalidBaseURL}}/patient",
							"host": [
								"{{invalidBaseURL}}"
							],
							"path": [
								"patient"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": [
						{
							"name": "New Request",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "PatientId",
											"value": ": { \"FirstName\": \"Sing\",\n\"LastName\": \"sing\",\n\"ContactNumber\": \"7878786778\",\n\"Email\": \"sing@gmail.com\",\n\"Allergy\": \"egg\",\n\"FoodPreference\": \"Vegetarian\",\n\"CuisineCategory\":\"lebanese\",\n\"DateOfBirth\": \"1996-02-14\"\n}\n",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef50041-b0cf-4520-834f-a4054daded29"
										}
									]
								},
								"url": {
									"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/info",
									"protocol": "https",
									"host": [
										"dietician-july-api-hackathon-80f2590665cc",
										"herokuapp",
										"com"
									],
									"path": [
										"dietician",
										"info"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722632637&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=0WfCplco7FJTq3s14Knmf%2FFN14sBI5hNZ5gjgQfHz28%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722632637&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=0WfCplco7FJTq3s14Knmf%2FFN14sBI5hNZ5gjgQfHz28%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 02 Aug 2024 21:03:57 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2024-08-02T21:03:57.979+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/dietician/info\"\n}"
						},
						{
							"name": "Create Patient with Invalid URL",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "PatientId",
											"value": ": { \"FirstName\": \"Sing\",\n\"LastName\": \"sing\",\n\"ContactNumber\": \"7878786778\",\n\"Email\": \"sing@gmail.com\",\n\"Allergy\": \"egg\",\n\"FoodPreference\": \"Vegetarian\",\n\"CuisineCategory\":\"lebanese\",\n\"DateOfBirth\": \"1996-02-14\"\n}\n",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef50041-b0cf-4520-834f-a4054daded29"
										}
									]
								},
								"url": {
									"raw": "https://dietician-july-api-hackathon--880f2590665cc.herokuapp.com/dietician",
									"protocol": "https",
									"host": [
										"dietician-july-api-hackathon--880f2590665cc",
										"herokuapp",
										"com"
									],
									"path": [
										"dietician"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "html",
							"header": [
								{
									"key": "Content-Length",
									"value": "563"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store"
								},
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "2024-08-07 14:03:00.767807484 +0000 UTC"
								},
								{
									"key": "Server",
									"value": "heroku-router"
								}
							],
							"cookie": [],
							"body": "<!DOCTYPE html>\n<html>\n    <head>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta charset=\"utf-8\">\n        <title>Heroku | Application Error</title>\n        <style media=\"screen\">\n      html,body,iframe {\n        margin: 0;\n        padding: 0;\n      }\n      html,body {\n        height: 100%;\n        overflow: hidden;\n      }\n      iframe {\n        width: 100%;\n        height: 100%;\n        border: 0;\n      }\n    </style>\n    </head>\n    <body>\n        <iframe src=\"//www.herokucdn.com/error-pages/no-such-app.html\"></iframe>\n    </body>\n</html>"
						}
					]
				},
				{
					"name": "Create Patient with Invalid contactNo unique field",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"let formData = pm.request.body.formdata;\r",
									"\r",
									"if (formData) {\r",
									"    console.log(\"FormData exists and count method is available.\");\r",
									"\r",
									"  \r",
									"    let invalidContactNumber = pm.iterationData.get(\"patient_unique_invalidcontactnumber\");\r",
									"\r",
									"    \r",
									"    console.log(\"Invalid Contact Number from CSV: \" + invalidContactNumber);\r",
									"\r",
									"    let count = formData.count();\r",
									"    console.log(\"Number of fields in formData: \" + count);\r",
									"\r",
									"    // Iterate over the form data fields\r",
									"    for (let i = 0; i < count; i++) {\r",
									"        let item = formData.get(i);\r",
									"\r",
									"        if (item) {\r",
									"            console.log(\"Item at index \" + i + \": \", item);\r",
									"\r",
									"            // contactnumber field replace \r",
									"            if (item.key === \"ContactNumber\") {\r",
									"                //invalid number is taken\r",
									"                item.value = invalidContactNumber;\r",
									"                console.log(\"pass invalidContactNumber: \" + invalidContactNumber);\r",
									"            }\r",
									"        } else {\r",
									"            console.error(\"Form data item is undefined or null at index \" + i);\r",
									"        }\r",
									"    }\r",
									"} else {\r",
									"    console.error(\"Form data is undefined or does not have a count method.\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseContent = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status code is 404\", function () {\r",
									"  pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body has timestamp, status, error, and path properties\", function () {\r",
									"  pm.expect(responseContent).to.have.property('timestamp');\r",
									"  pm.expect(responseContent).to.have.property('status');\r",
									"  pm.expect(responseContent).to.have.property('error');\r",
									"  pm.expect(responseContent).to.have.property('path');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dietToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "PatientInfo",
									"value": "{ \"FirstName\": \"{{Patient_FirstName}}\",\n\"LastName\": \"{{Patient_LastName}}\",\n\"ContactNumber\": \"{{Patient_ContactNumber}}\",\n\"Email\": \"{{Patient_Email}}\",\n\"Allergy\": \"{{Allergy}}\",\n\"FoodPreference\": \"{{FoodPreference}}\",\n\"CuisineCategory\":\"{{CuisineCategory}}\",\n\"DateOfBirth\": \"{{Patient_DateOfBirth}}\"\n}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseURL}}/patient\n",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"patient\n"
							]
						}
					},
					"response": [
						{
							"name": "ContactNo_<10digits",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "PatientInfo",
											"value": "{ \"FirstName\": \"Maria\",\n\"LastName\": \"Sinha\",\n\"ContactNumber\": \"90050899\",\n\"Email\": \"maria@gmail.com\",\n\"Allergy\": \"pecan\",\n\"FoodPreference\": \"Nonveg\",\n\"CuisineCategory\":\"awadhi\",\n\"DateOfBirth\": \"1977-02-04\"\n}",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef51a63-4b51-4b80-b890-931351970a48"
										}
									]
								},
								"url": {
									"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/patient",
									"protocol": "https",
									"host": [
										"dietician-july-api-hackathon-80f2590665cc",
										"herokuapp",
										"com"
									],
									"path": [
										"dietician",
										"patient"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722696142&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=ofL5Z%2BPxIDOt0YXdrRC2vKSIaL3W3bM52WWWFtsn0FM%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722696142&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=ofL5Z%2BPxIDOt0YXdrRC2vKSIaL3W3bM52WWWFtsn0FM%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 03 Aug 2024 14:42:22 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2024-08-03T14:42:22.670+00:00\",\n    \"status\": 400,\n    \"error\": \"Bad Request\",\n    \"path\": \"/dietician/patient\"\n}"
						},
						{
							"name": "ContactNo_specialChar",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "PatientInfo",
											"value": "{ \"FirstName\": \"Riia\",\n\"LastName\": \"Suha\",\n\"ContactNumber\": \"900508994#\",\n\"Email\": \"maria@gmail.com\",\n\"Allergy\": \"pecan\",\n\"FoodPreference\": \"Nonveg\",\n\"CuisineCategory\":\"awadhi\",\n\"DateOfBirth\": \"1977-02-04\"\n}",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef51a63-4b51-4b80-b890-931351970a48"
										}
									]
								},
								"url": {
									"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/patient",
									"protocol": "https",
									"host": [
										"dietician-july-api-hackathon-80f2590665cc",
										"herokuapp",
										"com"
									],
									"path": [
										"dietician",
										"patient"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722697556&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=Cdr19ItqFuvLfXgqrfUAbPaNn7ABn0lYsCevTgdxasE%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722697556&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=Cdr19ItqFuvLfXgqrfUAbPaNn7ABn0lYsCevTgdxasE%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 03 Aug 2024 15:05:56 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2024-08-03T15:05:56.975+00:00\",\n    \"status\": 400,\n    \"error\": \"Bad Request\",\n    \"path\": \"/dietician/patient\"\n}"
						}
					]
				},
				{
					"name": "Create patient with Missing contact No",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get the form data object\r",
									"let formData = pm.request.body.formdata;\r",
									"\r",
									"\r",
									"if (formData) {\r",
									"    console.log(\"FormData exists and count method is available.\");\r",
									"\r",
									"    \r",
									"    let count = formData.count();\r",
									"    console.log(\"Number of fields in formData: \" + count);\r",
									"\r",
									"    \r",
									"    for (let i = 0; i < count; i++) {\r",
									"        let item = formData.get(i);\r",
									"\r",
									"       \r",
									"        if (item) {\r",
									"            console.log(\"Item at index \" + i + \": \", item);\r",
									"\r",
									"            if (item.key === \"ContactNumber\") {\r",
									"                let includecontactnumber= pm.variables.get(\"Patient_contactname\") === 'true';\r",
									"                \r",
									"               \r",
									"                if (!includecontactnumber) {\r",
									"                    formData.remove(item.key); \r",
									"                }\r",
									"            }\r",
									"        } else {\r",
									"            console.error(\"Form data item is undefined or null at index \" + i);\r",
									"        }\r",
									"    }\r",
									"} else {\r",
									"    console.error(\"Form data is undefined or does not have a count method.\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status code is 400\", function () {\r",
									"  pm.response.to.have.status(400);\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body has timestamp, status, error, and path properties\", function () {\r",
									"  pm.expect(responseBody).to.have.property('timestamp');\r",
									"  pm.expect(responseBody).to.have.property('status');\r",
									"  pm.expect(responseBody).to.have.property('error');\r",
									"  pm.expect(responseBody).to.have.property('path');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dietToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "PatientInfo",
									"value": "{ \"FirstName\": \"{{Patient_FirstName}}\",\n\"LastName\": \"{{Patient_LastName}}\",\n\"ContactNumber\": \"{{Patient_ContactNumber}}\",\n\"Email\": \"{{Patient_Email}}\",\n\"Allergy\": \"{{Allergy}}\",\n\"FoodPreference\": \"{{FoodPreference}}\",\n\"CuisineCategory\":\"{{CuisineCategory}}\",\n\"DateOfBirth\": \"{{Patient_DateOfBirth}}\"\n}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseURL}}/patient",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"patient"
							]
						}
					},
					"response": [
						{
							"name": "Create patient with Missing contact No",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "PatientInfo",
											"value": "{ \"FirstName\": \"Han\",\n\"LastName\": \"mall\",\n\"ContactNumber\": \"\",\n\"Email\": \"Han@gmail.com\",\n\"Allergy\": \"walnut\",\n\"FoodPreference\": \"jain\",\n\"CuisineCategory\":\"iAndhra\",\n\"DateOfBirth\": \"1989-02-20\"\n}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseURL}}/patient",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"patient"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1723059901&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=pd34ot%2BgS6j%2FEjWHnZAdNmWq3j6wHEJYfbkRtXoUYpY%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1723059901&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=pd34ot%2BgS6j%2FEjWHnZAdNmWq3j6wHEJYfbkRtXoUYpY%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 07 Aug 2024 19:45:01 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2024-08-07T19:45:01.045+00:00\",\n    \"status\": 400,\n    \"error\": \"Bad Request\",\n    \"path\": \"/dietician/patient\"\n}"
						}
					]
				},
				{
					"name": "Create patient with Missing LastName",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get the form data object\r",
									"let formData = pm.request.body.formdata;\r",
									"\r",
									"\r",
									"if (formData) {\r",
									"    console.log(\"FormData exists and count method is available.\");\r",
									"\r",
									"    \r",
									"    let count = formData.count();\r",
									"    console.log(\"Number of fields in formData: \" + count);\r",
									"\r",
									"    \r",
									"    for (let i = 0; i < count; i++) {\r",
									"        let item = formData.get(i);\r",
									"\r",
									"       \r",
									"        if (item) {\r",
									"            console.log(\"Item at index \" + i + \": \", item);\r",
									"\r",
									"            if (item.key === \"LastName\") {\r",
									"                let includeLastname = pm.variables.get(\"Patient_lastname\") === 'true';\r",
									"                \r",
									"               \r",
									"                if (!includeLastname) {\r",
									"                    formData.remove(item.key); \r",
									"                }\r",
									"            }\r",
									"        } else {\r",
									"            console.error(\"Form data item is undefined or null at index \" + i);\r",
									"        }\r",
									"    }\r",
									"} else {\r",
									"    console.error(\"Form data is undefined or does not have a count method.\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status code is 400\", function () {\r",
									"  pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response has valid JSON body\", function () {\r",
									"  pm.expect(responseJSON).to.be.an('object');\r",
									"  pm.expect(responseJSON).to.have.property('timestamp');\r",
									"  pm.expect(responseJSON).to.have.property('status');\r",
									"  pm.expect(responseJSON).to.have.property('error');\r",
									"  pm.expect(responseJSON).to.have.property('path');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dietToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "PatientInfo",
									"value": "{ \"FirstName\": \"{{Patient_FirstName}}\",\n\"LastName\": \"{{Patient_LastName}}\",\n\"ContactNumber\": \"{{Patient_ContactNumber}}\",\n\"Email\": \"{{Patient_Email}}\",\n\"Allergy\": \"{{Allergy}}\",\n\"FoodPreference\": \"{{FoodPreference}}\",\n\"CuisineCategory\":\"{{CuisineCategory}}\",\n\"DateOfBirth\": \"{{Patient_DateOfBirth}}\"\n}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseURL}}/patient",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"patient"
							]
						}
					},
					"response": [
						{
							"name": "Create Patient with Invalid request Copy",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "file",
									"file": {}
								},
								"url": {
									"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/patient",
									"protocol": "https",
									"host": [
										"dietician-july-api-hackathon-80f2590665cc",
										"herokuapp",
										"com"
									],
									"path": [
										"dietician",
										"patient"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722811776&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=OB7B5HRGcW07NtViHtpKgyE7XlApe20uPofTcs3ScqA%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722811776&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=OB7B5HRGcW07NtViHtpKgyE7XlApe20uPofTcs3ScqA%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sun, 04 Aug 2024 22:49:36 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2024-08-04T22:49:36.926+00:00\",\n    \"status\": 400,\n    \"error\": \"Bad Request\",\n    \"path\": \"/dietician/patient\"\n}"
						}
					]
				},
				{
					"name": "Create Patient with Missing CuisineCategory",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get the form data object\r",
									"let formData = pm.request.body.formdata;\r",
									"\r",
									"\r",
									"if (formData) {\r",
									"    console.log(\"FormData exists and count method is available.\");\r",
									"\r",
									"    \r",
									"    let count = formData.count();\r",
									"    console.log(\"Number of fields in formData: \" + count);\r",
									"\r",
									"    \r",
									"    for (let i = 0; i < count; i++) {\r",
									"        let item = formData.get(i);\r",
									"\r",
									"       \r",
									"        if (item) {\r",
									"            console.log(\"Item at index \" + i + \": \", item);\r",
									"\r",
									"            if (item.key === \"CuisineCategory\") {\r",
									"                let includeCuisinecategory = pm.variables.get(\"Patient_cuisinecategory\") === 'true';\r",
									"                \r",
									"               \r",
									"                if (!includeCuisinecategory) {\r",
									"                    formData.remove(item.key); \r",
									"                }\r",
									"            }\r",
									"        } else {\r",
									"            console.error(\"Form data item is undefined or null at index \" + i);\r",
									"        }\r",
									"    }\r",
									"} else {\r",
									"    console.error(\"Form data is undefined or does not have a count method.\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status code is 400\", function () {\r",
									"  pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response has valid JSON body\", function () {\r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData).to.have.property('timestamp');\r",
									"  pm.expect(responseData).to.have.property('status');\r",
									"  pm.expect(responseData).to.have.property('error');\r",
									"  pm.expect(responseData).to.have.property('path');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dietToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "PatientInfo",
									"value": "{ \"FirstName\": \"{{Patient_FirstName}}\",\n\"LastName\": \"{{Patient_LastName}}\",\n\"ContactNumber\": \"{{Patient_ContactNumber}}\",\n\"Email\": \"{{Patient_Email}}\",\n\"Allergy\": \"{{Allergy}}\",\n\"FoodPreference\": \"{{FoodPreference}}\",\n\"CuisineCategory\":\"{{CuisineCategory}}\",\n\"DateOfBirth\": \"{{Patient_DateOfBirth}}\"\n}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseURL}}/patient",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"patient"
							]
						}
					},
					"response": [
						{
							"name": "Missing CuisineCategory",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "PatientInfo",
											"value": "{ \"FirstName\": \"Sony\",\n\"LastName\": \"Sony\",\n\"ContactNumber\": \"9005089943\",\n\"Email\": \"Sony@gmail.com\",\n\"Allergy\": \"pecan\",\n\"FoodPreference\": \"Nonveg\",\n\"CuisineCategory\":\"\",\n\"DateOfBirth\": \"1977-02-04\"\n}",
											"type": "text"
										},
										{
											"key": "File",
											"type": "file",
											"src": "postman-cloud:///1ef50041-b0cf-4520-834f-a4054daded29"
										}
									]
								},
								"url": {
									"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/patient",
									"protocol": "https",
									"host": [
										"dietician-july-api-hackathon-80f2590665cc",
										"herokuapp",
										"com"
									],
									"path": [
										"dietician",
										"patient"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722700373&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=2e9rfCi5OiUxg4ojh9w8b3NnNJYz6X9NrgSQfIVOFTo%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722700373&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=2e9rfCi5OiUxg4ojh9w8b3NnNJYz6X9NrgSQfIVOFTo%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 03 Aug 2024 15:52:53 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2024-08-03T15:52:53.395+00:00\",\n    \"status\": 400,\n    \"error\": \"Bad Request\",\n    \"path\": \"/dietician/patient\"\n}"
						}
					]
				},
				{
					"name": "Create patient with Missing Email",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get the form data object\r",
									"let formData = pm.request.body.formdata;\r",
									"\r",
									"\r",
									"if (formData) {\r",
									"    console.log(\"FormData exists and count method is available.\");\r",
									"\r",
									"    \r",
									"    let count = formData.count();\r",
									"    console.log(\"Number of fields in formData: \" + count);\r",
									"\r",
									"    \r",
									"    for (let i = 0; i < count; i++) {\r",
									"        let item = formData.get(i);\r",
									"\r",
									"       \r",
									"        if (item) {\r",
									"            console.log(\"Item at index \" + i + \": \", item);\r",
									"\r",
									"            if (item.key === \"Email\") {\r",
									"                let includeEmail = pm.variables.get(\"Patient_Email\") === 'true';\r",
									"                \r",
									"               \r",
									"                if (!includeEmail) {\r",
									"                    formData.remove(item.key); \r",
									"                }\r",
									"            }\r",
									"        } else {\r",
									"            console.error(\"Form data item is undefined or null at index \" + i);\r",
									"        }\r",
									"    }\r",
									"} else {\r",
									"    console.error(\"Form data is undefined or does not have a count method.\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status code is 400\", function () {\r",
									"  pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dietToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "PatientInfo",
									"value": "{ \"FirstName\": \"{{Patient_FirstName}}\",\n\"LastName\": \"{{Patient_LastName}}\",\n\"ContactNumber\": \"{{Patient_ContactNumber}}\",\n\"Email\": \"{{Patient_Email}}\",\n\"Allergy\": \"{{Allergy}}\",\n\"FoodPreference\": \"{{FoodPreference}}\",\n\"CuisineCategory\":\"{{CuisineCategory}}\",\n\"DateOfBirth\": \"{{Patient_DateOfBirth}}\"\n}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseURL}}/patient",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"patient"
							]
						}
					},
					"response": [
						{
							"name": "Create Patient with Invalid request Copy",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "file",
									"file": {}
								},
								"url": {
									"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/patient",
									"protocol": "https",
									"host": [
										"dietician-july-api-hackathon-80f2590665cc",
										"herokuapp",
										"com"
									],
									"path": [
										"dietician",
										"patient"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722811776&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=OB7B5HRGcW07NtViHtpKgyE7XlApe20uPofTcs3ScqA%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722811776&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=OB7B5HRGcW07NtViHtpKgyE7XlApe20uPofTcs3ScqA%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sun, 04 Aug 2024 22:49:36 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2024-08-04T22:49:36.926+00:00\",\n    \"status\": 400,\n    \"error\": \"Bad Request\",\n    \"path\": \"/dietician/patient\"\n}"
						}
					]
				},
				{
					"name": "Create patient with Invalid Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status code is 400\", function () {\r",
									"  pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Check error message\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const errorMessage = jsonData.errorMessage;\r",
									"    pm.expect(jsonData.errorMessage).to.exist;\r",
									"    pm.expect(jsonData.errorMessage).to.equal(\"email : Invalid Email Id\\n Email should start with a letter  \\n \");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"\r",
									"\r",
									"let formData = pm.request.body.formdata;\r",
									"\r",
									"if (formData) {\r",
									"    console.log(\"FormData exists and count method is available.\");\r",
									"\r",
									"    // Dob future from csv file\r",
									"    let invalidemail = pm.iterationData.get(\"patient_invalidemail\");\r",
									"\r",
									"    \r",
									"    console.log(\"Future Date of Birth from CSV: \" + futureDateOfBirth);\r",
									"\r",
									"    let count = formData.count();\r",
									"    console.log(\"Number of fields in formData: \" + count);\r",
									"\r",
									"    //  form data fields iteration\r",
									"    for (let i = 0; i < count; i++) {\r",
									"        let item = formData.get(i);\r",
									"\r",
									"        if (item) {\r",
									"            console.log(\"Item at index \" + i + \": \", item);\r",
									"\r",
									"            \r",
									"            if (item.key === \"Email\") {\r",
									"                // replaced the future date value\r",
									"                item.value = futureDateOfBirth;\r",
									"                console.log(\"replacedemail: \" + invalidemail);\r",
									"            }\r",
									"        } else {\r",
									"            console.error(\"Form data item is undefined or null at index \" + i);\r",
									"        }\r",
									"    }\r",
									"} else {\r",
									"    console.error(\"Form data is undefined or does not have a count method.\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dietToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo",
									"value": "{ \"FirstName\": \"{{Patient_FirstName}}\",\n\"LastName\": \"{{Patient_LastName}}\",\n\"ContactNumber\": \"{{Patient_ContactNumber}}\",\n\"Email\": \"{{Patient_Email}}\",\n\"Allergy\": \"{{Allergy}}\",\n\"FoodPreference\": \"{{FoodPreference}}\",\n\"CuisineCategory\":\"{{CuisineCategory}}\",\n\"DateOfBirth\": \"{{Patient_DateOfBirth}}\"\n}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseURL}}/patient",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"patient"
							]
						}
					},
					"response": [
						{
							"name": "Create Patient with Invalid request Copy",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "file",
									"file": {}
								},
								"url": {
									"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/patient",
									"protocol": "https",
									"host": [
										"dietician-july-api-hackathon-80f2590665cc",
										"herokuapp",
										"com"
									],
									"path": [
										"dietician",
										"patient"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722811776&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=OB7B5HRGcW07NtViHtpKgyE7XlApe20uPofTcs3ScqA%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722811776&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=OB7B5HRGcW07NtViHtpKgyE7XlApe20uPofTcs3ScqA%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sun, 04 Aug 2024 22:49:36 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"timestamp\": \"2024-08-04T22:49:36.926+00:00\",\n    \"status\": 400,\n    \"error\": \"Bad Request\",\n    \"path\": \"/dietician/patient\"\n}"
						}
					]
				},
				{
					"name": "Create patient with Missing DOB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseData = pm.response.text();\r",
									"\r",
									"pm.test(\"Response status code is 400\", function () {\r",
									"  pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Error message for input\", () => {\r",
									"    pm.expect(responseData).to.eql(\"Date Should be in format yyyy-MM-dd\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get the form data object\r",
									"let formData = pm.request.body.formdata;\r",
									"\r",
									"\r",
									"if (formData) {\r",
									"    console.log(\"FormData exists and count method is available.\");\r",
									"\r",
									"    \r",
									"    let count = formData.count();\r",
									"    console.log(\"Number of fields in formData: \" + count);\r",
									"\r",
									"    \r",
									"    for (let i = 0; i < count; i++) {\r",
									"        let item = formData.get(i);\r",
									"\r",
									"       \r",
									"        if (item) {\r",
									"            console.log(\"Item at index \" + i + \": \", item);\r",
									"\r",
									"            if (item.key === \"DateOfBirth\") {\r",
									"                let includeDOB = pm.variables.get(\"Patient_DOBempty\") === 'true';\r",
									"                \r",
									"               \r",
									"                if (!includeDOB) {\r",
									"                    formData.remove(item.key); \r",
									"                }\r",
									"            }\r",
									"        } else {\r",
									"            console.error(\"Form data item is undefined or null at index \" + i);\r",
									"        }\r",
									"    }\r",
									"} else {\r",
									"    console.error(\"Form data is undefined or does not have a count method.\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dietToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo",
									"value": "{ \"FirstName\": \"{{Patient_FirstName}}\",\n\"LastName\": \"{{Patient_LastName}}\",\n\"ContactNumber\": \"{{Patient_ContactNumber}}\",\n\"Email\": \"{{Patient_Email}}\",\n\"Allergy\": \"{{Allergy}}\",\n\"FoodPreference\": \"{{FoodPreference}}\",\n\"CuisineCategory\":\"{{CuisineCategory}}\",\n\"DateOfBirth\": \"{{Patient_DateOfBirth}}\"\n}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseURL}}/patient",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"patient"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Patient",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Renamed the 'jsonBody' variable to 'responseBody' \r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Check Status Text\",()=>{\r",
									"    pm.response.to.have.status('Created');\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type Header is present\",()=>{\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type Header is application/json\",()=>{\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\",()=>{\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"let responsebody=pm.response.json();\r",
									"pm.test(\"Get Patients data type of response\",()=>{\r",
									"    pm.expect(responsebody.patientId).to.be.a(\"number\");\r",
									"    pm.expect(responsebody.FirstName).to.be.a(\"string\");\r",
									"    pm.expect(responsebody.LastName).to.be.a(\"string\");\r",
									"    pm.expect(responsebody.ContactNumber).to.be.a(\"string\");\r",
									"    pm.expect(responsebody.Email).to.be.a(\"string\");\r",
									"    pm.expect(responsebody.Allergy).to.be.a(\"string\");\r",
									"    pm.expect(responsebody.FoodPreference).to.be.a(\"string\");\r",
									"    pm.expect(responsebody.CuisineCategory).to.be.a(\"string\");\r",
									"    pm.expect(responsebody.DateOfBirth).to.be.a(\"string\");\r",
									"    pm.expect(responsebody.DieticianId).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify the values are not null\", function () {\r",
									"    pm.expect(responsebody.FirstName).to.not.null;\r",
									"    pm.expect(responsebody.LastName).to.not.null;\r",
									"    pm.expect(responsebody.ContactNumber).to.not.null;\r",
									"    pm.expect(responsebody.Email).to.not.null;\r",
									"    pm.expect(responsebody.DateOfBirth).to.not.null;\r",
									"    pm.expect(responsebody.Allergy).to.not.null;\r",
									"    pm.expect(responsebody.CuisineCategory).to.not.null;\r",
									"});\r",
									"pm.environment.set(\"patientEmail\", responsebody.Email);\r",
									"\r",
									"pm.environment.set(\"patientId\", responsebody.patientId);\r",
									"\r",
									"const fileID = Object.keys(responsebody.FileMorbidity)[0];\r",
									"pm.environment.set(\"fileId\", fileID);\r",
									"\r",
									"var schema={\r",
									"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"patientId\": {\r",
									"            \"type\": \"integer\"\r",
									"        },\r",
									"        \"FirstName\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"LastName\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"ContactNumber\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"Email\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"Allergy\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"FoodPreference\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"CuisineCategory\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"FileMorbidity\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"66ad69134717cf471aaad177\": {\r",
									"                    \"type\": \"object\",\r",
									"                    \"properties\": {\r",
									"                        \"HbA1c\": {\r",
									"                            \"type\": \"string\"\r",
									"                        },\r",
									"                        \"Average Glucose\": {\r",
									"                            \"type\": \"string\"\r",
									"                        }\r",
									"                    },\r",
									"                    \"required\": [\r",
									"                        \"HbA1c\",\r",
									"                        \"Average Glucose\"\r",
									"                    ]\r",
									"                },\r",
									"                \"66ad66be4717cf471aaad16f\": {\r",
									"                    \"type\": \"object\",\r",
									"                    \"properties\": {\r",
									"                        \"HbA1c\": {\r",
									"                            \"type\": \"string\"\r",
									"                        },\r",
									"                        \"Average Glucose\": {\r",
									"                            \"type\": \"string\"\r",
									"                        }\r",
									"                    },\r",
									"                    \"required\": [\r",
									"                        \"HbA1c\",\r",
									"                        \"Average Glucose\"\r",
									"                    ]\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"66ad69134717cf471aaad177\",\r",
									"                \"66ad66be4717cf471aaad16f\"\r",
									"            ]\r",
									"        },\r",
									"        \"FileMorbidityCondition\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"66ad69134717cf471aaad177\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"66ad66be4717cf471aaad16f\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"66ad69134717cf471aaad177\",\r",
									"                \"66ad66be4717cf471aaad16f\"\r",
									"            ]\r",
									"        },\r",
									"        \"DateOfBirth\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"DieticianId\": {\r",
									"            \"type\": \"integer\"\r",
									"        },\r",
									"        \"Vitals\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"66ad69134717cf471aaad177\": {\r",
									"                    \"type\": \"object\",\r",
									"                    \"properties\": {\r",
									"                        \"Weight\": {\r",
									"                            \"type\": \"number\"\r",
									"                        },\r",
									"                        \"Height\": {\r",
									"                            \"type\": \"number\"\r",
									"                        },\r",
									"                        \"Temperature\": {\r",
									"                            \"type\": \"number\"\r",
									"                        },\r",
									"                        \"SP\": {\r",
									"                            \"type\": \"integer\"\r",
									"                        },\r",
									"                        \"DP\": {\r",
									"                            \"type\": \"integer\"\r",
									"                        }\r",
									"                    },\r",
									"                    \"required\": [\r",
									"                        \"Weight\",\r",
									"                        \"Height\",\r",
									"                        \"Temperature\",\r",
									"                        \"SP\",\r",
									"                        \"DP\"\r",
									"                    ]\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"66ad69134717cf471aaad177\"\r",
									"            ]\r",
									"        },\r",
									"        \"LastVisitDate\": {\r",
									"            \"type\": \"string\"\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"patientId\",\r",
									"        \"FirstName\",\r",
									"        \"LastName\",\r",
									"        \"ContactNumber\",\r",
									"        \"Email\",\r",
									"        \"Allergy\",\r",
									"        \"FoodPreference\",\r",
									"        \"CuisineCategory\",\r",
									"        \"FileMorbidity\",\r",
									"        \"FileMorbidityCondition\",\r",
									"        \"DateOfBirth\",\r",
									"        \"DieticianId\",\r",
									"        \"Vitals\",\r",
									"        \"LastVisitDate\"\r",
									"    ]\r",
									"}\r",
									"\r",
									"pm.test('Schema is valid', () =>{\r",
									"    pm.expect(responsebody).to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dieticianToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo",
									"value": "{ \"FirstName\": \"{{Patient_FirstName}}\",\n\"LastName\": \"{{Patient_LastName}}\",\n\"ContactNumber\": \"{{Patient_ContactNumber}}\",\n\"Email\": \"{{Patient_Email}}\",\n\"Allergy\": \"{{Allergy}}\",\n\"FoodPreference\": \"{{FoodPreference}}\",\n\"CuisineCategory\":\"{{CuisineCategory}}\",\n\"DateOfBirth\": \"{{Patient_DateOfBirth}}\"\n}",
									"type": "text"
								},
								{
									"key": "file",
									"type": "file",
									"src": "{{Patient_file1}}"
								}
							]
						},
						"url": {
							"raw": "{{baseURL}}/patient",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"patient"
							]
						}
					},
					"response": [
						{
							"name": "New Request L",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"malli\",\n\"LastName\": \"malli\",\n\"ContactNumber\": \"9867345983\",\n\"Email\": \"smartdiet@gmail.com\",\n\"Allergy\": \"soy\",\n\"FoodPreference\": \"jain\",\n\"CuisineCategory\":\"indian\",\n\"DateOfBirth\": \"1986-02-14\"\n}",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef4f81e-6866-4e80-b96a-b1a87c11c05d"
										}
									]
								},
								"url": {
									"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/patient",
									"protocol": "https",
									"host": [
										"dietician-july-api-hackathon-80f2590665cc",
										"herokuapp",
										"com"
									],
									"path": [
										"dietician",
										"patient"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722460648&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=7lDaY9ld6NskRFkFKPQXQoWPgxqbgHVpV4uFMUWegdY%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722460648&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=7lDaY9ld6NskRFkFKPQXQoWPgxqbgHVpV4uFMUWegdY%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Wed, 31 Jul 2024 21:17:29 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"patientId\": 33,\n    \"FirstName\": \"malli\",\n    \"LastName\": \"malli\",\n    \"ContactNumber\": \"9867345983\",\n    \"Email\": \"smartdiet@gmail.com\",\n    \"Allergy\": \"soy\",\n    \"FoodPreference\": \"jain\",\n    \"CuisineCategory\": \"indian\",\n    \"FileMorbidity\": {\n        \"66aaa9e9e6f5802145ab051c\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        }\n    },\n    \"FileMorbidityCondition\": {\n        \"66aaa9e9e6f5802145ab051c\": \"Prediabetic \\nBlood Pressure: Hypotension \\n\"\n    },\n    \"DateOfBirth\": \"1986-02-14\",\n    \"DieticianId\": 221,\n    \"Vitals\": {\n        \"66aaa9e9e6f5802145ab051c\": {\n            \"Weight\": 0,\n            \"Height\": 0,\n            \"Temperature\": 0,\n            \"SP\": 0,\n            \"DP\": 0\n        }\n    },\n    \"LastVisitDate\": \"2024-07-31T21:17:29.088+00:00\"\n}"
						},
						{
							"name": "Create Patient",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"mall\",\n\"LastName\": \"mall\",\n\"ContactNumber\": \"9968345983\",\n\"Email\": \"smart@gmail.com\",\n\"Allergy\": \"soy\",\n\"FoodPreference\": \"jain\",\n\"CuisineCategory\":\"indian\",\n\"DateOfBirth\": \"1986-02-24\"\n}",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "{{Patient_file1}}"
										}
									]
								},
								"url": {
									"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/patient",
									"protocol": "https",
									"host": [
										"dietician-july-api-hackathon-80f2590665cc",
										"herokuapp",
										"com"
									],
									"path": [
										"dietician",
										"patient"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722612549&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=tc3vfZY%2FW9ZO0V4eF0eTYI1CIyOWjq1%2BrZ9ilkaqm3o%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722612549&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=tc3vfZY%2FW9ZO0V4eF0eTYI1CIyOWjq1%2BrZ9ilkaqm3o%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 02 Aug 2024 15:29:09 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"patientId\": 348,\n    \"FirstName\": \"mall\",\n    \"LastName\": \"mall\",\n    \"ContactNumber\": \"9968345983\",\n    \"Email\": \"smart@gmail.com\",\n    \"Allergy\": \"soy\",\n    \"FoodPreference\": \"jain\",\n    \"CuisineCategory\": \"indian\",\n    \"FileMorbidity\": {\n        \"66acfb454717cf471aaad07c\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        }\n    },\n    \"FileMorbidityCondition\": {\n        \"66acfb454717cf471aaad07c\": \"Prediabetic \\nBlood Pressure: Hypotension \\n\"\n    },\n    \"DateOfBirth\": \"1986-02-24\",\n    \"DieticianId\": 221,\n    \"Vitals\": {\n        \"66acfb454717cf471aaad07c\": {\n            \"Weight\": 0,\n            \"Height\": 0,\n            \"Temperature\": 0,\n            \"SP\": 0,\n            \"DP\": 0\n        }\n    },\n    \"LastVisitDate\": \"2024-08-02T15:29:09.780+00:00\"\n}"
						}
					]
				},
				{
					"name": "update patient by Id update only firstname Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check if patientId exist in JSON response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('patientId');\r",
									"    pm.expect(jsonData.patientId).to.equal(pm.environment.get(\"patientId\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Check if FirstName exist in JSON response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"   pm.expect(jsonData).to.have.property('FirstName');\r",
									"    pm.expect(jsonData.FirstName).to.equal(pm.iterationData.get(\"patient_update_firstName\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Check if LastName exist in JSON response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('LastName');\r",
									"    pm.expect(jsonData.LastName).to.equal(pm.iterationData.get(\"Patient_LastName\"));\r",
									"});\r",
									"pm.test(\"Check if contactNumber exist in JSON response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('ContactNumber');\r",
									"    pm.expect(jsonData.ContactNumber).to.equal(pm.iterationData.get(\"Patient_ContactNumber\")).toString();\r",
									"});\r",
									"pm.test(\"Check if Email exist in JSON response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('Email');\r",
									"    pm.expect(jsonData.Email).to.equal(pm.iterationData.get(\"Patient_Email\"));\r",
									"});\r",
									"pm.test(\"Check if Allergy exist in JSON response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('Allergy');\r",
									"    pm.expect(jsonData.Allergy).to.equal(pm.iterationData.get(\"Patient_Allergy\"));\r",
									"});\r",
									"pm.test(\"Check if FoodPreference exist in JSON response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('FoodPreference');\r",
									"    pm.expect(jsonData.FoodPreference).to.equal(pm.iterationData.get(\"Patient_FoodPreference\"));\r",
									"});\r",
									"pm.test(\"Check if CuisineCategory exist in JSON response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('CuisineCategory');\r",
									"    pm.expect(jsonData.CuisineCategory).to.equal(pm.iterationData.get(\"Patient_CuisineCategory\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Check if CuisineCategory exist in JSON response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('DateOfBirth');\r",
									"    pm.expect(jsonData.DateOfBirth).to.equal(pm.iterationData.get(\"Patient_DateOfBirth\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dieticianToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo",
									"value": "{ \"FirstName\": \"{{patient_update_firstName}}\",\n\"LastName\": \"{{Patient_LastName}}\",\n\"ContactNumber\": \"{{Patient_ContactNumber}}\",\n\"Email\": \"{{Patient_Email}}\",\n\"Allergy\":\"{{Patient_Allergy}}\",\n\"FoodPreference\": \"{{Patient_FoodPreference}}\",\n\"CuisineCategory\":\"{{Patient_CuisineCategory}}\",\n\"DateOfBirth\": \"{{Patient_DateOfBirth}}\"}",
									"type": "text"
								},
								{
									"key": "file",
									"type": "file",
									"src": "{{patient_update_file}}"
								},
								{
									"key": "PtInfo",
									"value": " { \"FirstName\": \"Ram\",\n\"LastName\": \"Setu\",\n\"ContactNumber\": \"9009089789\",\n\"Email\": \"ram@gmail.com\",\n\"Allergy\": \"Peanuts\",\n\"FoodPreference\": \"NonVeg\",\n\"CuisineCategory\":\"sindhi\",\n\"DateOfBirth\": \"1987-02-14\"\n}\n",
									"type": "text",
									"disabled": true
								},
								{
									"key": "file",
									"type": "file",
									"src": [],
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{baseURL}}/patient/{{patientId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"patient",
								"{{patientId}}"
							]
						}
					},
					"response": [
						{
							"name": "Create Patient 2 Copy",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"malli\",\n\"LastName\": \"malli\",\n\"ContactNumber\": \"9867345989\",\n\"Email\": \"smartdiet1@gmail.com\",\n\"Allergy\": \"ALMOND\",\n\"FoodPreference\": \"Jain\",\n\"CuisineCategory\":\"rajasthani\",\n\"DateOfBirth\": \"1987-03-14\"\n}",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef4f81e-6866-4e80-b96a-b1a87c11c05d"
										},
										{
											"key": "PtInfo",
											"value": " { \"FirstName\": \"Ram\",\n\"LastName\": \"Setu\",\n\"ContactNumber\": \"9009089789\",\n\"Email\": \"ram@gmail.com\",\n\"Allergy\": \"Peanuts\",\n\"FoodPreference\": \"NonVeg\",\n\"CuisineCategory\":\"sindhi\",\n\"DateOfBirth\": \"1987-02-14\"\n}\n",
											"type": "text",
											"disabled": true
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef50041-b0cf-4520-834f-a4054daded29",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/patient/33\n",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"patient",
										"33\n"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722629047&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=8RqX%2BqL%2FJeVJs2s0urHTHFh9ACsKsy25ugRJpKoNrGQ%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722629047&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=8RqX%2BqL%2FJeVJs2s0urHTHFh9ACsKsy25ugRJpKoNrGQ%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 02 Aug 2024 20:04:08 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"patientId\": 33,\n    \"FirstName\": \"malli\",\n    \"LastName\": \"malli\",\n    \"ContactNumber\": \"9867345989\",\n    \"Email\": \"smartdiet1@gmail.com\",\n    \"Allergy\": \"ALMOND\",\n    \"FoodPreference\": \"Jain\",\n    \"CuisineCategory\": \"rajasthani\",\n    \"FileMorbidity\": {\n        \"66aaa9e9e6f5802145ab051c\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2d234717cf471aaad0b7\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad35584717cf471aaad0bd\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad39404717cf471aaad0cb\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2a684717cf471aaad0b1\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2fce4717cf471aaad0bb\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad37b74717cf471aaad0c3\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad3bb84717cf471aaad0cf\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad36ce4717cf471aaad0bf\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        }\n    },\n    \"FileMorbidityCondition\": {\n        \"66aaa9e9e6f5802145ab051c\": \"Prediabetic \\nBlood Pressure: Hypotension \\n\",\n        \"66ad2d234717cf471aaad0b7\": \"Prediabetic \\n\",\n        \"66ad35584717cf471aaad0bd\": \"Prediabetic \\n\",\n        \"66ad39404717cf471aaad0cb\": \"Prediabetic \\n\",\n        \"66ad2a684717cf471aaad0b1\": \"Prediabetic \\n\",\n        \"66ad2fce4717cf471aaad0bb\": \"Prediabetic \\n\",\n        \"66ad37b74717cf471aaad0c3\": \"Prediabetic \\n\",\n        \"66ad3bb84717cf471aaad0cf\": \"Prediabetic \\n\",\n        \"66ad36ce4717cf471aaad0bf\": \"Prediabetic \\n\"\n    },\n    \"DateOfBirth\": \"1987-03-14\",\n    \"DieticianId\": 221,\n    \"Vitals\": {\n        \"66aaa9e9e6f5802145ab051c\": {\n            \"Weight\": 0,\n            \"Height\": 0,\n            \"Temperature\": 0,\n            \"SP\": 0,\n            \"DP\": 0\n        }\n    },\n    \"LastVisitDate\": \"2024-07-31T21:17:29.088+00:00\"\n}"
						}
					]
				},
				{
					"name": "update patient by Id update only last name Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Check if patientId exist in JSON response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('patientId');\r",
									"    pm.expect(jsonData.patientId).to.equal(pm.environment.get(\"patientId\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Check if FirstName exist in JSON response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"   pm.expect(jsonData).to.have.property('FirstName');\r",
									"    pm.expect(jsonData.FirstName).to.equal(pm.iterationData.get(\"Patient_FirstName\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Check if LastName exist in JSON response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('LastName');\r",
									"    pm.expect(jsonData.LastName).to.equal(pm.iterationData.get(\"patient_update_lastName\"));\r",
									"});\r",
									"pm.test(\"Check if contactNumber exist in JSON response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('ContactNumber');\r",
									"   pm.expect(jsonData.ContactNumber).to.equal(pm.iterationData.get(\"Patient_ContactNumber\")).toString();\r",
									"});\r",
									"pm.test(\"Check if Email exist in JSON response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('Email');\r",
									"    pm.expect(jsonData.Email).to.equal(pm.iterationData.get(\"Patient_Email\"));\r",
									"});\r",
									"pm.test(\"Check if Allergy exist in JSON response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('Allergy');\r",
									"    pm.expect(jsonData.Allergy).to.equal(pm.iterationData.get(\"Patient_Allergy\"));\r",
									"});\r",
									"pm.test(\"Check if FoodPreference exist in JSON response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('FoodPreference');\r",
									"    pm.expect(jsonData.FoodPreference).to.equal(pm.iterationData.get(\"Patient_FoodPreference\"));\r",
									"});\r",
									"pm.test(\"Check if CuisineCategory exist in JSON response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('CuisineCategory');\r",
									"    pm.expect(jsonData.CuisineCategory).to.equal(pm.iterationData.get(\"Patient_CuisineCategory\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Check if CuisineCategory exist in JSON response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('DateOfBirth');\r",
									"    pm.expect(jsonData.DateOfBirth).to.equal(pm.iterationData.get(\"Patient_DateOfBirth\"));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dieticianToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo",
									"value": "{ \"FirstName\": \"{{Patient_FirstName}}\",\n\"LastName\": \"{{patient_update_lastName}}\",\n\"ContactNumber\": \"{{Patient_ContactNumber}}\",\n\"Email\": \"{{Patient_Email}}\",\n\"Allergy\":\"{{Patient_Allergy}}\",\n\"FoodPreference\": \"{{Patient_FoodPreference}}\",\n\"CuisineCategory\":\"{{Patient_CuisineCategory}}\",\n\"DateOfBirth\": \"{{Patient_DateOfBirth}}\"}",
									"type": "text"
								},
								{
									"key": "file",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "PtInfo",
									"value": " { \"FirstName\": \"Ram\",\n\"LastName\": \"Setu\",\n\"ContactNumber\": \"9009089789\",\n\"Email\": \"ram@gmail.com\",\n\"Allergy\": \"Peanuts\",\n\"FoodPreference\": \"NonVeg\",\n\"CuisineCategory\":\"sindhi\",\n\"DateOfBirth\": \"1987-02-14\"\n}\n",
									"type": "text",
									"disabled": true
								},
								{
									"key": "file",
									"type": "file",
									"src": [],
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{baseURL}}/patient/{{patientId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"patient",
								"{{patientId}}"
							]
						}
					},
					"response": [
						{
							"name": "Create Patient 2 Copy",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"malli\",\n\"LastName\": \"malli\",\n\"ContactNumber\": \"9867345989\",\n\"Email\": \"smartdiet1@gmail.com\",\n\"Allergy\": \"ALMOND\",\n\"FoodPreference\": \"Jain\",\n\"CuisineCategory\":\"rajasthani\",\n\"DateOfBirth\": \"1987-03-14\"\n}",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef4f81e-6866-4e80-b96a-b1a87c11c05d"
										},
										{
											"key": "PtInfo",
											"value": " { \"FirstName\": \"Ram\",\n\"LastName\": \"Setu\",\n\"ContactNumber\": \"9009089789\",\n\"Email\": \"ram@gmail.com\",\n\"Allergy\": \"Peanuts\",\n\"FoodPreference\": \"NonVeg\",\n\"CuisineCategory\":\"sindhi\",\n\"DateOfBirth\": \"1987-02-14\"\n}\n",
											"type": "text",
											"disabled": true
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef50041-b0cf-4520-834f-a4054daded29",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/patient/33\n",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"patient",
										"33\n"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722629047&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=8RqX%2BqL%2FJeVJs2s0urHTHFh9ACsKsy25ugRJpKoNrGQ%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722629047&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=8RqX%2BqL%2FJeVJs2s0urHTHFh9ACsKsy25ugRJpKoNrGQ%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 02 Aug 2024 20:04:08 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"patientId\": 33,\n    \"FirstName\": \"malli\",\n    \"LastName\": \"malli\",\n    \"ContactNumber\": \"9867345989\",\n    \"Email\": \"smartdiet1@gmail.com\",\n    \"Allergy\": \"ALMOND\",\n    \"FoodPreference\": \"Jain\",\n    \"CuisineCategory\": \"rajasthani\",\n    \"FileMorbidity\": {\n        \"66aaa9e9e6f5802145ab051c\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2d234717cf471aaad0b7\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad35584717cf471aaad0bd\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad39404717cf471aaad0cb\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2a684717cf471aaad0b1\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2fce4717cf471aaad0bb\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad37b74717cf471aaad0c3\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad3bb84717cf471aaad0cf\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad36ce4717cf471aaad0bf\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        }\n    },\n    \"FileMorbidityCondition\": {\n        \"66aaa9e9e6f5802145ab051c\": \"Prediabetic \\nBlood Pressure: Hypotension \\n\",\n        \"66ad2d234717cf471aaad0b7\": \"Prediabetic \\n\",\n        \"66ad35584717cf471aaad0bd\": \"Prediabetic \\n\",\n        \"66ad39404717cf471aaad0cb\": \"Prediabetic \\n\",\n        \"66ad2a684717cf471aaad0b1\": \"Prediabetic \\n\",\n        \"66ad2fce4717cf471aaad0bb\": \"Prediabetic \\n\",\n        \"66ad37b74717cf471aaad0c3\": \"Prediabetic \\n\",\n        \"66ad3bb84717cf471aaad0cf\": \"Prediabetic \\n\",\n        \"66ad36ce4717cf471aaad0bf\": \"Prediabetic \\n\"\n    },\n    \"DateOfBirth\": \"1987-03-14\",\n    \"DieticianId\": 221,\n    \"Vitals\": {\n        \"66aaa9e9e6f5802145ab051c\": {\n            \"Weight\": 0,\n            \"Height\": 0,\n            \"Temperature\": 0,\n            \"SP\": 0,\n            \"DP\": 0\n        }\n    },\n    \"LastVisitDate\": \"2024-07-31T21:17:29.088+00:00\"\n}"
						}
					]
				},
				{
					"name": "update patient by Id update only contact number Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Check if patientId exist in JSON response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('patientId');\r",
									"    pm.expect(jsonData.patientId).to.equal(pm.environment.get(\"patientId\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Check if FirstName exist in JSON response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"   pm.expect(jsonData).to.have.property('FirstName');\r",
									"    pm.expect(jsonData.FirstName).to.equal(pm.iterationData.get(\"Patient_FirstName\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Check if LastName exist in JSON response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('LastName');\r",
									"    pm.expect(jsonData.LastName).to.equal(pm.iterationData.get(\"Patient_LastName\"));\r",
									"});\r",
									"pm.test(\"Check if contactNumber exist in JSON response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('ContactNumber');\r",
									"    pm.expect(jsonData.ContactNumber).to.equal(pm.iterationData.get(\"patient_update_contactNumber\")).toString();\r",
									"});\r",
									"pm.test(\"Check if Email exist in JSON response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('Email');\r",
									"    pm.expect(jsonData.Email).to.equal(pm.iterationData.get(\"Patient_Email\"));\r",
									"});\r",
									"pm.test(\"Check if Allergy exist in JSON response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('Allergy');\r",
									"    pm.expect(jsonData.Allergy).to.equal(pm.iterationData.get(\"Patient_Allergy\"));\r",
									"});\r",
									"pm.test(\"Check if FoodPreference exist in JSON response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('FoodPreference');\r",
									"    pm.expect(jsonData.FoodPreference).to.equal(pm.iterationData.get(\"Patient_FoodPreference\"));\r",
									"});\r",
									"pm.test(\"Check if CuisineCategory exist in JSON response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('CuisineCategory');\r",
									"    pm.expect(jsonData.CuisineCategory).to.equal(pm.iterationData.get(\"Patient_CuisineCategory\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Check if CuisineCategory exist in JSON response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('DateOfBirth');\r",
									"    pm.expect(jsonData.DateOfBirth).to.equal(pm.iterationData.get(\"Patient_DateOfBirth\"));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dieticianToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo",
									"value": "{ \"FirstName\": \"{{Patient_FirstName}}\",\n\"LastName\": \"{{Patient_LastName}}\",\n\"ContactNumber\": \"{{patient_update_contactNumber}}\",\n\"Email\": \"{{Patient_Email}}\",\n\"Allergy\":\"{{Patient_Allergy}}\",\n\"FoodPreference\": \"{{Patient_FoodPreference}}\",\n\"CuisineCategory\":\"{{Patient_CuisineCategory}}\",\n\"DateOfBirth\": \"{{Patient_DateOfBirth}}\"}\n",
									"type": "text"
								},
								{
									"key": "file",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "PtInfo",
									"value": "",
									"type": "text",
									"disabled": true
								},
								{
									"key": "file",
									"type": "file",
									"src": [],
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{baseURL}}/patient/{{patientId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"patient",
								"{{patientId}}"
							]
						}
					},
					"response": [
						{
							"name": "Create Patient 2 Copy",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"malli\",\n\"LastName\": \"malli\",\n\"ContactNumber\": \"9867345989\",\n\"Email\": \"smartdiet1@gmail.com\",\n\"Allergy\": \"ALMOND\",\n\"FoodPreference\": \"Jain\",\n\"CuisineCategory\":\"rajasthani\",\n\"DateOfBirth\": \"1987-03-14\"\n}",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef4f81e-6866-4e80-b96a-b1a87c11c05d"
										},
										{
											"key": "PtInfo",
											"value": " { \"FirstName\": \"Ram\",\n\"LastName\": \"Setu\",\n\"ContactNumber\": \"9009089789\",\n\"Email\": \"ram@gmail.com\",\n\"Allergy\": \"Peanuts\",\n\"FoodPreference\": \"NonVeg\",\n\"CuisineCategory\":\"sindhi\",\n\"DateOfBirth\": \"1987-02-14\"\n}\n",
											"type": "text",
											"disabled": true
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef50041-b0cf-4520-834f-a4054daded29",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/patient/33\n",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"patient",
										"33\n"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722629047&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=8RqX%2BqL%2FJeVJs2s0urHTHFh9ACsKsy25ugRJpKoNrGQ%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722629047&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=8RqX%2BqL%2FJeVJs2s0urHTHFh9ACsKsy25ugRJpKoNrGQ%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 02 Aug 2024 20:04:08 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"patientId\": 33,\n    \"FirstName\": \"malli\",\n    \"LastName\": \"malli\",\n    \"ContactNumber\": \"9867345989\",\n    \"Email\": \"smartdiet1@gmail.com\",\n    \"Allergy\": \"ALMOND\",\n    \"FoodPreference\": \"Jain\",\n    \"CuisineCategory\": \"rajasthani\",\n    \"FileMorbidity\": {\n        \"66aaa9e9e6f5802145ab051c\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2d234717cf471aaad0b7\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad35584717cf471aaad0bd\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad39404717cf471aaad0cb\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2a684717cf471aaad0b1\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2fce4717cf471aaad0bb\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad37b74717cf471aaad0c3\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad3bb84717cf471aaad0cf\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad36ce4717cf471aaad0bf\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        }\n    },\n    \"FileMorbidityCondition\": {\n        \"66aaa9e9e6f5802145ab051c\": \"Prediabetic \\nBlood Pressure: Hypotension \\n\",\n        \"66ad2d234717cf471aaad0b7\": \"Prediabetic \\n\",\n        \"66ad35584717cf471aaad0bd\": \"Prediabetic \\n\",\n        \"66ad39404717cf471aaad0cb\": \"Prediabetic \\n\",\n        \"66ad2a684717cf471aaad0b1\": \"Prediabetic \\n\",\n        \"66ad2fce4717cf471aaad0bb\": \"Prediabetic \\n\",\n        \"66ad37b74717cf471aaad0c3\": \"Prediabetic \\n\",\n        \"66ad3bb84717cf471aaad0cf\": \"Prediabetic \\n\",\n        \"66ad36ce4717cf471aaad0bf\": \"Prediabetic \\n\"\n    },\n    \"DateOfBirth\": \"1987-03-14\",\n    \"DieticianId\": 221,\n    \"Vitals\": {\n        \"66aaa9e9e6f5802145ab051c\": {\n            \"Weight\": 0,\n            \"Height\": 0,\n            \"Temperature\": 0,\n            \"SP\": 0,\n            \"DP\": 0\n        }\n    },\n    \"LastVisitDate\": \"2024-07-31T21:17:29.088+00:00\"\n}"
						}
					]
				},
				{
					"name": "update patient by Id update only Email Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Check if patientId exist in JSON response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('patientId');\r",
									"    pm.expect(jsonData.patientId).to.equal(pm.environment.get(\"patientId\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Check if FirstName exist in JSON response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"   pm.expect(jsonData).to.have.property('FirstName');\r",
									"    pm.expect(jsonData.FirstName).to.equal(pm.iterationData.get(\"Patient_FirstName\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Check if LastName exist in JSON response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('LastName');\r",
									"    pm.expect(jsonData.LastName).to.equal(pm.iterationData.get(\"Patient_LastName\"));\r",
									"});\r",
									"pm.test(\"Check if contactNumber exist in JSON response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('ContactNumber');\r",
									"    pm.expect(jsonData.ContactNumber).to.equal(pm.iterationData.get(\"Patient_ContactNumber\")).toString();\r",
									"});\r",
									"pm.test(\"Check if Email exist in JSON response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('Email');\r",
									"    pm.expect(jsonData.Email).to.equal(pm.iterationData.get(\"patient_update_email\"));\r",
									"});\r",
									"pm.test(\"Check if Allergy exist in JSON response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('Allergy');\r",
									"    pm.expect(jsonData.Allergy).to.equal(pm.iterationData.get(\"Patient_Allergy\"));\r",
									"});\r",
									"pm.test(\"Check if FoodPreference exist in JSON response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('FoodPreference');\r",
									"    pm.expect(jsonData.FoodPreference).to.equal(pm.iterationData.get(\"Patient_FoodPreference\"));\r",
									"});\r",
									"pm.test(\"Check if CuisineCategory exist in JSON response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('CuisineCategory');\r",
									"    pm.expect(jsonData.CuisineCategory).to.equal(pm.iterationData.get(\"Patient_CuisineCategory\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Check if CuisineCategory exist in JSON response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('DateOfBirth');\r",
									"    pm.expect(jsonData.DateOfBirth).to.equal(pm.iterationData.get(\"Patient_DateOfBirth\"));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dieticianToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo",
									"value": "{ \"FirstName\": \"{{Patient_FirstName}}\",\n\"LastName\": \"{{Patient_LastName}}\",\n\"ContactNumber\": \"{{Patient_ContactNumber}}\",\n\"Email\": \"{{patient_update_email}}\",\n\"Allergy\":\"{{Patient_Allergy}}\",\n\"FoodPreference\": \"{{Patient_FoodPreference}}\",\n\"CuisineCategory\":\"{{Patient_CuisineCategory}}\",\n\"DateOfBirth\": \"{{Patient_DateOfBirth}}\"}",
									"type": "text"
								},
								{
									"key": "file",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "PtInfo",
									"value": " { \"FirstName\": \"Ram\",\n\"LastName\": \"Setu\",\n\"ContactNumber\": \"9009089789\",\n\"Email\": \"ram@gmail.com\",\n\"Allergy\": \"Peanuts\",\n\"FoodPreference\": \"NonVeg\",\n\"CuisineCategory\":\"sindhi\",\n\"DateOfBirth\": \"1987-02-14\"\n}\n",
									"type": "text",
									"disabled": true
								},
								{
									"key": "file",
									"type": "file",
									"src": [],
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{baseURL}}/patient/{{patientId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"patient",
								"{{patientId}}"
							]
						}
					},
					"response": [
						{
							"name": "Create Patient 2 Copy",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"malli\",\n\"LastName\": \"malli\",\n\"ContactNumber\": \"9867345989\",\n\"Email\": \"smartdiet1@gmail.com\",\n\"Allergy\": \"ALMOND\",\n\"FoodPreference\": \"Jain\",\n\"CuisineCategory\":\"rajasthani\",\n\"DateOfBirth\": \"1987-03-14\"\n}",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef4f81e-6866-4e80-b96a-b1a87c11c05d"
										},
										{
											"key": "PtInfo",
											"value": " { \"FirstName\": \"Ram\",\n\"LastName\": \"Setu\",\n\"ContactNumber\": \"9009089789\",\n\"Email\": \"ram@gmail.com\",\n\"Allergy\": \"Peanuts\",\n\"FoodPreference\": \"NonVeg\",\n\"CuisineCategory\":\"sindhi\",\n\"DateOfBirth\": \"1987-02-14\"\n}\n",
											"type": "text",
											"disabled": true
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef50041-b0cf-4520-834f-a4054daded29",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/patient/33\n",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"patient",
										"33\n"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722629047&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=8RqX%2BqL%2FJeVJs2s0urHTHFh9ACsKsy25ugRJpKoNrGQ%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722629047&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=8RqX%2BqL%2FJeVJs2s0urHTHFh9ACsKsy25ugRJpKoNrGQ%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 02 Aug 2024 20:04:08 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"patientId\": 33,\n    \"FirstName\": \"malli\",\n    \"LastName\": \"malli\",\n    \"ContactNumber\": \"9867345989\",\n    \"Email\": \"smartdiet1@gmail.com\",\n    \"Allergy\": \"ALMOND\",\n    \"FoodPreference\": \"Jain\",\n    \"CuisineCategory\": \"rajasthani\",\n    \"FileMorbidity\": {\n        \"66aaa9e9e6f5802145ab051c\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2d234717cf471aaad0b7\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad35584717cf471aaad0bd\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad39404717cf471aaad0cb\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2a684717cf471aaad0b1\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2fce4717cf471aaad0bb\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad37b74717cf471aaad0c3\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad3bb84717cf471aaad0cf\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad36ce4717cf471aaad0bf\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        }\n    },\n    \"FileMorbidityCondition\": {\n        \"66aaa9e9e6f5802145ab051c\": \"Prediabetic \\nBlood Pressure: Hypotension \\n\",\n        \"66ad2d234717cf471aaad0b7\": \"Prediabetic \\n\",\n        \"66ad35584717cf471aaad0bd\": \"Prediabetic \\n\",\n        \"66ad39404717cf471aaad0cb\": \"Prediabetic \\n\",\n        \"66ad2a684717cf471aaad0b1\": \"Prediabetic \\n\",\n        \"66ad2fce4717cf471aaad0bb\": \"Prediabetic \\n\",\n        \"66ad37b74717cf471aaad0c3\": \"Prediabetic \\n\",\n        \"66ad3bb84717cf471aaad0cf\": \"Prediabetic \\n\",\n        \"66ad36ce4717cf471aaad0bf\": \"Prediabetic \\n\"\n    },\n    \"DateOfBirth\": \"1987-03-14\",\n    \"DieticianId\": 221,\n    \"Vitals\": {\n        \"66aaa9e9e6f5802145ab051c\": {\n            \"Weight\": 0,\n            \"Height\": 0,\n            \"Temperature\": 0,\n            \"SP\": 0,\n            \"DP\": 0\n        }\n    },\n    \"LastVisitDate\": \"2024-07-31T21:17:29.088+00:00\"\n}"
						}
					]
				},
				{
					"name": "update patient by Id update Allergy field Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Check if patientId exist in JSON response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('patientId');\r",
									"    pm.expect(jsonData.patientId).to.equal(pm.environment.get(\"patientId\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Check if FirstName exist in JSON response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"   pm.expect(jsonData).to.have.property('FirstName');\r",
									"    pm.expect(jsonData.FirstName).to.equal(pm.iterationData.get(\"Patient_FirstName\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Check if LastName exist in JSON response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('LastName');\r",
									"    pm.expect(jsonData.LastName).to.equal(pm.iterationData.get(\"Patient_LastName\"));\r",
									"});\r",
									"pm.test(\"Check if contactNumber exist in JSON response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('ContactNumber');\r",
									"    pm.expect(jsonData.ContactNumber).to.equal(pm.iterationData.get(\"Patient_ContactNumber\")).toString();\r",
									"});\r",
									"pm.test(\"Check if Email exist in JSON response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('Email');\r",
									"    pm.expect(jsonData.Email).to.equal(pm.iterationData.get(\"Patient_Email\"));\r",
									"});\r",
									"pm.test(\"Check if Allergy exist in JSON response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('Allergy');\r",
									"    pm.expect(jsonData.Allergy).to.equal(pm.iterationData.get(\"patient_update_allergy\"));\r",
									"});\r",
									"pm.test(\"Check if FoodPreference exist in JSON response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('FoodPreference');\r",
									"    pm.expect(jsonData.FoodPreference).to.equal(pm.iterationData.get(\"Patient_FoodPreference\"));\r",
									"});\r",
									"pm.test(\"Check if CuisineCategory exist in JSON response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('CuisineCategory');\r",
									"    pm.expect(jsonData.CuisineCategory).to.equal(pm.iterationData.get(\"Patient_CuisineCategory\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Check if CuisineCategory exist in JSON response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('DateOfBirth');\r",
									"    pm.expect(jsonData.DateOfBirth).to.equal(pm.iterationData.get(\"Patient_DateOfBirth\"));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dieticianToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo",
									"value": "{ \"FirstName\": \"{{Patient_FirstName}}\",\n\"LastName\": \"{{Patient_LastName}}\",\n\"ContactNumber\": \"{{Patient_ContactNumber}}\",\n\"Email\": \"{{Patient_Email}}\",\n\"Allergy\":\"{{patient_update_allergy}}\",\n\"FoodPreference\": \"{{Patient_FoodPreference}}\",\n\"CuisineCategory\":\"{{Patient_CuisineCategory}}\",\n\"DateOfBirth\": \"{{Patient_DateOfBirth}}\"}",
									"type": "text"
								},
								{
									"key": "file",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "PtInfo",
									"value": " { \"FirstName\": \"Ram\",\n\"LastName\": \"Setu\",\n\"ContactNumber\": \"9009089789\",\n\"Email\": \"ram@gmail.com\",\n\"Allergy\": \"Peanuts\",\n\"FoodPreference\": \"NonVeg\",\n\"CuisineCategory\":\"sindhi\",\n\"DateOfBirth\": \"1987-02-14\"\n}\n",
									"type": "text",
									"disabled": true
								},
								{
									"key": "file",
									"type": "file",
									"src": [],
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{baseURL}}/patient/{{patientId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"patient",
								"{{patientId}}"
							]
						}
					},
					"response": [
						{
							"name": "Create Patient 2 Copy",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"malli\",\n\"LastName\": \"malli\",\n\"ContactNumber\": \"9867345989\",\n\"Email\": \"smartdiet1@gmail.com\",\n\"Allergy\": \"ALMOND\",\n\"FoodPreference\": \"Jain\",\n\"CuisineCategory\":\"rajasthani\",\n\"DateOfBirth\": \"1987-03-14\"\n}",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef4f81e-6866-4e80-b96a-b1a87c11c05d"
										},
										{
											"key": "PtInfo",
											"value": " { \"FirstName\": \"Ram\",\n\"LastName\": \"Setu\",\n\"ContactNumber\": \"9009089789\",\n\"Email\": \"ram@gmail.com\",\n\"Allergy\": \"Peanuts\",\n\"FoodPreference\": \"NonVeg\",\n\"CuisineCategory\":\"sindhi\",\n\"DateOfBirth\": \"1987-02-14\"\n}\n",
											"type": "text",
											"disabled": true
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef50041-b0cf-4520-834f-a4054daded29",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/patient/33\n",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"patient",
										"33\n"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722629047&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=8RqX%2BqL%2FJeVJs2s0urHTHFh9ACsKsy25ugRJpKoNrGQ%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722629047&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=8RqX%2BqL%2FJeVJs2s0urHTHFh9ACsKsy25ugRJpKoNrGQ%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 02 Aug 2024 20:04:08 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"patientId\": 33,\n    \"FirstName\": \"malli\",\n    \"LastName\": \"malli\",\n    \"ContactNumber\": \"9867345989\",\n    \"Email\": \"smartdiet1@gmail.com\",\n    \"Allergy\": \"ALMOND\",\n    \"FoodPreference\": \"Jain\",\n    \"CuisineCategory\": \"rajasthani\",\n    \"FileMorbidity\": {\n        \"66aaa9e9e6f5802145ab051c\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2d234717cf471aaad0b7\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad35584717cf471aaad0bd\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad39404717cf471aaad0cb\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2a684717cf471aaad0b1\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2fce4717cf471aaad0bb\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad37b74717cf471aaad0c3\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad3bb84717cf471aaad0cf\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad36ce4717cf471aaad0bf\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        }\n    },\n    \"FileMorbidityCondition\": {\n        \"66aaa9e9e6f5802145ab051c\": \"Prediabetic \\nBlood Pressure: Hypotension \\n\",\n        \"66ad2d234717cf471aaad0b7\": \"Prediabetic \\n\",\n        \"66ad35584717cf471aaad0bd\": \"Prediabetic \\n\",\n        \"66ad39404717cf471aaad0cb\": \"Prediabetic \\n\",\n        \"66ad2a684717cf471aaad0b1\": \"Prediabetic \\n\",\n        \"66ad2fce4717cf471aaad0bb\": \"Prediabetic \\n\",\n        \"66ad37b74717cf471aaad0c3\": \"Prediabetic \\n\",\n        \"66ad3bb84717cf471aaad0cf\": \"Prediabetic \\n\",\n        \"66ad36ce4717cf471aaad0bf\": \"Prediabetic \\n\"\n    },\n    \"DateOfBirth\": \"1987-03-14\",\n    \"DieticianId\": 221,\n    \"Vitals\": {\n        \"66aaa9e9e6f5802145ab051c\": {\n            \"Weight\": 0,\n            \"Height\": 0,\n            \"Temperature\": 0,\n            \"SP\": 0,\n            \"DP\": 0\n        }\n    },\n    \"LastVisitDate\": \"2024-07-31T21:17:29.088+00:00\"\n}"
						}
					]
				},
				{
					"name": "update patient by Id update FoodPreference field Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Check if patientId exist in JSON response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('patientId');\r",
									"    pm.expect(jsonData.patientId).to.equal(pm.environment.get(\"patientId\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Check if FirstName exist in JSON response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"   pm.expect(jsonData).to.have.property('FirstName');\r",
									"    pm.expect(jsonData.FirstName).to.equal(pm.iterationData.get(\"Patient_FirstName\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Check if LastName exist in JSON response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('LastName');\r",
									"    pm.expect(jsonData.LastName).to.equal(pm.iterationData.get(\"Patient_LastName\"));\r",
									"});\r",
									"pm.test(\"Check if contactNumber exist in JSON response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('ContactNumber');\r",
									"    pm.expect(jsonData.ContactNumber).to.equal(pm.iterationData.get(\"Patient_ContactNumber\")).toString();\r",
									"});\r",
									"pm.test(\"Check if Email exist in JSON response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('Email');\r",
									"    pm.expect(jsonData.Email).to.equal(pm.iterationData.get(\"Patient_Email\"));\r",
									"});\r",
									"pm.test(\"Check if Allergy exist in JSON response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('Allergy');\r",
									"    pm.expect(jsonData.Allergy).to.equal(pm.iterationData.get(\"Patient_Allergy\"));\r",
									"});\r",
									"pm.test(\"Check if FoodPreference exist in JSON response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('FoodPreference');\r",
									"    pm.expect(jsonData.FoodPreference).to.equal(pm.iterationData.get(\"patient_update_foodPreference\"));\r",
									"});\r",
									"pm.test(\"Check if CuisineCategory exist in JSON response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('CuisineCategory');\r",
									"    pm.expect(jsonData.CuisineCategory).to.equal(pm.iterationData.get(\"Patient_CuisineCategory\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Check if DateOfBirth exist in JSON response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('DateOfBirth');\r",
									"    pm.expect(jsonData.DateOfBirth).to.equal(pm.iterationData.get(\"Patient_DateOfBirth\"));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dieticianToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo",
									"value": "{ \"FirstName\": \"{{Patient_FirstName}}\",\n\"LastName\": \"{{Patient_LastName}}\",\n\"ContactNumber\": \"{{Patient_ContactNumber}}\",\n\"Email\": \"{{Patient_Email}}\",\n\"Allergy\":\"{{Patient_Allergy}}\",\n\"FoodPreference\": \"{{patient_update_foodPreference}}\",\n\"CuisineCategory\":\"{{Patient_CuisineCategory}}\",\n\"DateOfBirth\": \"{{Patient_DateOfBirth}}\"}",
									"type": "text"
								},
								{
									"key": "file",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "PtInfo",
									"value": " { \"FirstName\": \"Ram\",\n\"LastName\": \"Setu\",\n\"ContactNumber\": \"9009089789\",\n\"Email\": \"ram@gmail.com\",\n\"Allergy\": \"Peanuts\",\n\"FoodPreference\": \"NonVeg\",\n\"CuisineCategory\":\"sindhi\",\n\"DateOfBirth\": \"1987-02-14\"\n}\n",
									"type": "text",
									"disabled": true
								},
								{
									"key": "file",
									"type": "file",
									"src": [],
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{baseURL}}/patient/{{patientId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"patient",
								"{{patientId}}"
							]
						}
					},
					"response": [
						{
							"name": "Create Patient 2 Copy",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"malli\",\n\"LastName\": \"malli\",\n\"ContactNumber\": \"9867345989\",\n\"Email\": \"smartdiet1@gmail.com\",\n\"Allergy\": \"ALMOND\",\n\"FoodPreference\": \"Jain\",\n\"CuisineCategory\":\"rajasthani\",\n\"DateOfBirth\": \"1987-03-14\"\n}",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef4f81e-6866-4e80-b96a-b1a87c11c05d"
										},
										{
											"key": "PtInfo",
											"value": " { \"FirstName\": \"Ram\",\n\"LastName\": \"Setu\",\n\"ContactNumber\": \"9009089789\",\n\"Email\": \"ram@gmail.com\",\n\"Allergy\": \"Peanuts\",\n\"FoodPreference\": \"NonVeg\",\n\"CuisineCategory\":\"sindhi\",\n\"DateOfBirth\": \"1987-02-14\"\n}\n",
											"type": "text",
											"disabled": true
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef50041-b0cf-4520-834f-a4054daded29",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/patient/33\n",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"patient",
										"33\n"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722629047&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=8RqX%2BqL%2FJeVJs2s0urHTHFh9ACsKsy25ugRJpKoNrGQ%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722629047&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=8RqX%2BqL%2FJeVJs2s0urHTHFh9ACsKsy25ugRJpKoNrGQ%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 02 Aug 2024 20:04:08 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"patientId\": 33,\n    \"FirstName\": \"malli\",\n    \"LastName\": \"malli\",\n    \"ContactNumber\": \"9867345989\",\n    \"Email\": \"smartdiet1@gmail.com\",\n    \"Allergy\": \"ALMOND\",\n    \"FoodPreference\": \"Jain\",\n    \"CuisineCategory\": \"rajasthani\",\n    \"FileMorbidity\": {\n        \"66aaa9e9e6f5802145ab051c\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2d234717cf471aaad0b7\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad35584717cf471aaad0bd\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad39404717cf471aaad0cb\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2a684717cf471aaad0b1\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2fce4717cf471aaad0bb\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad37b74717cf471aaad0c3\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad3bb84717cf471aaad0cf\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad36ce4717cf471aaad0bf\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        }\n    },\n    \"FileMorbidityCondition\": {\n        \"66aaa9e9e6f5802145ab051c\": \"Prediabetic \\nBlood Pressure: Hypotension \\n\",\n        \"66ad2d234717cf471aaad0b7\": \"Prediabetic \\n\",\n        \"66ad35584717cf471aaad0bd\": \"Prediabetic \\n\",\n        \"66ad39404717cf471aaad0cb\": \"Prediabetic \\n\",\n        \"66ad2a684717cf471aaad0b1\": \"Prediabetic \\n\",\n        \"66ad2fce4717cf471aaad0bb\": \"Prediabetic \\n\",\n        \"66ad37b74717cf471aaad0c3\": \"Prediabetic \\n\",\n        \"66ad3bb84717cf471aaad0cf\": \"Prediabetic \\n\",\n        \"66ad36ce4717cf471aaad0bf\": \"Prediabetic \\n\"\n    },\n    \"DateOfBirth\": \"1987-03-14\",\n    \"DieticianId\": 221,\n    \"Vitals\": {\n        \"66aaa9e9e6f5802145ab051c\": {\n            \"Weight\": 0,\n            \"Height\": 0,\n            \"Temperature\": 0,\n            \"SP\": 0,\n            \"DP\": 0\n        }\n    },\n    \"LastVisitDate\": \"2024-07-31T21:17:29.088+00:00\"\n}"
						}
					]
				},
				{
					"name": "update patient by Id update DateOfBirth field",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Check if patientId exist in JSON response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('patientId');\r",
									"    pm.expect(jsonData.patientId).to.equal(pm.environment.get(\"patientId\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Check if FirstName exist in JSON response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"   pm.expect(jsonData).to.have.property('FirstName');\r",
									"    pm.expect(jsonData.FirstName).to.equal(pm.iterationData.get(\"Patient_FirstName\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Check if LastName exist in JSON response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('LastName');\r",
									"    pm.expect(jsonData.LastName).to.equal(pm.iterationData.get(\"Patient_LastName\"));\r",
									"});\r",
									"pm.test(\"Check if contactNumber exist in JSON response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('ContactNumber');\r",
									"    pm.expect(jsonData.ContactNumber).to.equal(pm.iterationData.get(\"Patient_ContactNumber\")).toString();\r",
									"});\r",
									"pm.test(\"Check if Email exist in JSON response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('Email');\r",
									"    pm.expect(jsonData.Email).to.equal(pm.iterationData.get(\"Patient_Email\"));\r",
									"});\r",
									"pm.test(\"Check if Allergy exist in JSON response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('Allergy');\r",
									"    pm.expect(jsonData.Allergy).to.equal(pm.iterationData.get(\"Patient_Allergy\"));\r",
									"});\r",
									"pm.test(\"Check if FoodPreference exist in JSON response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('FoodPreference');\r",
									"    pm.expect(jsonData.FoodPreference).to.equal(pm.iterationData.get(\"Patient_FoodPreference\"));\r",
									"});\r",
									"pm.test(\"Check if CuisineCategory exist in JSON response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('CuisineCategory');\r",
									"    pm.expect(jsonData.CuisineCategory).to.equal(pm.iterationData.get(\"Patient_CuisineCategory\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Check if DateOfBirth exist in JSON response\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('DateOfBirth');\r",
									"    pm.expect(jsonData.DateOfBirth).to.equal(pm.iterationData.get(\"patient_update_dateOfBirth\"));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dieticianToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo",
									"value": "{ \"FirstName\": \"{{Patient_FirstName}}\",\n\"LastName\": \"{{Patient_LastName}}\",\n\"ContactNumber\": \"{{Patient_ContactNumber}}\",\n\"Email\": \"{{Patient_Email}}\",\n\"Allergy\": \"{{Allergy}}\",\n\"FoodPreference\": \"{{FoodPreference}}\",\n\"CuisineCategory\":\"{{CuisineCategory}}\",\n\"DateOfBirth\": \"{{Patient_DateOfBirth}}\"\n}\n",
									"type": "text"
								},
								{
									"key": "file",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "PtInfo",
									"value": " { \"FirstName\": \"Ram\",\n\"LastName\": \"Setu\",\n\"ContactNumber\": \"9009089789\",\n\"Email\": \"ram@gmail.com\",\n\"Allergy\": \"Peanuts\",\n\"FoodPreference\": \"NonVeg\",\n\"CuisineCategory\":\"sindhi\",\n\"DateOfBirth\": \"1987-02-14\"\n}\n",
									"type": "text",
									"disabled": true
								},
								{
									"key": "file",
									"type": "file",
									"src": [],
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{baseURL}}/patient/{{patientId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"patient",
								"{{patientId}}"
							]
						}
					},
					"response": [
						{
							"name": "Create Patient 2 Copy",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"malli\",\n\"LastName\": \"malli\",\n\"ContactNumber\": \"9867345989\",\n\"Email\": \"smartdiet1@gmail.com\",\n\"Allergy\": \"ALMOND\",\n\"FoodPreference\": \"Jain\",\n\"CuisineCategory\":\"rajasthani\",\n\"DateOfBirth\": \"1987-03-14\"\n}",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef4f81e-6866-4e80-b96a-b1a87c11c05d"
										},
										{
											"key": "PtInfo",
											"value": " { \"FirstName\": \"Ram\",\n\"LastName\": \"Setu\",\n\"ContactNumber\": \"9009089789\",\n\"Email\": \"ram@gmail.com\",\n\"Allergy\": \"Peanuts\",\n\"FoodPreference\": \"NonVeg\",\n\"CuisineCategory\":\"sindhi\",\n\"DateOfBirth\": \"1987-02-14\"\n}\n",
											"type": "text",
											"disabled": true
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef50041-b0cf-4520-834f-a4054daded29",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/patient/33\n",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"patient",
										"33\n"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722629047&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=8RqX%2BqL%2FJeVJs2s0urHTHFh9ACsKsy25ugRJpKoNrGQ%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722629047&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=8RqX%2BqL%2FJeVJs2s0urHTHFh9ACsKsy25ugRJpKoNrGQ%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 02 Aug 2024 20:04:08 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"patientId\": 33,\n    \"FirstName\": \"malli\",\n    \"LastName\": \"malli\",\n    \"ContactNumber\": \"9867345989\",\n    \"Email\": \"smartdiet1@gmail.com\",\n    \"Allergy\": \"ALMOND\",\n    \"FoodPreference\": \"Jain\",\n    \"CuisineCategory\": \"rajasthani\",\n    \"FileMorbidity\": {\n        \"66aaa9e9e6f5802145ab051c\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2d234717cf471aaad0b7\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad35584717cf471aaad0bd\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad39404717cf471aaad0cb\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2a684717cf471aaad0b1\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2fce4717cf471aaad0bb\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad37b74717cf471aaad0c3\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad3bb84717cf471aaad0cf\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad36ce4717cf471aaad0bf\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        }\n    },\n    \"FileMorbidityCondition\": {\n        \"66aaa9e9e6f5802145ab051c\": \"Prediabetic \\nBlood Pressure: Hypotension \\n\",\n        \"66ad2d234717cf471aaad0b7\": \"Prediabetic \\n\",\n        \"66ad35584717cf471aaad0bd\": \"Prediabetic \\n\",\n        \"66ad39404717cf471aaad0cb\": \"Prediabetic \\n\",\n        \"66ad2a684717cf471aaad0b1\": \"Prediabetic \\n\",\n        \"66ad2fce4717cf471aaad0bb\": \"Prediabetic \\n\",\n        \"66ad37b74717cf471aaad0c3\": \"Prediabetic \\n\",\n        \"66ad3bb84717cf471aaad0cf\": \"Prediabetic \\n\",\n        \"66ad36ce4717cf471aaad0bf\": \"Prediabetic \\n\"\n    },\n    \"DateOfBirth\": \"1987-03-14\",\n    \"DieticianId\": 221,\n    \"Vitals\": {\n        \"66aaa9e9e6f5802145ab051c\": {\n            \"Weight\": 0,\n            \"Height\": 0,\n            \"Temperature\": 0,\n            \"SP\": 0,\n            \"DP\": 0\n        }\n    },\n    \"LastVisitDate\": \"2024-07-31T21:17:29.088+00:00\"\n}"
						}
					]
				},
				{
					"name": "update patient by Id add new report without vitals",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Vitals key should be present in the response\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.have.property('Vitals');\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"// pm.test(\"Check if fileId exist in JSON response\", function () {\r",
									"//    const fileID = Object.keys(jsonBody.FileMorbidity)[0];\r",
									"//         pm.environment.set(\"fileID\", fileID);\r",
									"\r",
									"    \r",
									"// });\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dieticianToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo",
									"value": "{ \"FirstName\": \"{{Patient_FirstName}}\",\n\"LastName\": \"{{Patient_LastName}}\",\n\"ContactNumber\": \"{{Patient_ContactNumber}}\",\n\"Email\": \"{{Patient_Email}}\",\n\"Allergy\":\"{{Patient_Allergy}}\",\n\"FoodPreference\": \"{{Patient_FoodPreference}}\",\n\"CuisineCategory\":\"{{Patient_CuisineCategory}}\",\n\"DateOfBirth\": \"{{Patient_DateOfBirth}}\"}",
									"type": "text"
								},
								{
									"key": "file",
									"type": "file",
									"src": "{{Patient_update_newFile}}"
								},
								{
									"key": "PtInfo",
									"value": " { \"FirstName\": \"Ram\",\n\"LastName\": \"Setu\",\n\"ContactNumber\": \"9009089789\",\n\"Email\": \"ram@gmail.com\",\n\"Allergy\": \"Peanuts\",\n\"FoodPreference\": \"NonVeg\",\n\"CuisineCategory\":\"sindhi\",\n\"DateOfBirth\": \"1987-02-14\"\n}\n",
									"type": "text",
									"disabled": true
								},
								{
									"key": "file",
									"type": "file",
									"src": [],
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{baseURL}}/patient/newReports/{{patientId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"patient",
								"newReports",
								"{{patientId}}"
							]
						}
					},
					"response": [
						{
							"name": "Create Patient 2 Copy",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"malli\",\n\"LastName\": \"malli\",\n\"ContactNumber\": \"9867345989\",\n\"Email\": \"smartdiet1@gmail.com\",\n\"Allergy\": \"ALMOND\",\n\"FoodPreference\": \"Jain\",\n\"CuisineCategory\":\"rajasthani\",\n\"DateOfBirth\": \"1987-03-14\"\n}",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef4f81e-6866-4e80-b96a-b1a87c11c05d"
										},
										{
											"key": "PtInfo",
											"value": " { \"FirstName\": \"Ram\",\n\"LastName\": \"Setu\",\n\"ContactNumber\": \"9009089789\",\n\"Email\": \"ram@gmail.com\",\n\"Allergy\": \"Peanuts\",\n\"FoodPreference\": \"NonVeg\",\n\"CuisineCategory\":\"sindhi\",\n\"DateOfBirth\": \"1987-02-14\"\n}\n",
											"type": "text",
											"disabled": true
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef50041-b0cf-4520-834f-a4054daded29",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/patient/33\n",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"patient",
										"33\n"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722629047&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=8RqX%2BqL%2FJeVJs2s0urHTHFh9ACsKsy25ugRJpKoNrGQ%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722629047&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=8RqX%2BqL%2FJeVJs2s0urHTHFh9ACsKsy25ugRJpKoNrGQ%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 02 Aug 2024 20:04:08 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"patientId\": 33,\n    \"FirstName\": \"malli\",\n    \"LastName\": \"malli\",\n    \"ContactNumber\": \"9867345989\",\n    \"Email\": \"smartdiet1@gmail.com\",\n    \"Allergy\": \"ALMOND\",\n    \"FoodPreference\": \"Jain\",\n    \"CuisineCategory\": \"rajasthani\",\n    \"FileMorbidity\": {\n        \"66aaa9e9e6f5802145ab051c\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2d234717cf471aaad0b7\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad35584717cf471aaad0bd\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad39404717cf471aaad0cb\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2a684717cf471aaad0b1\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2fce4717cf471aaad0bb\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad37b74717cf471aaad0c3\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad3bb84717cf471aaad0cf\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad36ce4717cf471aaad0bf\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        }\n    },\n    \"FileMorbidityCondition\": {\n        \"66aaa9e9e6f5802145ab051c\": \"Prediabetic \\nBlood Pressure: Hypotension \\n\",\n        \"66ad2d234717cf471aaad0b7\": \"Prediabetic \\n\",\n        \"66ad35584717cf471aaad0bd\": \"Prediabetic \\n\",\n        \"66ad39404717cf471aaad0cb\": \"Prediabetic \\n\",\n        \"66ad2a684717cf471aaad0b1\": \"Prediabetic \\n\",\n        \"66ad2fce4717cf471aaad0bb\": \"Prediabetic \\n\",\n        \"66ad37b74717cf471aaad0c3\": \"Prediabetic \\n\",\n        \"66ad3bb84717cf471aaad0cf\": \"Prediabetic \\n\",\n        \"66ad36ce4717cf471aaad0bf\": \"Prediabetic \\n\"\n    },\n    \"DateOfBirth\": \"1987-03-14\",\n    \"DieticianId\": 221,\n    \"Vitals\": {\n        \"66aaa9e9e6f5802145ab051c\": {\n            \"Weight\": 0,\n            \"Height\": 0,\n            \"Temperature\": 0,\n            \"SP\": 0,\n            \"DP\": 0\n        }\n    },\n    \"LastVisitDate\": \"2024-07-31T21:17:29.088+00:00\"\n}"
						}
					]
				},
				{
					"name": "update patient by Id with invalid endpoints Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dieticianToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo",
									"value": "{ \"FirstName\": \"{{Patient_FirstName}}\",\n\"LastName\": \"{{Patient_LastName}}\",\n\"ContactNumber\": \"{{Patient_ContactNumber}}\",\n\"Email\": \"{{Patient_Email}}\",\n\"Allergy\":\"{{Patient_Allergy}}\",\n\"FoodPreference\": \"{{Patient_FoodPreference}}\",\n\"CuisineCategory\":\"{{Patient_CuisineCategory}}\",\n\"DateOfBirth\": \"{{Patient_DateOfBirth}}\"}",
									"type": "text"
								},
								{
									"key": "file",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "PtInfo",
									"value": " { \"FirstName\": \"Ram\",\n\"LastName\": \"Setu\",\n\"ContactNumber\": \"9009089789\",\n\"Email\": \"ram@gmail.com\",\n\"Allergy\": \"Peanuts\",\n\"FoodPreference\": \"NonVeg\",\n\"CuisineCategory\":\"sindhi\",\n\"DateOfBirth\": \"1987-02-14\"\n}\n",
									"type": "text",
									"disabled": true
								},
								{
									"key": "file",
									"type": "file",
									"src": [],
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{baseURL}}{{invalidEndpoint}}",
							"host": [
								"{{baseURL}}{{invalidEndpoint}}"
							]
						}
					},
					"response": [
						{
							"name": "Create Patient 2 Copy",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"malli\",\n\"LastName\": \"malli\",\n\"ContactNumber\": \"9867345989\",\n\"Email\": \"smartdiet1@gmail.com\",\n\"Allergy\": \"ALMOND\",\n\"FoodPreference\": \"Jain\",\n\"CuisineCategory\":\"rajasthani\",\n\"DateOfBirth\": \"1987-03-14\"\n}",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef4f81e-6866-4e80-b96a-b1a87c11c05d"
										},
										{
											"key": "PtInfo",
											"value": " { \"FirstName\": \"Ram\",\n\"LastName\": \"Setu\",\n\"ContactNumber\": \"9009089789\",\n\"Email\": \"ram@gmail.com\",\n\"Allergy\": \"Peanuts\",\n\"FoodPreference\": \"NonVeg\",\n\"CuisineCategory\":\"sindhi\",\n\"DateOfBirth\": \"1987-02-14\"\n}\n",
											"type": "text",
											"disabled": true
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef50041-b0cf-4520-834f-a4054daded29",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/patient/33\n",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"patient",
										"33\n"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722629047&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=8RqX%2BqL%2FJeVJs2s0urHTHFh9ACsKsy25ugRJpKoNrGQ%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722629047&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=8RqX%2BqL%2FJeVJs2s0urHTHFh9ACsKsy25ugRJpKoNrGQ%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 02 Aug 2024 20:04:08 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"patientId\": 33,\n    \"FirstName\": \"malli\",\n    \"LastName\": \"malli\",\n    \"ContactNumber\": \"9867345989\",\n    \"Email\": \"smartdiet1@gmail.com\",\n    \"Allergy\": \"ALMOND\",\n    \"FoodPreference\": \"Jain\",\n    \"CuisineCategory\": \"rajasthani\",\n    \"FileMorbidity\": {\n        \"66aaa9e9e6f5802145ab051c\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2d234717cf471aaad0b7\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad35584717cf471aaad0bd\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad39404717cf471aaad0cb\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2a684717cf471aaad0b1\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2fce4717cf471aaad0bb\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad37b74717cf471aaad0c3\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad3bb84717cf471aaad0cf\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad36ce4717cf471aaad0bf\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        }\n    },\n    \"FileMorbidityCondition\": {\n        \"66aaa9e9e6f5802145ab051c\": \"Prediabetic \\nBlood Pressure: Hypotension \\n\",\n        \"66ad2d234717cf471aaad0b7\": \"Prediabetic \\n\",\n        \"66ad35584717cf471aaad0bd\": \"Prediabetic \\n\",\n        \"66ad39404717cf471aaad0cb\": \"Prediabetic \\n\",\n        \"66ad2a684717cf471aaad0b1\": \"Prediabetic \\n\",\n        \"66ad2fce4717cf471aaad0bb\": \"Prediabetic \\n\",\n        \"66ad37b74717cf471aaad0c3\": \"Prediabetic \\n\",\n        \"66ad3bb84717cf471aaad0cf\": \"Prediabetic \\n\",\n        \"66ad36ce4717cf471aaad0bf\": \"Prediabetic \\n\"\n    },\n    \"DateOfBirth\": \"1987-03-14\",\n    \"DieticianId\": 221,\n    \"Vitals\": {\n        \"66aaa9e9e6f5802145ab051c\": {\n            \"Weight\": 0,\n            \"Height\": 0,\n            \"Temperature\": 0,\n            \"SP\": 0,\n            \"DP\": 0\n        }\n    },\n    \"LastVisitDate\": \"2024-07-31T21:17:29.088+00:00\"\n}"
						}
					]
				},
				{
					"name": "update patient by Id (unauthorized) Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo",
									"value": "{ \"FirstName\": \"{{Patient_FirstName}}\",\n\"LastName\": \"{{Patient_LastName}}\",\n\"ContactNumber\": \"{{Patient_ContactNumber}}\",\n\"Email\": \"{{Patient_Email}}\",\n\"Allergy\":\"{{Patient_Allergy}}\",\n\"FoodPreference\": \"{{Patient_FoodPreference}}\",\n\"CuisineCategory\":\"{{Patient_CuisineCategory}}\",\n\"DateOfBirth\": \"{{Patient_DateOfBirth}}\"}",
									"type": "text"
								},
								{
									"key": "file",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "PtInfo",
									"value": " { \"FirstName\": \"Ram\",\n\"LastName\": \"Setu\",\n\"ContactNumber\": \"9009089789\",\n\"Email\": \"ram@gmail.com\",\n\"Allergy\": \"Peanuts\",\n\"FoodPreference\": \"NonVeg\",\n\"CuisineCategory\":\"sindhi\",\n\"DateOfBirth\": \"1987-02-14\"\n}\n",
									"type": "text",
									"disabled": true
								},
								{
									"key": "file",
									"type": "file",
									"src": [],
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{baseURL}}/patient/{{patientId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"patient",
								"{{patientId}}"
							]
						}
					},
					"response": [
						{
							"name": "Create Patient 2 Copy",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"malli\",\n\"LastName\": \"malli\",\n\"ContactNumber\": \"9867345989\",\n\"Email\": \"smartdiet1@gmail.com\",\n\"Allergy\": \"ALMOND\",\n\"FoodPreference\": \"Jain\",\n\"CuisineCategory\":\"rajasthani\",\n\"DateOfBirth\": \"1987-03-14\"\n}",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef4f81e-6866-4e80-b96a-b1a87c11c05d"
										},
										{
											"key": "PtInfo",
											"value": " { \"FirstName\": \"Ram\",\n\"LastName\": \"Setu\",\n\"ContactNumber\": \"9009089789\",\n\"Email\": \"ram@gmail.com\",\n\"Allergy\": \"Peanuts\",\n\"FoodPreference\": \"NonVeg\",\n\"CuisineCategory\":\"sindhi\",\n\"DateOfBirth\": \"1987-02-14\"\n}\n",
											"type": "text",
											"disabled": true
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef50041-b0cf-4520-834f-a4054daded29",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/patient/33\n",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"patient",
										"33\n"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722629047&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=8RqX%2BqL%2FJeVJs2s0urHTHFh9ACsKsy25ugRJpKoNrGQ%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722629047&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=8RqX%2BqL%2FJeVJs2s0urHTHFh9ACsKsy25ugRJpKoNrGQ%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 02 Aug 2024 20:04:08 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"patientId\": 33,\n    \"FirstName\": \"malli\",\n    \"LastName\": \"malli\",\n    \"ContactNumber\": \"9867345989\",\n    \"Email\": \"smartdiet1@gmail.com\",\n    \"Allergy\": \"ALMOND\",\n    \"FoodPreference\": \"Jain\",\n    \"CuisineCategory\": \"rajasthani\",\n    \"FileMorbidity\": {\n        \"66aaa9e9e6f5802145ab051c\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2d234717cf471aaad0b7\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad35584717cf471aaad0bd\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad39404717cf471aaad0cb\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2a684717cf471aaad0b1\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2fce4717cf471aaad0bb\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad37b74717cf471aaad0c3\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad3bb84717cf471aaad0cf\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad36ce4717cf471aaad0bf\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        }\n    },\n    \"FileMorbidityCondition\": {\n        \"66aaa9e9e6f5802145ab051c\": \"Prediabetic \\nBlood Pressure: Hypotension \\n\",\n        \"66ad2d234717cf471aaad0b7\": \"Prediabetic \\n\",\n        \"66ad35584717cf471aaad0bd\": \"Prediabetic \\n\",\n        \"66ad39404717cf471aaad0cb\": \"Prediabetic \\n\",\n        \"66ad2a684717cf471aaad0b1\": \"Prediabetic \\n\",\n        \"66ad2fce4717cf471aaad0bb\": \"Prediabetic \\n\",\n        \"66ad37b74717cf471aaad0c3\": \"Prediabetic \\n\",\n        \"66ad3bb84717cf471aaad0cf\": \"Prediabetic \\n\",\n        \"66ad36ce4717cf471aaad0bf\": \"Prediabetic \\n\"\n    },\n    \"DateOfBirth\": \"1987-03-14\",\n    \"DieticianId\": 221,\n    \"Vitals\": {\n        \"66aaa9e9e6f5802145ab051c\": {\n            \"Weight\": 0,\n            \"Height\": 0,\n            \"Temperature\": 0,\n            \"SP\": 0,\n            \"DP\": 0\n        }\n    },\n    \"LastVisitDate\": \"2024-07-31T21:17:29.088+00:00\"\n}"
						}
					]
				},
				{
					"name": "update patient add new report with invalid endpoints Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dieticianToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo",
									"value": "{ \"FirstName\": \"{{Patient_FirstName}}\",\n\"LastName\": \"{{Patient_LastName}}\",\n\"ContactNumber\": \"{{Patient_ContactNumber}}\",\n\"Email\": \"{{Patient_Email}}\",\n\"Allergy\":\"{{Patient_Allergy}}\",\n\"FoodPreference\": \"{{Patient_FoodPreference}}\",\n\"CuisineCategory\":\"{{Patient_CuisineCategory}}\",\n\"DateOfBirth\": \"{{Patient_DateOfBirth}}\"}",
									"type": "text"
								},
								{
									"key": "file",
									"type": "file",
									"src": []
								},
								{
									"key": "PtInfo",
									"value": " { \"FirstName\": \"Ram\",\n\"LastName\": \"Setu\",\n\"ContactNumber\": \"9009089789\",\n\"Email\": \"ram@gmail.com\",\n\"Allergy\": \"Peanuts\",\n\"FoodPreference\": \"NonVeg\",\n\"CuisineCategory\":\"sindhi\",\n\"DateOfBirth\": \"1987-02-14\"\n}\n",
									"type": "text",
									"disabled": true
								},
								{
									"key": "file",
									"type": "file",
									"src": [],
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{baseURL}}{{invalidEndpoint}}",
							"host": [
								"{{baseURL}}{{invalidEndpoint}}"
							]
						}
					},
					"response": [
						{
							"name": "Create Patient 2 Copy",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"malli\",\n\"LastName\": \"malli\",\n\"ContactNumber\": \"9867345989\",\n\"Email\": \"smartdiet1@gmail.com\",\n\"Allergy\": \"ALMOND\",\n\"FoodPreference\": \"Jain\",\n\"CuisineCategory\":\"rajasthani\",\n\"DateOfBirth\": \"1987-03-14\"\n}",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef4f81e-6866-4e80-b96a-b1a87c11c05d"
										},
										{
											"key": "PtInfo",
											"value": " { \"FirstName\": \"Ram\",\n\"LastName\": \"Setu\",\n\"ContactNumber\": \"9009089789\",\n\"Email\": \"ram@gmail.com\",\n\"Allergy\": \"Peanuts\",\n\"FoodPreference\": \"NonVeg\",\n\"CuisineCategory\":\"sindhi\",\n\"DateOfBirth\": \"1987-02-14\"\n}\n",
											"type": "text",
											"disabled": true
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef50041-b0cf-4520-834f-a4054daded29",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/patient/33\n",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"patient",
										"33\n"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722629047&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=8RqX%2BqL%2FJeVJs2s0urHTHFh9ACsKsy25ugRJpKoNrGQ%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722629047&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=8RqX%2BqL%2FJeVJs2s0urHTHFh9ACsKsy25ugRJpKoNrGQ%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 02 Aug 2024 20:04:08 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"patientId\": 33,\n    \"FirstName\": \"malli\",\n    \"LastName\": \"malli\",\n    \"ContactNumber\": \"9867345989\",\n    \"Email\": \"smartdiet1@gmail.com\",\n    \"Allergy\": \"ALMOND\",\n    \"FoodPreference\": \"Jain\",\n    \"CuisineCategory\": \"rajasthani\",\n    \"FileMorbidity\": {\n        \"66aaa9e9e6f5802145ab051c\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2d234717cf471aaad0b7\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad35584717cf471aaad0bd\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad39404717cf471aaad0cb\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2a684717cf471aaad0b1\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2fce4717cf471aaad0bb\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad37b74717cf471aaad0c3\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad3bb84717cf471aaad0cf\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad36ce4717cf471aaad0bf\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        }\n    },\n    \"FileMorbidityCondition\": {\n        \"66aaa9e9e6f5802145ab051c\": \"Prediabetic \\nBlood Pressure: Hypotension \\n\",\n        \"66ad2d234717cf471aaad0b7\": \"Prediabetic \\n\",\n        \"66ad35584717cf471aaad0bd\": \"Prediabetic \\n\",\n        \"66ad39404717cf471aaad0cb\": \"Prediabetic \\n\",\n        \"66ad2a684717cf471aaad0b1\": \"Prediabetic \\n\",\n        \"66ad2fce4717cf471aaad0bb\": \"Prediabetic \\n\",\n        \"66ad37b74717cf471aaad0c3\": \"Prediabetic \\n\",\n        \"66ad3bb84717cf471aaad0cf\": \"Prediabetic \\n\",\n        \"66ad36ce4717cf471aaad0bf\": \"Prediabetic \\n\"\n    },\n    \"DateOfBirth\": \"1987-03-14\",\n    \"DieticianId\": 221,\n    \"Vitals\": {\n        \"66aaa9e9e6f5802145ab051c\": {\n            \"Weight\": 0,\n            \"Height\": 0,\n            \"Temperature\": 0,\n            \"SP\": 0,\n            \"DP\": 0\n        }\n    },\n    \"LastVisitDate\": \"2024-07-31T21:17:29.088+00:00\"\n}"
						}
					]
				},
				{
					"name": "update patient add new report with no auth",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo",
									"value": "{ \"FirstName\": \"{{Patient_FirstName}}\",\n\"LastName\": \"{{Patient_LastName}}\",\n\"ContactNumber\": \"{{Patient_ContactNumber}}\",\n\"Email\": \"{{Patient_Email}}\",\n\"Allergy\":\"{{Patient_Allergy}}\",\n\"FoodPreference\": \"{{Patient_FoodPreference}}\",\n\"CuisineCategory\":\"{{Patient_CuisineCategory}}\",\n\"DateOfBirth\": \"{{Patient_DateOfBirth}}\"}",
									"type": "text"
								},
								{
									"key": "file",
									"type": "file",
									"src": []
								},
								{
									"key": "PtInfo",
									"value": "\n",
									"type": "text",
									"disabled": true
								},
								{
									"key": "file",
									"type": "file",
									"src": [],
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{baseURL}}/patient/newReports/{{patientId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"patient",
								"newReports",
								"{{patientId}}"
							]
						}
					},
					"response": [
						{
							"name": "Create Patient 2 Copy",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"malli\",\n\"LastName\": \"malli\",\n\"ContactNumber\": \"9867345989\",\n\"Email\": \"smartdiet1@gmail.com\",\n\"Allergy\": \"ALMOND\",\n\"FoodPreference\": \"Jain\",\n\"CuisineCategory\":\"rajasthani\",\n\"DateOfBirth\": \"1987-03-14\"\n}",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef4f81e-6866-4e80-b96a-b1a87c11c05d"
										},
										{
											"key": "PtInfo",
											"value": " { \"FirstName\": \"Ram\",\n\"LastName\": \"Setu\",\n\"ContactNumber\": \"9009089789\",\n\"Email\": \"ram@gmail.com\",\n\"Allergy\": \"Peanuts\",\n\"FoodPreference\": \"NonVeg\",\n\"CuisineCategory\":\"sindhi\",\n\"DateOfBirth\": \"1987-02-14\"\n}\n",
											"type": "text",
											"disabled": true
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef50041-b0cf-4520-834f-a4054daded29",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/patient/33\n",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"patient",
										"33\n"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722629047&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=8RqX%2BqL%2FJeVJs2s0urHTHFh9ACsKsy25ugRJpKoNrGQ%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722629047&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=8RqX%2BqL%2FJeVJs2s0urHTHFh9ACsKsy25ugRJpKoNrGQ%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 02 Aug 2024 20:04:08 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"patientId\": 33,\n    \"FirstName\": \"malli\",\n    \"LastName\": \"malli\",\n    \"ContactNumber\": \"9867345989\",\n    \"Email\": \"smartdiet1@gmail.com\",\n    \"Allergy\": \"ALMOND\",\n    \"FoodPreference\": \"Jain\",\n    \"CuisineCategory\": \"rajasthani\",\n    \"FileMorbidity\": {\n        \"66aaa9e9e6f5802145ab051c\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2d234717cf471aaad0b7\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad35584717cf471aaad0bd\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad39404717cf471aaad0cb\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2a684717cf471aaad0b1\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2fce4717cf471aaad0bb\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad37b74717cf471aaad0c3\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad3bb84717cf471aaad0cf\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad36ce4717cf471aaad0bf\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        }\n    },\n    \"FileMorbidityCondition\": {\n        \"66aaa9e9e6f5802145ab051c\": \"Prediabetic \\nBlood Pressure: Hypotension \\n\",\n        \"66ad2d234717cf471aaad0b7\": \"Prediabetic \\n\",\n        \"66ad35584717cf471aaad0bd\": \"Prediabetic \\n\",\n        \"66ad39404717cf471aaad0cb\": \"Prediabetic \\n\",\n        \"66ad2a684717cf471aaad0b1\": \"Prediabetic \\n\",\n        \"66ad2fce4717cf471aaad0bb\": \"Prediabetic \\n\",\n        \"66ad37b74717cf471aaad0c3\": \"Prediabetic \\n\",\n        \"66ad3bb84717cf471aaad0cf\": \"Prediabetic \\n\",\n        \"66ad36ce4717cf471aaad0bf\": \"Prediabetic \\n\"\n    },\n    \"DateOfBirth\": \"1987-03-14\",\n    \"DieticianId\": 221,\n    \"Vitals\": {\n        \"66aaa9e9e6f5802145ab051c\": {\n            \"Weight\": 0,\n            \"Height\": 0,\n            \"Temperature\": 0,\n            \"SP\": 0,\n            \"DP\": 0\n        }\n    },\n    \"LastVisitDate\": \"2024-07-31T21:17:29.088+00:00\"\n}"
						}
					]
				},
				{
					"name": "update patient add new report  with vitals",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Vitals key should be present in the response\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.have.property('Vitals');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Vitals key contains expected subfields\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    \r",
									"    pm.expect(jsonData.Vitals).to.exist;   \r",
									"    pm.expect(jsonData.Vitals.Weight).to.equal(pm.iterationData(\"patient_Weight\"));\r",
									"     pm.expect(jsonData.Vitals.Height).to.equal(pm.iterationData(\"patient_Height\"));\r",
									"    pm.expect(jsonData.Vitals.Temperature).to.equal(pm.iterationData(\"patient_Temperature\"));\r",
									"    pm.expect(jsonData.Vitals.Sp).to.equal(pm.iterationData('patient_SP'));\r",
									"    pm.expect(jsonData.Vitals.DP).to.equal(pm.iterationData('patient_DP'));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dieticianToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo",
									"value": "{ \"FirstName\": \"{{Patient_FirstName}}\",\n\"LastName\": \"{{Patient_LastName}}\",\n\"ContactNumber\": \"{{Patient_ContactNumber}}\",\n\"Email\": \"{{Patient_Email}}\",\n\"Allergy\":\"{{Patient_Allergy}}\",\n\"FoodPreference\": \"{{Patient_FoodPreference}}\",\n\"CuisineCategory\":\"{{Patient_CuisineCategory}}\",\n\"DateOfBirth\": \"{{Patient_DateOfBirth}}\"}",
									"type": "text"
								},
								{
									"key": "file",
									"type": "file",
									"src": "{{patient_update_newfile1}}"
								},
								{
									"key": "vitals",
									"value": "{ \"Weight\" : {{patient_Weight}},\n\"Height\" : {{patient_Height}},\n\"Temperature\" :{{patient_Temperature}} ,\n\"SP\" :{{patient_SP}},\n\"DP\" :{{patient_DP}}\n}\n",
									"type": "text"
								},
								{
									"key": "file",
									"type": "file",
									"src": [],
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{baseURL}}/patient/newReports/{{patientId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"patient",
								"newReports",
								"{{patientId}}"
							]
						}
					},
					"response": [
						{
							"name": "Create Patient 2 Copy",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"malli\",\n\"LastName\": \"malli\",\n\"ContactNumber\": \"9867345989\",\n\"Email\": \"smartdiet1@gmail.com\",\n\"Allergy\": \"ALMOND\",\n\"FoodPreference\": \"Jain\",\n\"CuisineCategory\":\"rajasthani\",\n\"DateOfBirth\": \"1987-03-14\"\n}",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef4f81e-6866-4e80-b96a-b1a87c11c05d"
										},
										{
											"key": "PtInfo",
											"value": " { \"FirstName\": \"Ram\",\n\"LastName\": \"Setu\",\n\"ContactNumber\": \"9009089789\",\n\"Email\": \"ram@gmail.com\",\n\"Allergy\": \"Peanuts\",\n\"FoodPreference\": \"NonVeg\",\n\"CuisineCategory\":\"sindhi\",\n\"DateOfBirth\": \"1987-02-14\"\n}\n",
											"type": "text",
											"disabled": true
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef50041-b0cf-4520-834f-a4054daded29",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/patient/33\n",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"patient",
										"33\n"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722629047&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=8RqX%2BqL%2FJeVJs2s0urHTHFh9ACsKsy25ugRJpKoNrGQ%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722629047&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=8RqX%2BqL%2FJeVJs2s0urHTHFh9ACsKsy25ugRJpKoNrGQ%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 02 Aug 2024 20:04:08 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"patientId\": 33,\n    \"FirstName\": \"malli\",\n    \"LastName\": \"malli\",\n    \"ContactNumber\": \"9867345989\",\n    \"Email\": \"smartdiet1@gmail.com\",\n    \"Allergy\": \"ALMOND\",\n    \"FoodPreference\": \"Jain\",\n    \"CuisineCategory\": \"rajasthani\",\n    \"FileMorbidity\": {\n        \"66aaa9e9e6f5802145ab051c\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2d234717cf471aaad0b7\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad35584717cf471aaad0bd\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad39404717cf471aaad0cb\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2a684717cf471aaad0b1\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2fce4717cf471aaad0bb\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad37b74717cf471aaad0c3\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad3bb84717cf471aaad0cf\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad36ce4717cf471aaad0bf\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        }\n    },\n    \"FileMorbidityCondition\": {\n        \"66aaa9e9e6f5802145ab051c\": \"Prediabetic \\nBlood Pressure: Hypotension \\n\",\n        \"66ad2d234717cf471aaad0b7\": \"Prediabetic \\n\",\n        \"66ad35584717cf471aaad0bd\": \"Prediabetic \\n\",\n        \"66ad39404717cf471aaad0cb\": \"Prediabetic \\n\",\n        \"66ad2a684717cf471aaad0b1\": \"Prediabetic \\n\",\n        \"66ad2fce4717cf471aaad0bb\": \"Prediabetic \\n\",\n        \"66ad37b74717cf471aaad0c3\": \"Prediabetic \\n\",\n        \"66ad3bb84717cf471aaad0cf\": \"Prediabetic \\n\",\n        \"66ad36ce4717cf471aaad0bf\": \"Prediabetic \\n\"\n    },\n    \"DateOfBirth\": \"1987-03-14\",\n    \"DieticianId\": 221,\n    \"Vitals\": {\n        \"66aaa9e9e6f5802145ab051c\": {\n            \"Weight\": 0,\n            \"Height\": 0,\n            \"Temperature\": 0,\n            \"SP\": 0,\n            \"DP\": 0\n        }\n    },\n    \"LastVisitDate\": \"2024-07-31T21:17:29.088+00:00\"\n}"
						}
					]
				},
				{
					"name": "get patient morbidity details",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present and correct\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"\r",
									"const jsonData= pm.response.json();\r",
									"pm.test(\"Response has patientId key\", function () {\r",
									"    pm.expect(jsonData).to.have.property('patientId');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dieticianToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseURL}}/patient/testReports/{{patientId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"patient",
								"testReports",
								"{{patientId}}"
							]
						}
					},
					"response": [
						{
							"name": "Create Patient 2 Copy",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"malli\",\n\"LastName\": \"malli\",\n\"ContactNumber\": \"9867345989\",\n\"Email\": \"smartdiet1@gmail.com\",\n\"Allergy\": \"ALMOND\",\n\"FoodPreference\": \"Jain\",\n\"CuisineCategory\":\"rajasthani\",\n\"DateOfBirth\": \"1987-03-14\"\n}",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef4f81e-6866-4e80-b96a-b1a87c11c05d"
										},
										{
											"key": "PtInfo",
											"value": " { \"FirstName\": \"Ram\",\n\"LastName\": \"Setu\",\n\"ContactNumber\": \"9009089789\",\n\"Email\": \"ram@gmail.com\",\n\"Allergy\": \"Peanuts\",\n\"FoodPreference\": \"NonVeg\",\n\"CuisineCategory\":\"sindhi\",\n\"DateOfBirth\": \"1987-02-14\"\n}\n",
											"type": "text",
											"disabled": true
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef50041-b0cf-4520-834f-a4054daded29",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/patient/33\n",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"patient",
										"33\n"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722629047&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=8RqX%2BqL%2FJeVJs2s0urHTHFh9ACsKsy25ugRJpKoNrGQ%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722629047&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=8RqX%2BqL%2FJeVJs2s0urHTHFh9ACsKsy25ugRJpKoNrGQ%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 02 Aug 2024 20:04:08 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"patientId\": 33,\n    \"FirstName\": \"malli\",\n    \"LastName\": \"malli\",\n    \"ContactNumber\": \"9867345989\",\n    \"Email\": \"smartdiet1@gmail.com\",\n    \"Allergy\": \"ALMOND\",\n    \"FoodPreference\": \"Jain\",\n    \"CuisineCategory\": \"rajasthani\",\n    \"FileMorbidity\": {\n        \"66aaa9e9e6f5802145ab051c\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2d234717cf471aaad0b7\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad35584717cf471aaad0bd\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad39404717cf471aaad0cb\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2a684717cf471aaad0b1\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2fce4717cf471aaad0bb\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad37b74717cf471aaad0c3\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad3bb84717cf471aaad0cf\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad36ce4717cf471aaad0bf\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        }\n    },\n    \"FileMorbidityCondition\": {\n        \"66aaa9e9e6f5802145ab051c\": \"Prediabetic \\nBlood Pressure: Hypotension \\n\",\n        \"66ad2d234717cf471aaad0b7\": \"Prediabetic \\n\",\n        \"66ad35584717cf471aaad0bd\": \"Prediabetic \\n\",\n        \"66ad39404717cf471aaad0cb\": \"Prediabetic \\n\",\n        \"66ad2a684717cf471aaad0b1\": \"Prediabetic \\n\",\n        \"66ad2fce4717cf471aaad0bb\": \"Prediabetic \\n\",\n        \"66ad37b74717cf471aaad0c3\": \"Prediabetic \\n\",\n        \"66ad3bb84717cf471aaad0cf\": \"Prediabetic \\n\",\n        \"66ad36ce4717cf471aaad0bf\": \"Prediabetic \\n\"\n    },\n    \"DateOfBirth\": \"1987-03-14\",\n    \"DieticianId\": 221,\n    \"Vitals\": {\n        \"66aaa9e9e6f5802145ab051c\": {\n            \"Weight\": 0,\n            \"Height\": 0,\n            \"Temperature\": 0,\n            \"SP\": 0,\n            \"DP\": 0\n        }\n    },\n    \"LastVisitDate\": \"2024-07-31T21:17:29.088+00:00\"\n}"
						}
					]
				},
				{
					"name": "get patient morbidity details with invalid endpoints",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Content-Type is present and correct\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dieticianToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseURL}}/patient/testeports/{{patientId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"patient",
								"testeports",
								"{{patientId}}"
							]
						}
					},
					"response": [
						{
							"name": "Create Patient 2 Copy",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"malli\",\n\"LastName\": \"malli\",\n\"ContactNumber\": \"9867345989\",\n\"Email\": \"smartdiet1@gmail.com\",\n\"Allergy\": \"ALMOND\",\n\"FoodPreference\": \"Jain\",\n\"CuisineCategory\":\"rajasthani\",\n\"DateOfBirth\": \"1987-03-14\"\n}",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef4f81e-6866-4e80-b96a-b1a87c11c05d"
										},
										{
											"key": "PtInfo",
											"value": " { \"FirstName\": \"Ram\",\n\"LastName\": \"Setu\",\n\"ContactNumber\": \"9009089789\",\n\"Email\": \"ram@gmail.com\",\n\"Allergy\": \"Peanuts\",\n\"FoodPreference\": \"NonVeg\",\n\"CuisineCategory\":\"sindhi\",\n\"DateOfBirth\": \"1987-02-14\"\n}\n",
											"type": "text",
											"disabled": true
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef50041-b0cf-4520-834f-a4054daded29",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/patient/33\n",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"patient",
										"33\n"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722629047&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=8RqX%2BqL%2FJeVJs2s0urHTHFh9ACsKsy25ugRJpKoNrGQ%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722629047&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=8RqX%2BqL%2FJeVJs2s0urHTHFh9ACsKsy25ugRJpKoNrGQ%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 02 Aug 2024 20:04:08 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"patientId\": 33,\n    \"FirstName\": \"malli\",\n    \"LastName\": \"malli\",\n    \"ContactNumber\": \"9867345989\",\n    \"Email\": \"smartdiet1@gmail.com\",\n    \"Allergy\": \"ALMOND\",\n    \"FoodPreference\": \"Jain\",\n    \"CuisineCategory\": \"rajasthani\",\n    \"FileMorbidity\": {\n        \"66aaa9e9e6f5802145ab051c\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2d234717cf471aaad0b7\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad35584717cf471aaad0bd\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad39404717cf471aaad0cb\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2a684717cf471aaad0b1\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2fce4717cf471aaad0bb\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad37b74717cf471aaad0c3\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad3bb84717cf471aaad0cf\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad36ce4717cf471aaad0bf\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        }\n    },\n    \"FileMorbidityCondition\": {\n        \"66aaa9e9e6f5802145ab051c\": \"Prediabetic \\nBlood Pressure: Hypotension \\n\",\n        \"66ad2d234717cf471aaad0b7\": \"Prediabetic \\n\",\n        \"66ad35584717cf471aaad0bd\": \"Prediabetic \\n\",\n        \"66ad39404717cf471aaad0cb\": \"Prediabetic \\n\",\n        \"66ad2a684717cf471aaad0b1\": \"Prediabetic \\n\",\n        \"66ad2fce4717cf471aaad0bb\": \"Prediabetic \\n\",\n        \"66ad37b74717cf471aaad0c3\": \"Prediabetic \\n\",\n        \"66ad3bb84717cf471aaad0cf\": \"Prediabetic \\n\",\n        \"66ad36ce4717cf471aaad0bf\": \"Prediabetic \\n\"\n    },\n    \"DateOfBirth\": \"1987-03-14\",\n    \"DieticianId\": 221,\n    \"Vitals\": {\n        \"66aaa9e9e6f5802145ab051c\": {\n            \"Weight\": 0,\n            \"Height\": 0,\n            \"Temperature\": 0,\n            \"SP\": 0,\n            \"DP\": 0\n        }\n    },\n    \"LastVisitDate\": \"2024-07-31T21:17:29.088+00:00\"\n}"
						}
					]
				},
				{
					"name": "get patient morbidity details with unauthorize",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Check for error message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.exist;\r",
									"    pm.expect(jsonData.error).to.equal(\"Unauthorized\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check for timestamp\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.timestamp).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Print response body\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    console.log(responseJson);\r",
									"});\r",
									"\r",
									"pm.test(\"Print specific value from JSON response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    console.log(jsonData.timestamp);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseURL}}/patient/testReports/{{patientId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"patient",
								"testReports",
								"{{patientId}}"
							]
						}
					},
					"response": [
						{
							"name": "Create Patient 2 Copy",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"malli\",\n\"LastName\": \"malli\",\n\"ContactNumber\": \"9867345989\",\n\"Email\": \"smartdiet1@gmail.com\",\n\"Allergy\": \"ALMOND\",\n\"FoodPreference\": \"Jain\",\n\"CuisineCategory\":\"rajasthani\",\n\"DateOfBirth\": \"1987-03-14\"\n}",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef4f81e-6866-4e80-b96a-b1a87c11c05d"
										},
										{
											"key": "PtInfo",
											"value": " { \"FirstName\": \"Ram\",\n\"LastName\": \"Setu\",\n\"ContactNumber\": \"9009089789\",\n\"Email\": \"ram@gmail.com\",\n\"Allergy\": \"Peanuts\",\n\"FoodPreference\": \"NonVeg\",\n\"CuisineCategory\":\"sindhi\",\n\"DateOfBirth\": \"1987-02-14\"\n}\n",
											"type": "text",
											"disabled": true
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef50041-b0cf-4520-834f-a4054daded29",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/patient/33\n",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"patient",
										"33\n"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722629047&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=8RqX%2BqL%2FJeVJs2s0urHTHFh9ACsKsy25ugRJpKoNrGQ%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722629047&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=8RqX%2BqL%2FJeVJs2s0urHTHFh9ACsKsy25ugRJpKoNrGQ%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 02 Aug 2024 20:04:08 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"patientId\": 33,\n    \"FirstName\": \"malli\",\n    \"LastName\": \"malli\",\n    \"ContactNumber\": \"9867345989\",\n    \"Email\": \"smartdiet1@gmail.com\",\n    \"Allergy\": \"ALMOND\",\n    \"FoodPreference\": \"Jain\",\n    \"CuisineCategory\": \"rajasthani\",\n    \"FileMorbidity\": {\n        \"66aaa9e9e6f5802145ab051c\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2d234717cf471aaad0b7\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad35584717cf471aaad0bd\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad39404717cf471aaad0cb\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2a684717cf471aaad0b1\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2fce4717cf471aaad0bb\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad37b74717cf471aaad0c3\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad3bb84717cf471aaad0cf\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad36ce4717cf471aaad0bf\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        }\n    },\n    \"FileMorbidityCondition\": {\n        \"66aaa9e9e6f5802145ab051c\": \"Prediabetic \\nBlood Pressure: Hypotension \\n\",\n        \"66ad2d234717cf471aaad0b7\": \"Prediabetic \\n\",\n        \"66ad35584717cf471aaad0bd\": \"Prediabetic \\n\",\n        \"66ad39404717cf471aaad0cb\": \"Prediabetic \\n\",\n        \"66ad2a684717cf471aaad0b1\": \"Prediabetic \\n\",\n        \"66ad2fce4717cf471aaad0bb\": \"Prediabetic \\n\",\n        \"66ad37b74717cf471aaad0c3\": \"Prediabetic \\n\",\n        \"66ad3bb84717cf471aaad0cf\": \"Prediabetic \\n\",\n        \"66ad36ce4717cf471aaad0bf\": \"Prediabetic \\n\"\n    },\n    \"DateOfBirth\": \"1987-03-14\",\n    \"DieticianId\": 221,\n    \"Vitals\": {\n        \"66aaa9e9e6f5802145ab051c\": {\n            \"Weight\": 0,\n            \"Height\": 0,\n            \"Temperature\": 0,\n            \"SP\": 0,\n            \"DP\": 0\n        }\n    },\n    \"LastVisitDate\": \"2024-07-31T21:17:29.088+00:00\"\n}"
						}
					]
				},
				{
					"name": "Get all Patients",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response schema is valid\", function () {",
									"",
									"  var schema = {",
									"    type: \"array\",",
									"    items: {",
									"      type: \"object\",",
									"      properties: {",
									"        patientId: { type: \"number\" },",
									"        FirstName: { type: \"string\" },",
									"        LastName: { type: \"string\" },",
									"        ContactNumber: { type: \"string\" },",
									"        Email: { type: \"string\", format: \"email\" },",
									"        Allergy: { type: \"string\" },",
									"        FoodPreference: { type: \"string\" },",
									"        CuisineCategory: { type: \"string\" },",
									"        FileMorbidity: { type: \"object\" },",
									"        FileMorbidityCondition: { type: \"object\" },",
									"        DateOfBirth: { type: \"string\" },",
									"        DieticianId: { type: \"number\" },",
									"        Vitals: { type: \"object\" },",
									"        LastVisitDate: { type: \"string\" }",
									"      },",
									"      required: [\"patientId\", \"FirstName\", \"LastName\", \"ContactNumber\", \"Email\", \"Allergy\", \"FoodPreference\", \"CuisineCategory\", \"FileMorbidity\", \"FileMorbidityCondition\", \"DateOfBirth\", \"DieticianId\", \"Vitals\", \"LastVisitDate\"]",
									"    }",
									"  };",
									"",
									"  var response = pm.response.json();",
									"  //pm.expect(tv4.validate(response, schema)).to.be.true;",
									"  pm.expect(response).to.have.jsonSchema(schema);",
									"});",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"  pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dieticianToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseURL}}/patient",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"patient"
							]
						}
					},
					"response": [
						{
							"name": "Get all Patients",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"url": {
									"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/patient",
									"protocol": "https",
									"host": [
										"dietician-july-api-hackathon-80f2590665cc",
										"herokuapp",
										"com"
									],
									"path": [
										"dietician",
										"patient"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722718172&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=ahGtYBw1IlnAvUMuJR8mSjY6IwR9Bwf72jKVHIGqNlI%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722718172&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=ahGtYBw1IlnAvUMuJR8mSjY6IwR9Bwf72jKVHIGqNlI%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 03 Aug 2024 20:49:32 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"patientId\": 33,\n        \"FirstName\": \"malli\",\n        \"LastName\": \"malli\",\n        \"ContactNumber\": \"9867345989\",\n        \"Email\": \"smartdiet1@gmail.com\",\n        \"Allergy\": \"ALMOND\",\n        \"FoodPreference\": \"Jain\",\n        \"CuisineCategory\": \"rajasthani\",\n        \"FileMorbidity\": {\n            \"66ad684d4717cf471aaad175\": {},\n            \"66ad6aa04717cf471aaad179\": {},\n            \"66ad7b894717cf471aaad197\": {\n                \"HbA1c\": \"6.5 %\",\n                \"Average Glucose\": \"131.0 mg/dl\"\n            },\n            \"66ad37b74717cf471aaad0c3\": {\n                \"HbA1c\": \"6.5 %\",\n                \"Average Glucose\": \"131.0 mg/dl\"\n            },\n            \"66ad3bb84717cf471aaad0cf\": {\n                \"HbA1c\": \"6.5 %\",\n                \"Average Glucose\": \"131.0 mg/dl\"\n            },\n            \"66ad65e14717cf471aaad16d\": {\n                \"HbA1c\": \"6.5 %\",\n                \"Average Glucose\": \"131.0 mg/dl\"\n            },\n            \"66ad7bbe4717cf471aaad199\": {\n                \"HbA1c\": \"6.5 %\",\n                \"Average Glucose\": \"131.0 mg/dl\"\n            },\n            \"66ad36ce4717cf471aaad0bf\": {\n                \"HbA1c\": \"6.5 %\",\n                \"Average Glucose\": \"131.0 mg/dl\"\n            },\n            \"66aaa9e9e6f5802145ab051c\": {\n                \"HbA1c\": \"6.5 %\",\n                \"Average Glucose\": \"131.0 mg/dl\"\n            },\n            \"66ad2d234717cf471aaad0b7\": {\n                \"HbA1c\": \"6.5 %\",\n                \"Average Glucose\": \"131.0 mg/dl\"\n            },\n            \"66ad6c794717cf471aaad17b\": {\n                \"HbA1c\": \"6.5 %\",\n                \"Average Glucose\": \"131.0 mg/dl\"\n            },\n            \"66ad35584717cf471aaad0bd\": {\n                \"HbA1c\": \"6.5 %\",\n                \"Average Glucose\": \"131.0 mg/dl\"\n            },\n            \"66ad39404717cf471aaad0cb\": {\n                \"HbA1c\": \"6.5 %\",\n                \"Average Glucose\": \"131.0 mg/dl\"\n            },\n            \"66ad2a684717cf471aaad0b1\": {\n                \"HbA1c\": \"6.5 %\",\n                \"Average Glucose\": \"131.0 mg/dl\"\n            },\n            \"66ad2fce4717cf471aaad0bb\": {\n                \"HbA1c\": \"6.5 %\",\n                \"Average Glucose\": \"131.0 mg/dl\"\n            },\n            \"66ad67a84717cf471aaad173\": {\n                \"HbA1c\": \"6.5 %\",\n                \"Average Glucose\": \"131.0 mg/dl\"\n            },\n            \"66ad67a84717cf471aaad171\": {},\n            \"66ad6c8f4717cf471aaad17d\": {}\n        },\n        \"FileMorbidityCondition\": {\n            \"66ad684d4717cf471aaad175\": \"\",\n            \"66ad6aa04717cf471aaad179\": \"\",\n            \"66ad7b894717cf471aaad197\": \"Prediabetic \\n\",\n            \"66ad37b74717cf471aaad0c3\": \"Prediabetic \\n\",\n            \"66ad3bb84717cf471aaad0cf\": \"Prediabetic \\n\",\n            \"66ad65e14717cf471aaad16d\": \"Prediabetic \\n\",\n            \"66ad7bbe4717cf471aaad199\": \"Prediabetic \\n\",\n            \"66ad36ce4717cf471aaad0bf\": \"Prediabetic \\n\",\n            \"66aaa9e9e6f5802145ab051c\": \"Prediabetic \\nBlood Pressure: Hypotension \\n\",\n            \"66ad2d234717cf471aaad0b7\": \"Prediabetic \\n\",\n            \"66ad6c794717cf471aaad17b\": \"Prediabetic \\n\",\n            \"66ad35584717cf471aaad0bd\": \"Prediabetic \\n\",\n            \"66ad39404717cf471aaad0cb\": \"Prediabetic \\n\",\n            \"66ad2a684717cf471aaad0b1\": \"Prediabetic \\n\",\n            \"66ad2fce4717cf471aaad0bb\": \"Prediabetic \\n\",\n            \"66ad67a84717cf471aaad173\": \"Prediabetic \\n\",\n            \"66ad67a84717cf471aaad171\": \"\",\n            \"66ad6c8f4717cf471aaad17d\": \"\"\n        },\n        \"DateOfBirth\": \"1987-03-14\",\n        \"DieticianId\": 221,\n        \"Vitals\": {\n            \"66aaa9e9e6f5802145ab051c\": {\n                \"Weight\": 0,\n                \"Height\": 0,\n                \"Temperature\": 0,\n                \"SP\": 0,\n                \"DP\": 0\n            }\n        },\n        \"LastVisitDate\": \"2024-07-31T21:17:29.088+00:00\"\n    },\n    {\n        \"patientId\": 129,\n        \"FirstName\": \"Ram\",\n        \"LastName\": \"Setu\",\n        \"ContactNumber\": \"9009089789\",\n        \"Email\": \"ram@gmail.com\",\n        \"Allergy\": \"Peanut\",\n        \"FoodPreference\": \"NonVeg\",\n        \"CuisineCategory\": \"sindhi\",\n        \"FileMorbidity\": {\n            \"66ab9db93e6c022b073da1f5\": {\n                \"T3\": \"6.3 ng/mL\",\n                \"T4\": \"15.7 µg/dL\",\n                \"TSH\": \"0.016 µIU/mL\"\n            }\n        },\n        \"FileMorbidityCondition\": {\n            \"66ab9db93e6c022b073da1f5\": \"Thyroid: Hyperthyroidism \\nBlood Pressure: Hypotension \\n\"\n        },\n        \"DateOfBirth\": \"1987-02-14\",\n        \"DieticianId\": 221,\n        \"Vitals\": {\n            \"66ab9db93e6c022b073da1f5\": {\n                \"Weight\": 0,\n                \"Height\": 0,\n                \"Temperature\": 0,\n                \"SP\": 0,\n                \"DP\": 0\n            }\n        },\n        \"LastVisitDate\": \"2024-08-01T14:37:45.435+00:00\"\n    },\n    {\n        \"patientId\": 132,\n        \"FirstName\": \"kristy\",\n        \"LastName\": \"john\",\n        \"ContactNumber\": \"9009089777\",\n        \"Email\": \"john@gmail.com\",\n        \"Allergy\": \"milk\",\n        \"FoodPreference\": \"vegan\",\n        \"CuisineCategory\": \"goan\",\n        \"FileMorbidity\": {\n            \"66aba0e93e6c022b073da203\": {\n                \"T4\": \"1.22 µg/dl\",\n                \"TSH\": \"100.0 mIU/L\"\n            }\n        },\n        \"FileMorbidityCondition\": {\n            \"66aba0e93e6c022b073da203\": \"Thyroid: Hypothyroidism \\nBlood Pressure: Hypotension \\n\"\n        },\n        \"DateOfBirth\": \"1985-03-17\",\n        \"DieticianId\": 221,\n        \"Vitals\": {\n            \"66aba0e93e6c022b073da203\": {\n                \"Weight\": 0,\n                \"Height\": 0,\n                \"Temperature\": 0,\n                \"SP\": 0,\n                \"DP\": 0\n            }\n        },\n        \"LastVisitDate\": \"2024-08-01T14:51:21.226+00:00\"\n    },\n    {\n        \"patientId\": 135,\n        \"FirstName\": \"tim\",\n        \"LastName\": \"kim\",\n        \"ContactNumber\": \"9029089777\",\n        \"Email\": \"kim@gmail.com\",\n        \"Allergy\": \"pecan\",\n        \"FoodPreference\": \"vegan\",\n        \"CuisineCategory\": \"bengali\",\n        \"FileMorbidity\": {\n            \"66aba3e33e6c022b073da20f\": {\n                \"T3\": \"6.3 ng/mL\",\n                \"T4\": \"15.7 µg/dL\",\n                \"TSH\": \"0.016 µIU/mL\"\n            },\n            \"66aba3e33e6c022b073da20b\": {\n                \"T3\": \"6.3 ng/mL\",\n                \"T4\": \"15.7 µg/dL\",\n                \"TSH\": \"0.016 µIU/mL\"\n            }\n        },\n        \"FileMorbidityCondition\": {\n            \"66aba3e33e6c022b073da20f\": \"Thyroid: Hyperthyroidism \\n\",\n            \"66aba3e33e6c022b073da20b\": \"Thyroid: Hyperthyroidism \\nBlood Pressure: Hypotension \\n\"\n        },\n        \"DateOfBirth\": \"1987-04-27\",\n        \"DieticianId\": 221,\n        \"Vitals\": {\n            \"66aba3e33e6c022b073da20b\": {\n                \"Weight\": 0,\n                \"Height\": 0,\n                \"Temperature\": 0,\n                \"SP\": 0,\n                \"DP\": 0\n            }\n        },\n        \"LastVisitDate\": \"2024-08-01T15:04:03.119+00:00\"\n    },\n    {\n        \"patientId\": 137,\n        \"FirstName\": \"Mary\",\n        \"LastName\": \"Singh\",\n        \"ContactNumber\": \"9005089789\",\n        \"Email\": \"mary@gmail.com\",\n        \"Allergy\": \"PEANUT\",\n        \"FoodPreference\": \"Vegan\",\n        \"CuisineCategory\": \"Indian\",\n        \"FileMorbidity\": {\n            \"66aba7c73e6c022b073da219\": {\n                \"HbA1c\": \"6.5 %\",\n                \"Average Glucose\": \"131.0 mg/dl\"\n            },\n            \"66aba7c73e6c022b073da21b\": {\n                \"T3\": \"6.3 ng/mL\",\n                \"T4\": \"15.7 µg/dL\",\n                \"TSH\": \"0.016 µIU/mL\"\n            }\n        },\n        \"FileMorbidityCondition\": {\n            \"66aba7c73e6c022b073da219\": \"Prediabetic \\nBlood Pressure: Hypotension \\n\",\n            \"66aba7c73e6c022b073da21b\": \"Thyroid: Hyperthyroidism \\n\"\n        },\n        \"DateOfBirth\": \"1977-02-14\",\n        \"DieticianId\": 221,\n        \"Vitals\": {\n            \"66aba7c73e6c022b073da219\": {\n                \"Weight\": 0,\n                \"Height\": 0,\n                \"Temperature\": 0,\n                \"SP\": 0,\n                \"DP\": 0\n            }\n        },\n        \"LastVisitDate\": \"2024-08-01T15:20:39.153+00:00\"\n    },\n    {\n        \"patientId\": 187,\n        \"FirstName\": \"jimmy\",\n        \"LastName\": \"Sinn\",\n        \"ContactNumber\": \"9005099789\",\n        \"Email\": \"jimmy@gmail.com\",\n        \"Allergy\": \"walnut\",\n        \"FoodPreference\": \"Vegetarian\",\n        \"CuisineCategory\": \"bihari\",\n        \"FileMorbidity\": {\n            \"66abfac03e6c022b073da291\": {\n                \"T3\": \"6.3 ng/mL\",\n                \"T4\": \"15.7 µg/dL\",\n                \"TSH\": \"0.016 µIU/mL\"\n            },\n            \"66abfac03e6c022b073da28f\": {\n                \"HbA1c\": \"6.5 %\",\n                \"Average Glucose\": \"131.0 mg/dl\"\n            }\n        },\n        \"FileMorbidityCondition\": {\n            \"66abfac03e6c022b073da291\": \"Thyroid: Hyperthyroidism \\n\",\n            \"66abfac03e6c022b073da28f\": \"Prediabetic \\nBlood Pressure: Hypotension \\n\"\n        },\n        \"DateOfBirth\": \"1977-12-14\",\n        \"DieticianId\": 221,\n        \"Vitals\": {\n            \"66abfac03e6c022b073da28f\": {\n                \"Weight\": 0,\n                \"Height\": 0,\n                \"Temperature\": 0,\n                \"SP\": 0,\n                \"DP\": 0\n            }\n        },\n        \"LastVisitDate\": \"2024-08-01T21:14:40.717+00:00\"\n    },\n    {\n        \"patientId\": 191,\n        \"FirstName\": \"sun\",\n        \"LastName\": \"fern\",\n        \"ContactNumber\": \"9075099789\",\n        \"Email\": \"sun@gmail.com\",\n        \"Allergy\": \"pecan\",\n        \"FoodPreference\": \"Vegan\",\n        \"CuisineCategory\": \"gujarati\",\n        \"FileMorbidity\": {\n            \"66abfda13e6c022b073da29f\": {\n                \"HbA1c\": \"6.5 %\",\n                \"Average Glucose\": \"131.0 mg/dl\"\n            },\n            \"66abfda13e6c022b073da2a1\": {\n                \"T3\": \"6.3 ng/mL\",\n                \"T4\": \"15.7 µg/dL\",\n                \"TSH\": \"0.016 µIU/mL\"\n            }\n        },\n        \"FileMorbidityCondition\": {\n            \"66abfda13e6c022b073da29f\": \"Prediabetic \\nBlood Pressure: Hypotension \\n\",\n            \"66abfda13e6c022b073da2a1\": \"Thyroid: Hyperthyroidism \\n\"\n        },\n        \"DateOfBirth\": \"1977-05-14\",\n        \"DieticianId\": 221,\n        \"Vitals\": {\n            \"66abfda13e6c022b073da29f\": {\n                \"Weight\": 0,\n                \"Height\": 0,\n                \"Temperature\": 0,\n                \"SP\": 0,\n                \"DP\": 0\n            }\n        },\n        \"LastVisitDate\": \"2024-08-01T21:26:57.254+00:00\"\n    },\n    {\n        \"patientId\": 192,\n        \"FirstName\": \"suin\",\n        \"LastName\": \"fern\",\n        \"ContactNumber\": \"9075099788\",\n        \"Email\": \"suin@gmail.com\",\n        \"Allergy\": \"pecan\",\n        \"FoodPreference\": \"Vegan\",\n        \"CuisineCategory\": \"gujarati\",\n        \"FileMorbidity\": {\n            \"66abfe423e6c022b073da2a5\": {\n                \"HbA1c\": \"6.5 %\",\n                \"Average Glucose\": \"131.0 mg/dl\"\n            },\n            \"66abfe423e6c022b073da2a7\": {\n                \"T3\": \"6.3 ng/mL\",\n                \"T4\": \"15.7 µg/dL\",\n                \"TSH\": \"0.016 µIU/mL\"\n            }\n        },\n        \"FileMorbidityCondition\": {\n            \"66abfe423e6c022b073da2a5\": \"Prediabetic \\nBlood Pressure: Hypotension \\n\",\n            \"66abfe423e6c022b073da2a7\": \"Thyroid: Hyperthyroidism \\n\"\n        },\n        \"DateOfBirth\": \"1977-06-14\",\n        \"DieticianId\": 221,\n        \"Vitals\": {\n            \"66abfe423e6c022b073da2a5\": {\n                \"Weight\": 0,\n                \"Height\": 0,\n                \"Temperature\": 0,\n                \"SP\": 0,\n                \"DP\": 0\n            }\n        },\n        \"LastVisitDate\": \"2024-08-01T21:29:38.833+00:00\"\n    },\n    {\n        \"patientId\": 323,\n        \"FirstName\": \"malli\",\n        \"LastName\": \"malli\",\n        \"ContactNumber\": \"9867345986\",\n        \"Email\": \"smartdiet@gmail.com\",\n        \"Allergy\": \"soy\",\n        \"FoodPreference\": \"jain\",\n        \"CuisineCategory\": \"indian\",\n        \"FileMorbidity\": {\n            \"66ac85903e6c022b073da4b4\": {\n                \"HbA1c\": \"6.5 %\",\n                \"Average Glucose\": \"131.0 mg/dl\"\n            }\n        },\n        \"FileMorbidityCondition\": {\n            \"66ac85903e6c022b073da4b4\": \"Prediabetic \\nBlood Pressure: Hypotension \\n\"\n        },\n        \"DateOfBirth\": \"1986-02-14\",\n        \"DieticianId\": 221,\n        \"Vitals\": {\n            \"66ac85903e6c022b073da4b4\": {\n                \"Weight\": 0,\n                \"Height\": 0,\n                \"Temperature\": 0,\n                \"SP\": 0,\n                \"DP\": 0\n            }\n        },\n        \"LastVisitDate\": \"2024-08-02T07:06:56.854+00:00\"\n    },\n    {\n        \"patientId\": 324,\n        \"FirstName\": \"Talli\",\n        \"LastName\": \"malli\",\n        \"ContactNumber\": \"9867345988\",\n        \"Email\": \"smartdiet@gmail.com\",\n        \"Allergy\": \"soy\",\n        \"FoodPreference\": \"jain\",\n        \"CuisineCategory\": \"indian\",\n        \"FileMorbidity\": {\n            \"66ac862e3e6c022b073da4b6\": {\n                \"HbA1c\": \"6.5 %\",\n                \"Average Glucose\": \"131.0 mg/dl\"\n            }\n        },\n        \"FileMorbidityCondition\": {\n            \"66ac862e3e6c022b073da4b6\": \"Prediabetic \\nBlood Pressure: Hypotension \\n\"\n        },\n        \"DateOfBirth\": \"1986-03-14\",\n        \"DieticianId\": 221,\n        \"Vitals\": {\n            \"66ac862e3e6c022b073da4b6\": {\n                \"Weight\": 0,\n                \"Height\": 0,\n                \"Temperature\": 0,\n                \"SP\": 0,\n                \"DP\": 0\n            }\n        },\n        \"LastVisitDate\": \"2024-08-02T07:09:34.890+00:00\"\n    },\n    {\n        \"patientId\": 348,\n        \"FirstName\": \"mall\",\n        \"LastName\": \"mall\",\n        \"ContactNumber\": \"9968345983\",\n        \"Email\": \"smart@gmail.com\",\n        \"Allergy\": \"soy\",\n        \"FoodPreference\": \"jain\",\n        \"CuisineCategory\": \"indian\",\n        \"FileMorbidity\": {\n            \"66acfb454717cf471aaad07c\": {\n                \"HbA1c\": \"6.5 %\",\n                \"Average Glucose\": \"131.0 mg/dl\"\n            }\n        },\n        \"FileMorbidityCondition\": {\n            \"66acfb454717cf471aaad07c\": \"Prediabetic \\nBlood Pressure: Hypotension \\n\"\n        },\n        \"DateOfBirth\": \"1986-02-24\",\n        \"DieticianId\": 221,\n        \"Vitals\": {\n            \"66acfb454717cf471aaad07c\": {\n                \"Weight\": 0,\n                \"Height\": 0,\n                \"Temperature\": 0,\n                \"SP\": 0,\n                \"DP\": 0\n            }\n        },\n        \"LastVisitDate\": \"2024-08-02T15:29:09.780+00:00\"\n    }\n]"
						}
					]
				},
				{
					"name": "Get all Patients with invalid endpoints",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check for error message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.exist;\r",
									"    pm.expect(jsonData.error).to.equal(\"Not Found\");\r",
									"});\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dieticianToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseURL}}/patient",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"patient"
							]
						}
					},
					"response": [
						{
							"name": "Create Patient 2 Copy",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"malli\",\n\"LastName\": \"malli\",\n\"ContactNumber\": \"9867345989\",\n\"Email\": \"smartdiet1@gmail.com\",\n\"Allergy\": \"ALMOND\",\n\"FoodPreference\": \"Jain\",\n\"CuisineCategory\":\"rajasthani\",\n\"DateOfBirth\": \"1987-03-14\"\n}",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef4f81e-6866-4e80-b96a-b1a87c11c05d"
										},
										{
											"key": "PtInfo",
											"value": " { \"FirstName\": \"Ram\",\n\"LastName\": \"Setu\",\n\"ContactNumber\": \"9009089789\",\n\"Email\": \"ram@gmail.com\",\n\"Allergy\": \"Peanuts\",\n\"FoodPreference\": \"NonVeg\",\n\"CuisineCategory\":\"sindhi\",\n\"DateOfBirth\": \"1987-02-14\"\n}\n",
											"type": "text",
											"disabled": true
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef50041-b0cf-4520-834f-a4054daded29",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/patient/33\n",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"patient",
										"33\n"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722629047&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=8RqX%2BqL%2FJeVJs2s0urHTHFh9ACsKsy25ugRJpKoNrGQ%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722629047&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=8RqX%2BqL%2FJeVJs2s0urHTHFh9ACsKsy25ugRJpKoNrGQ%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 02 Aug 2024 20:04:08 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"patientId\": 33,\n    \"FirstName\": \"malli\",\n    \"LastName\": \"malli\",\n    \"ContactNumber\": \"9867345989\",\n    \"Email\": \"smartdiet1@gmail.com\",\n    \"Allergy\": \"ALMOND\",\n    \"FoodPreference\": \"Jain\",\n    \"CuisineCategory\": \"rajasthani\",\n    \"FileMorbidity\": {\n        \"66aaa9e9e6f5802145ab051c\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2d234717cf471aaad0b7\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad35584717cf471aaad0bd\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad39404717cf471aaad0cb\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2a684717cf471aaad0b1\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2fce4717cf471aaad0bb\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad37b74717cf471aaad0c3\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad3bb84717cf471aaad0cf\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad36ce4717cf471aaad0bf\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        }\n    },\n    \"FileMorbidityCondition\": {\n        \"66aaa9e9e6f5802145ab051c\": \"Prediabetic \\nBlood Pressure: Hypotension \\n\",\n        \"66ad2d234717cf471aaad0b7\": \"Prediabetic \\n\",\n        \"66ad35584717cf471aaad0bd\": \"Prediabetic \\n\",\n        \"66ad39404717cf471aaad0cb\": \"Prediabetic \\n\",\n        \"66ad2a684717cf471aaad0b1\": \"Prediabetic \\n\",\n        \"66ad2fce4717cf471aaad0bb\": \"Prediabetic \\n\",\n        \"66ad37b74717cf471aaad0c3\": \"Prediabetic \\n\",\n        \"66ad3bb84717cf471aaad0cf\": \"Prediabetic \\n\",\n        \"66ad36ce4717cf471aaad0bf\": \"Prediabetic \\n\"\n    },\n    \"DateOfBirth\": \"1987-03-14\",\n    \"DieticianId\": 221,\n    \"Vitals\": {\n        \"66aaa9e9e6f5802145ab051c\": {\n            \"Weight\": 0,\n            \"Height\": 0,\n            \"Temperature\": 0,\n            \"SP\": 0,\n            \"DP\": 0\n        }\n    },\n    \"LastVisitDate\": \"2024-07-31T21:17:29.088+00:00\"\n}"
						}
					]
				},
				{
					"name": "Get all Patients with unauthorize",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"content-type\");\r",
									"});\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});\r",
									"pm.test(\"Check error message\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const errorMessage = jsonData.error;\r",
									"    pm.expect(jsonData.error).to.exist;\r",
									"    pm.expect(jsonData.error).to.equal(errorMessage);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseURL}}/patient",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"patient"
							]
						}
					},
					"response": [
						{
							"name": "Create Patient 2 Copy",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"malli\",\n\"LastName\": \"malli\",\n\"ContactNumber\": \"9867345989\",\n\"Email\": \"smartdiet1@gmail.com\",\n\"Allergy\": \"ALMOND\",\n\"FoodPreference\": \"Jain\",\n\"CuisineCategory\":\"rajasthani\",\n\"DateOfBirth\": \"1987-03-14\"\n}",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef4f81e-6866-4e80-b96a-b1a87c11c05d"
										},
										{
											"key": "PtInfo",
											"value": " { \"FirstName\": \"Ram\",\n\"LastName\": \"Setu\",\n\"ContactNumber\": \"9009089789\",\n\"Email\": \"ram@gmail.com\",\n\"Allergy\": \"Peanuts\",\n\"FoodPreference\": \"NonVeg\",\n\"CuisineCategory\":\"sindhi\",\n\"DateOfBirth\": \"1987-02-14\"\n}\n",
											"type": "text",
											"disabled": true
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef50041-b0cf-4520-834f-a4054daded29",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/patient/33\n",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"patient",
										"33\n"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722629047&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=8RqX%2BqL%2FJeVJs2s0urHTHFh9ACsKsy25ugRJpKoNrGQ%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722629047&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=8RqX%2BqL%2FJeVJs2s0urHTHFh9ACsKsy25ugRJpKoNrGQ%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 02 Aug 2024 20:04:08 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"patientId\": 33,\n    \"FirstName\": \"malli\",\n    \"LastName\": \"malli\",\n    \"ContactNumber\": \"9867345989\",\n    \"Email\": \"smartdiet1@gmail.com\",\n    \"Allergy\": \"ALMOND\",\n    \"FoodPreference\": \"Jain\",\n    \"CuisineCategory\": \"rajasthani\",\n    \"FileMorbidity\": {\n        \"66aaa9e9e6f5802145ab051c\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2d234717cf471aaad0b7\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad35584717cf471aaad0bd\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad39404717cf471aaad0cb\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2a684717cf471aaad0b1\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2fce4717cf471aaad0bb\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad37b74717cf471aaad0c3\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad3bb84717cf471aaad0cf\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad36ce4717cf471aaad0bf\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        }\n    },\n    \"FileMorbidityCondition\": {\n        \"66aaa9e9e6f5802145ab051c\": \"Prediabetic \\nBlood Pressure: Hypotension \\n\",\n        \"66ad2d234717cf471aaad0b7\": \"Prediabetic \\n\",\n        \"66ad35584717cf471aaad0bd\": \"Prediabetic \\n\",\n        \"66ad39404717cf471aaad0cb\": \"Prediabetic \\n\",\n        \"66ad2a684717cf471aaad0b1\": \"Prediabetic \\n\",\n        \"66ad2fce4717cf471aaad0bb\": \"Prediabetic \\n\",\n        \"66ad37b74717cf471aaad0c3\": \"Prediabetic \\n\",\n        \"66ad3bb84717cf471aaad0cf\": \"Prediabetic \\n\",\n        \"66ad36ce4717cf471aaad0bf\": \"Prediabetic \\n\"\n    },\n    \"DateOfBirth\": \"1987-03-14\",\n    \"DieticianId\": 221,\n    \"Vitals\": {\n        \"66aaa9e9e6f5802145ab051c\": {\n            \"Weight\": 0,\n            \"Height\": 0,\n            \"Temperature\": 0,\n            \"SP\": 0,\n            \"DP\": 0\n        }\n    },\n    \"LastVisitDate\": \"2024-07-31T21:17:29.088+00:00\"\n}"
						}
					]
				},
				{
					"name": "Get all Patients with invalid baseUrl",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Check error message\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const errorMessage = jsonData.error;\r",
									"    pm.expect(jsonData.error).to.exist;\r",
									"    pm.expect(jsonData.error).to.equal(errorMessage);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dieticianToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{invalidBaseURL}}/patient",
							"host": [
								"{{invalidBaseURL}}"
							],
							"path": [
								"patient"
							]
						}
					},
					"response": [
						{
							"name": "Create Patient 2 Copy",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"malli\",\n\"LastName\": \"malli\",\n\"ContactNumber\": \"9867345989\",\n\"Email\": \"smartdiet1@gmail.com\",\n\"Allergy\": \"ALMOND\",\n\"FoodPreference\": \"Jain\",\n\"CuisineCategory\":\"rajasthani\",\n\"DateOfBirth\": \"1987-03-14\"\n}",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef4f81e-6866-4e80-b96a-b1a87c11c05d"
										},
										{
											"key": "PtInfo",
											"value": " { \"FirstName\": \"Ram\",\n\"LastName\": \"Setu\",\n\"ContactNumber\": \"9009089789\",\n\"Email\": \"ram@gmail.com\",\n\"Allergy\": \"Peanuts\",\n\"FoodPreference\": \"NonVeg\",\n\"CuisineCategory\":\"sindhi\",\n\"DateOfBirth\": \"1987-02-14\"\n}\n",
											"type": "text",
											"disabled": true
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef50041-b0cf-4520-834f-a4054daded29",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/patient/33\n",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"patient",
										"33\n"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722629047&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=8RqX%2BqL%2FJeVJs2s0urHTHFh9ACsKsy25ugRJpKoNrGQ%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722629047&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=8RqX%2BqL%2FJeVJs2s0urHTHFh9ACsKsy25ugRJpKoNrGQ%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 02 Aug 2024 20:04:08 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"patientId\": 33,\n    \"FirstName\": \"malli\",\n    \"LastName\": \"malli\",\n    \"ContactNumber\": \"9867345989\",\n    \"Email\": \"smartdiet1@gmail.com\",\n    \"Allergy\": \"ALMOND\",\n    \"FoodPreference\": \"Jain\",\n    \"CuisineCategory\": \"rajasthani\",\n    \"FileMorbidity\": {\n        \"66aaa9e9e6f5802145ab051c\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2d234717cf471aaad0b7\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad35584717cf471aaad0bd\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad39404717cf471aaad0cb\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2a684717cf471aaad0b1\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2fce4717cf471aaad0bb\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad37b74717cf471aaad0c3\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad3bb84717cf471aaad0cf\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad36ce4717cf471aaad0bf\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        }\n    },\n    \"FileMorbidityCondition\": {\n        \"66aaa9e9e6f5802145ab051c\": \"Prediabetic \\nBlood Pressure: Hypotension \\n\",\n        \"66ad2d234717cf471aaad0b7\": \"Prediabetic \\n\",\n        \"66ad35584717cf471aaad0bd\": \"Prediabetic \\n\",\n        \"66ad39404717cf471aaad0cb\": \"Prediabetic \\n\",\n        \"66ad2a684717cf471aaad0b1\": \"Prediabetic \\n\",\n        \"66ad2fce4717cf471aaad0bb\": \"Prediabetic \\n\",\n        \"66ad37b74717cf471aaad0c3\": \"Prediabetic \\n\",\n        \"66ad3bb84717cf471aaad0cf\": \"Prediabetic \\n\",\n        \"66ad36ce4717cf471aaad0bf\": \"Prediabetic \\n\"\n    },\n    \"DateOfBirth\": \"1987-03-14\",\n    \"DieticianId\": 221,\n    \"Vitals\": {\n        \"66aaa9e9e6f5802145ab051c\": {\n            \"Weight\": 0,\n            \"Height\": 0,\n            \"Temperature\": 0,\n            \"SP\": 0,\n            \"DP\": 0\n        }\n    },\n    \"LastVisitDate\": \"2024-07-31T21:17:29.088+00:00\"\n}"
						}
					]
				},
				{
					"name": "Retrieve Patient file by FileId",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.get(\"dietToken\")\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dieticianToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseURL}}/patient/testReports/viewFile/{{fileId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"patient",
								"testReports",
								"viewFile",
								"{{fileId}}"
							]
						}
					},
					"response": [
						{
							"name": "Create Patient 2 Copy",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"malli\",\n\"LastName\": \"malli\",\n\"ContactNumber\": \"9867345989\",\n\"Email\": \"smartdiet1@gmail.com\",\n\"Allergy\": \"ALMOND\",\n\"FoodPreference\": \"Jain\",\n\"CuisineCategory\":\"rajasthani\",\n\"DateOfBirth\": \"1987-03-14\"\n}",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef4f81e-6866-4e80-b96a-b1a87c11c05d"
										},
										{
											"key": "PtInfo",
											"value": " { \"FirstName\": \"Ram\",\n\"LastName\": \"Setu\",\n\"ContactNumber\": \"9009089789\",\n\"Email\": \"ram@gmail.com\",\n\"Allergy\": \"Peanuts\",\n\"FoodPreference\": \"NonVeg\",\n\"CuisineCategory\":\"sindhi\",\n\"DateOfBirth\": \"1987-02-14\"\n}\n",
											"type": "text",
											"disabled": true
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef50041-b0cf-4520-834f-a4054daded29",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/patient/33\n",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"patient",
										"33\n"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722629047&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=8RqX%2BqL%2FJeVJs2s0urHTHFh9ACsKsy25ugRJpKoNrGQ%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722629047&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=8RqX%2BqL%2FJeVJs2s0urHTHFh9ACsKsy25ugRJpKoNrGQ%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 02 Aug 2024 20:04:08 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"patientId\": 33,\n    \"FirstName\": \"malli\",\n    \"LastName\": \"malli\",\n    \"ContactNumber\": \"9867345989\",\n    \"Email\": \"smartdiet1@gmail.com\",\n    \"Allergy\": \"ALMOND\",\n    \"FoodPreference\": \"Jain\",\n    \"CuisineCategory\": \"rajasthani\",\n    \"FileMorbidity\": {\n        \"66aaa9e9e6f5802145ab051c\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2d234717cf471aaad0b7\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad35584717cf471aaad0bd\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad39404717cf471aaad0cb\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2a684717cf471aaad0b1\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2fce4717cf471aaad0bb\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad37b74717cf471aaad0c3\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad3bb84717cf471aaad0cf\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad36ce4717cf471aaad0bf\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        }\n    },\n    \"FileMorbidityCondition\": {\n        \"66aaa9e9e6f5802145ab051c\": \"Prediabetic \\nBlood Pressure: Hypotension \\n\",\n        \"66ad2d234717cf471aaad0b7\": \"Prediabetic \\n\",\n        \"66ad35584717cf471aaad0bd\": \"Prediabetic \\n\",\n        \"66ad39404717cf471aaad0cb\": \"Prediabetic \\n\",\n        \"66ad2a684717cf471aaad0b1\": \"Prediabetic \\n\",\n        \"66ad2fce4717cf471aaad0bb\": \"Prediabetic \\n\",\n        \"66ad37b74717cf471aaad0c3\": \"Prediabetic \\n\",\n        \"66ad3bb84717cf471aaad0cf\": \"Prediabetic \\n\",\n        \"66ad36ce4717cf471aaad0bf\": \"Prediabetic \\n\"\n    },\n    \"DateOfBirth\": \"1987-03-14\",\n    \"DieticianId\": 221,\n    \"Vitals\": {\n        \"66aaa9e9e6f5802145ab051c\": {\n            \"Weight\": 0,\n            \"Height\": 0,\n            \"Temperature\": 0,\n            \"SP\": 0,\n            \"DP\": 0\n        }\n    },\n    \"LastVisitDate\": \"2024-07-31T21:17:29.088+00:00\"\n}"
						}
					]
				},
				{
					"name": "Retrieve Patient file by FileId invalid endpoints",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Check error message\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const errorMessage = jsonData.error;\r",
									"    pm.expect(jsonData.error).to.exist;\r",
									"    pm.expect(jsonData.error).to.equal(errorMessage);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dieticianToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseURL}}/patient/testReports/viewfile/{{fileId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"patient",
								"testReports",
								"viewfile",
								"{{fileId}}"
							]
						}
					},
					"response": [
						{
							"name": "Create Patient 2 Copy",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"malli\",\n\"LastName\": \"malli\",\n\"ContactNumber\": \"9867345989\",\n\"Email\": \"smartdiet1@gmail.com\",\n\"Allergy\": \"ALMOND\",\n\"FoodPreference\": \"Jain\",\n\"CuisineCategory\":\"rajasthani\",\n\"DateOfBirth\": \"1987-03-14\"\n}",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef4f81e-6866-4e80-b96a-b1a87c11c05d"
										},
										{
											"key": "PtInfo",
											"value": " { \"FirstName\": \"Ram\",\n\"LastName\": \"Setu\",\n\"ContactNumber\": \"9009089789\",\n\"Email\": \"ram@gmail.com\",\n\"Allergy\": \"Peanuts\",\n\"FoodPreference\": \"NonVeg\",\n\"CuisineCategory\":\"sindhi\",\n\"DateOfBirth\": \"1987-02-14\"\n}\n",
											"type": "text",
											"disabled": true
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef50041-b0cf-4520-834f-a4054daded29",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/patient/33\n",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"patient",
										"33\n"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722629047&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=8RqX%2BqL%2FJeVJs2s0urHTHFh9ACsKsy25ugRJpKoNrGQ%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722629047&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=8RqX%2BqL%2FJeVJs2s0urHTHFh9ACsKsy25ugRJpKoNrGQ%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 02 Aug 2024 20:04:08 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"patientId\": 33,\n    \"FirstName\": \"malli\",\n    \"LastName\": \"malli\",\n    \"ContactNumber\": \"9867345989\",\n    \"Email\": \"smartdiet1@gmail.com\",\n    \"Allergy\": \"ALMOND\",\n    \"FoodPreference\": \"Jain\",\n    \"CuisineCategory\": \"rajasthani\",\n    \"FileMorbidity\": {\n        \"66aaa9e9e6f5802145ab051c\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2d234717cf471aaad0b7\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad35584717cf471aaad0bd\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad39404717cf471aaad0cb\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2a684717cf471aaad0b1\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2fce4717cf471aaad0bb\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad37b74717cf471aaad0c3\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad3bb84717cf471aaad0cf\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad36ce4717cf471aaad0bf\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        }\n    },\n    \"FileMorbidityCondition\": {\n        \"66aaa9e9e6f5802145ab051c\": \"Prediabetic \\nBlood Pressure: Hypotension \\n\",\n        \"66ad2d234717cf471aaad0b7\": \"Prediabetic \\n\",\n        \"66ad35584717cf471aaad0bd\": \"Prediabetic \\n\",\n        \"66ad39404717cf471aaad0cb\": \"Prediabetic \\n\",\n        \"66ad2a684717cf471aaad0b1\": \"Prediabetic \\n\",\n        \"66ad2fce4717cf471aaad0bb\": \"Prediabetic \\n\",\n        \"66ad37b74717cf471aaad0c3\": \"Prediabetic \\n\",\n        \"66ad3bb84717cf471aaad0cf\": \"Prediabetic \\n\",\n        \"66ad36ce4717cf471aaad0bf\": \"Prediabetic \\n\"\n    },\n    \"DateOfBirth\": \"1987-03-14\",\n    \"DieticianId\": 221,\n    \"Vitals\": {\n        \"66aaa9e9e6f5802145ab051c\": {\n            \"Weight\": 0,\n            \"Height\": 0,\n            \"Temperature\": 0,\n            \"SP\": 0,\n            \"DP\": 0\n        }\n    },\n    \"LastVisitDate\": \"2024-07-31T21:17:29.088+00:00\"\n}"
						}
					]
				},
				{
					"name": "Retrieve Patient file by FileId with unauthorize",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});\r",
									"pm.test(\"Check error message\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const errorMessage = jsonData.error;\r",
									"    pm.expect(jsonData.error).to.exist;\r",
									"    pm.expect(jsonData.error).to.equal(errorMessage);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseURL}}/patient/testReports/viewFile/{{fileId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"patient",
								"testReports",
								"viewFile",
								"{{fileId}}"
							]
						}
					},
					"response": [
						{
							"name": "Create Patient 2 Copy",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"malli\",\n\"LastName\": \"malli\",\n\"ContactNumber\": \"9867345989\",\n\"Email\": \"smartdiet1@gmail.com\",\n\"Allergy\": \"ALMOND\",\n\"FoodPreference\": \"Jain\",\n\"CuisineCategory\":\"rajasthani\",\n\"DateOfBirth\": \"1987-03-14\"\n}",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef4f81e-6866-4e80-b96a-b1a87c11c05d"
										},
										{
											"key": "PtInfo",
											"value": " { \"FirstName\": \"Ram\",\n\"LastName\": \"Setu\",\n\"ContactNumber\": \"9009089789\",\n\"Email\": \"ram@gmail.com\",\n\"Allergy\": \"Peanuts\",\n\"FoodPreference\": \"NonVeg\",\n\"CuisineCategory\":\"sindhi\",\n\"DateOfBirth\": \"1987-02-14\"\n}\n",
											"type": "text",
											"disabled": true
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef50041-b0cf-4520-834f-a4054daded29",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/patient/33\n",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"patient",
										"33\n"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722629047&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=8RqX%2BqL%2FJeVJs2s0urHTHFh9ACsKsy25ugRJpKoNrGQ%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722629047&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=8RqX%2BqL%2FJeVJs2s0urHTHFh9ACsKsy25ugRJpKoNrGQ%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 02 Aug 2024 20:04:08 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"patientId\": 33,\n    \"FirstName\": \"malli\",\n    \"LastName\": \"malli\",\n    \"ContactNumber\": \"9867345989\",\n    \"Email\": \"smartdiet1@gmail.com\",\n    \"Allergy\": \"ALMOND\",\n    \"FoodPreference\": \"Jain\",\n    \"CuisineCategory\": \"rajasthani\",\n    \"FileMorbidity\": {\n        \"66aaa9e9e6f5802145ab051c\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2d234717cf471aaad0b7\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad35584717cf471aaad0bd\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad39404717cf471aaad0cb\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2a684717cf471aaad0b1\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2fce4717cf471aaad0bb\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad37b74717cf471aaad0c3\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad3bb84717cf471aaad0cf\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad36ce4717cf471aaad0bf\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        }\n    },\n    \"FileMorbidityCondition\": {\n        \"66aaa9e9e6f5802145ab051c\": \"Prediabetic \\nBlood Pressure: Hypotension \\n\",\n        \"66ad2d234717cf471aaad0b7\": \"Prediabetic \\n\",\n        \"66ad35584717cf471aaad0bd\": \"Prediabetic \\n\",\n        \"66ad39404717cf471aaad0cb\": \"Prediabetic \\n\",\n        \"66ad2a684717cf471aaad0b1\": \"Prediabetic \\n\",\n        \"66ad2fce4717cf471aaad0bb\": \"Prediabetic \\n\",\n        \"66ad37b74717cf471aaad0c3\": \"Prediabetic \\n\",\n        \"66ad3bb84717cf471aaad0cf\": \"Prediabetic \\n\",\n        \"66ad36ce4717cf471aaad0bf\": \"Prediabetic \\n\"\n    },\n    \"DateOfBirth\": \"1987-03-14\",\n    \"DieticianId\": 221,\n    \"Vitals\": {\n        \"66aaa9e9e6f5802145ab051c\": {\n            \"Weight\": 0,\n            \"Height\": 0,\n            \"Temperature\": 0,\n            \"SP\": 0,\n            \"DP\": 0\n        }\n    },\n    \"LastVisitDate\": \"2024-07-31T21:17:29.088+00:00\"\n}"
						}
					]
				},
				{
					"name": "Retrieve Patient file by FileId is invaild",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dieticianToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseURL}}/patient/testReports/viewFile/invalidFileId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"patient",
								"testReports",
								"viewFile",
								"invalidFileId"
							]
						}
					},
					"response": [
						{
							"name": "Create Patient 2 Copy",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "",
										"value": "",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"malli\",\n\"LastName\": \"malli\",\n\"ContactNumber\": \"9867345989\",\n\"Email\": \"smartdiet1@gmail.com\",\n\"Allergy\": \"ALMOND\",\n\"FoodPreference\": \"Jain\",\n\"CuisineCategory\":\"rajasthani\",\n\"DateOfBirth\": \"1987-03-14\"\n}",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef4f81e-6866-4e80-b96a-b1a87c11c05d"
										},
										{
											"key": "PtInfo",
											"value": " { \"FirstName\": \"Ram\",\n\"LastName\": \"Setu\",\n\"ContactNumber\": \"9009089789\",\n\"Email\": \"ram@gmail.com\",\n\"Allergy\": \"Peanuts\",\n\"FoodPreference\": \"NonVeg\",\n\"CuisineCategory\":\"sindhi\",\n\"DateOfBirth\": \"1987-02-14\"\n}\n",
											"type": "text",
											"disabled": true
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef50041-b0cf-4520-834f-a4054daded29",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/patient/33\n",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"patient",
										"33\n"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722629047&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=8RqX%2BqL%2FJeVJs2s0urHTHFh9ACsKsy25ugRJpKoNrGQ%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722629047&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=8RqX%2BqL%2FJeVJs2s0urHTHFh9ACsKsy25ugRJpKoNrGQ%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Fri, 02 Aug 2024 20:04:08 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"patientId\": 33,\n    \"FirstName\": \"malli\",\n    \"LastName\": \"malli\",\n    \"ContactNumber\": \"9867345989\",\n    \"Email\": \"smartdiet1@gmail.com\",\n    \"Allergy\": \"ALMOND\",\n    \"FoodPreference\": \"Jain\",\n    \"CuisineCategory\": \"rajasthani\",\n    \"FileMorbidity\": {\n        \"66aaa9e9e6f5802145ab051c\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2d234717cf471aaad0b7\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad35584717cf471aaad0bd\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad39404717cf471aaad0cb\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2a684717cf471aaad0b1\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad2fce4717cf471aaad0bb\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad37b74717cf471aaad0c3\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad3bb84717cf471aaad0cf\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ad36ce4717cf471aaad0bf\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        }\n    },\n    \"FileMorbidityCondition\": {\n        \"66aaa9e9e6f5802145ab051c\": \"Prediabetic \\nBlood Pressure: Hypotension \\n\",\n        \"66ad2d234717cf471aaad0b7\": \"Prediabetic \\n\",\n        \"66ad35584717cf471aaad0bd\": \"Prediabetic \\n\",\n        \"66ad39404717cf471aaad0cb\": \"Prediabetic \\n\",\n        \"66ad2a684717cf471aaad0b1\": \"Prediabetic \\n\",\n        \"66ad2fce4717cf471aaad0bb\": \"Prediabetic \\n\",\n        \"66ad37b74717cf471aaad0c3\": \"Prediabetic \\n\",\n        \"66ad3bb84717cf471aaad0cf\": \"Prediabetic \\n\",\n        \"66ad36ce4717cf471aaad0bf\": \"Prediabetic \\n\"\n    },\n    \"DateOfBirth\": \"1987-03-14\",\n    \"DieticianId\": 221,\n    \"Vitals\": {\n        \"66aaa9e9e6f5802145ab051c\": {\n            \"Weight\": 0,\n            \"Height\": 0,\n            \"Temperature\": 0,\n            \"SP\": 0,\n            \"DP\": 0\n        }\n    },\n    \"LastVisitDate\": \"2024-07-31T21:17:29.088+00:00\"\n}"
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"const allergies = [ \"Soy\", \"Almond\",  \"Walnut\", \"Pistachio\", \"Sesame\",  \"Pecan\", \"Cashew\",\"Peanuts\",\"Egg\", \"Milk\"];\r",
							"function getRandomItem(array) {\r",
							"    const randomIndex = Math.floor(Math.random() * array.length);\r",
							"    return array[randomIndex];\r",
							"}\r",
							"pm.collectionVariables.set(\"Allergy\", getRandomItem(allergies));\r",
							"\r",
							"const cuisine_category = [ \"indian\", \"south indian\", \"rajasthani\", \"punjabi\", \"bengali\", \"orissa\", \"gujarati\", \"maharashtrian\", \"andhra\", \"kerala\", \"goan\", \"kashmiri\", \"himachali\",\"tamil nadu\", \"karnataka\", \"sindhi\", \"chhattisgarhi\", \"madhya pradesh\", \"assamese\", \"manipuri\", \"tripuri\", \"sikkimese\", \"mizo\", \"arunachali\", \"uttarakhand\", \"haryanvi\", \"awadhi\", \"bihari\", \"uttar pradesh\", \"delhi\", \"north indian\", \"italian\", \"french\", \"arabic\",\"lebanese\", \"thai\", \"mexican\", \"american\" ];\r",
							"\r",
							"function getRandomItem(array) {\r",
							"    const randomIndex = Math.floor(Math.random() * array.length);\r",
							"    return array[randomIndex];\r",
							"}\r",
							"pm.collectionVariables.set(\"CuisineCategory\", getRandomItem(cuisine_category));\r",
							"\r",
							"const Food_Preference = [ \"Vegan\", \"Vegetarian\", \"Jain\", \"Eggitarian\", \"NonVeg\" ];\r",
							"\r",
							"function getRandomItem(array) {\r",
							"    const randomIndex = Math.floor(Math.random() * array.length);\r",
							"    return array[randomIndex];\r",
							"}\r",
							"pm.collectionVariables.set(\"FoodPreference\", getRandomItem(Food_Preference));"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Patient login",
			"item": [
				{
					"name": "Patient login with invalid credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"commonTests.unauthorizedRequest();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"{{patient_password}}\",\r\n  \"userLoginEmail\": \"{{patientEmail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/login",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patient login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData= pm.response.json();\r",
									"pm.environment.set(\"patientToken\", jsonData.token);\r",
									"commonTests.validGetPutRequest();\r",
									"commonTests.loginSchemaValidation();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.get(\"patientToken_patient_global\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"{{patient_password}}\",\r\n  \"userLoginEmail\": \"{{patientEmail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/login",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": [
						{
							"name": "New Request",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"test\",\r\n  \"userLoginEmail\": \"jimmy@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/login",
									"protocol": "https",
									"host": [
										"dietician-july-api-hackathon-80f2590665cc",
										"herokuapp",
										"com"
									],
									"path": [
										"dietician",
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722651999&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=C9hAotwzhD9rlJDyD9kLjjScXqikPP4HcmhJmcsxAKw%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722651999&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=C9hAotwzhD9rlJDyD9kLjjScXqikPP4HcmhJmcsxAKw%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 03 Aug 2024 02:26:39 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"token\": \"eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJqaW1teUBnbWFpbC5jb20iLCJpYXQiOjE3MjI2NTE5OTksImV4cCI6MTcyMjY4MDc5OX0.EQxGm4Od-KoGUcj53CzwsovEcEpMbZGX2cYa5iCLosDQ-CafTACMonFwK0s0DTvxuNBtVxsSKhl3-eHmMMtZCw\",\n    \"type\": \"Bearer \",\n    \"userId\": 7498,\n    \"loginUserEmail\": \"jimmy@gmail.com\",\n    \"roles\": [\n        \"ROLE_PATIENT\"\n    ]\n}"
						},
						{
							"name": "LOGIN with patient token",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"test\",\r\n  \"userLoginEmail\": \"jimmy@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/login",
									"protocol": "https",
									"host": [
										"dietician-july-api-hackathon-80f2590665cc",
										"herokuapp",
										"com"
									],
									"path": [
										"dietician",
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722732853&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=zqJqUWx3GS5cXRqa0vu6cFOZ25Ix8p2YcOZWVjbgYeg%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722732853&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=zqJqUWx3GS5cXRqa0vu6cFOZ25Ix8p2YcOZWVjbgYeg%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sun, 04 Aug 2024 00:54:13 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"body": "{\n    \"token\": \"eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJqaW1teUBnbWFpbC5jb20iLCJpYXQiOjE3MjI3MzI4NTMsImV4cCI6MTcyMjc2MTY1M30.UiODoRDs4a4A7LjESdxYRz5hqN3rvgPNyUUn64Z4OLVBLvi3Rfki64FJIi9QFpmEG3gR4QPTeUuxluYiY7aTdQ\",\n    \"type\": \"Bearer \",\n    \"userId\": 7498,\n    \"loginUserEmail\": \"jimmy@gmail.com\",\n    \"roles\": [\n        \"ROLE_PATIENT\"\n    ]\n}"
						}
					]
				}
			]
		},
		{
			"name": "Morbidity Module",
			"item": [
				{
					"name": "Dietician Flow",
					"item": [
						{
							"name": "Retrieve all morbidities with invalid URL - Dietician",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"commonTests.notFoundRequest();\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{dieticianToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{invalidBaseURL}}/morbidity",
									"host": [
										"{{invalidBaseURL}}"
									],
									"path": [
										"morbidity"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve all morbidities without authorization - Dietician",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"commonTests.unauthorizedRequest();\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/morbidity",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"morbidity"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve all morbidities - Dietician",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData= pm.response.json();\r",
											"const morbidities= Array.from(new Set(jsonData.map(morbidity => morbidity.morbidityTestName)));\r",
											"pm.variables.set(\"morbidityNames\",morbidities);\r",
											"\r",
											"pm.test(\"Response is a JSON array\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"});\r",
											"\r",
											"commonTests.validGetPutRequest();\r",
											"commonTests.morbidityGetRequest();\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{dieticianToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/morbidity",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"morbidity"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve morbidity condition by test name  with invalid URL - Dietician",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"commonTests.notFoundRequest();\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{dieticianToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{invalidURL}}/morbidity/{{validTestName}}",
									"host": [
										"{{invalidURL}}"
									],
									"path": [
										"morbidity",
										"{{validTestName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve morbidity condition by test name without authorization - Dietician",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"commonTests.unauthorizedRequest();"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/morbidity/{{validTestName}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"morbidity",
										"{{validTestName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve morbidity condition by invalid test name - Dietician",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"commonTests.notFoundRequest();\r",
											"\r",
											"const jsonData= pm.response.json();\r",
											"\r",
											"pm.test(\"Response body contains error details\", () => {\r",
											" pm.expect(jsonData).to.have.property('errorCode', 'NOT_FOUND');\r",
											" pm.expect(jsonData).to.have.property('errorMessage', 'Morbidity not found with MorbidityTestName : TSH ULTRASENSITIVE');\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{dieticianToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/morbidity/{{invalidTestName}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"morbidity",
										"{{invalidTestName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve morbidity condition by test name - Dietician",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const morbidityNames= pm.variables.get(\"morbidityNames\");\r",
											"pm.variables.set(\"testName\",morbidityNames.shift());\r",
											"\r",
											"if (Array.isArray(morbidityNames) && morbidityNames.length >0) {\r",
											"    \r",
											"    pm.execution.setNextRequest(\"Retrieve morbidity condition by test name - Dietician\");\r",
											"} else {\r",
											"     pm.execution.setNextRequest(\"Retrieve all morbidities - Patient\"); //\"Retrieve All Morbidities by Dietician\"\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData= pm.response.json();\r",
											"\r",
											"pm.test(\"Response is a JSON array\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"});\r",
											"\r",
											"commonTests.validGetPutRequest();\r",
											"commonTests.morbidityGetRequest();\r",
											"\r",
											"pm.test(\"Response data matches the test name\", function () {\r",
											"    jsonData.forEach(morbidity => {\r",
											"        pm.expect(morbidity.morbidityTestName).to.eql(pm.variables.get('testName'));\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{dieticianToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/morbidity/{{validTestName}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"morbidity",
										"{{validTestName}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Admin Flow",
					"item": [
						{
							"name": "Retrieve all morbidities with invalid URL - Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"commonTests.notFoundRequest();\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{invalidBaseURL}}/morbidity",
									"host": [
										"{{invalidBaseURL}}"
									],
									"path": [
										"morbidity"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve all morbidities without authorization - Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"commonTests.unauthorizedRequest();\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/morbidity",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"morbidity"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve all morbidities - Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData= pm.response.json();\r",
											"const morbidities= Array.from(new Set(jsonData.map(morbidity => morbidity.morbidityTestName)));\r",
											"pm.variables.set(\"morbidityNames\",morbidities);\r",
											"\r",
											"pm.test(\"Response is a JSON array\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"});\r",
											"\r",
											"commonTests.validGetPutRequest();\r",
											"commonTests.morbidityGetRequest();\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/morbidity",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"morbidity"
									]
								}
							},
							"response": [
								{
									"name": "Retrieve All Morbidities",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/morbidity",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"morbidity"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722507550&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=sUqX55YdaGb%2F4QS2j34K5mwHHT5lJ5tJUffDsnlRT1Y%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722507550&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=sUqX55YdaGb%2F4QS2j34K5mwHHT5lJ5tJUffDsnlRT1Y%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Thu, 01 Aug 2024 10:19:10 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"body": "[\n    {\n        \"morbidityId\": 1,\n        \"morbidityTestId\": \"DIA_FG\",\n        \"morbidityNameRegex\": \"(?i)(.*)fasting(.*)[sugarglucose](.*)|(.*)glucose(.*)fasting(.*)\",\n        \"morbidityTestName\": \"Fasting Glucose\",\n        \"morbidityTestUnit\": \"mg/dL\",\n        \"morbidityMarkerMinVal\": 125,\n        \"morbidityMarkerMaxVal\": 100\n    },\n    {\n        \"morbidityId\": 2,\n        \"morbidityTestId\": \"DIA_AG\",\n        \"morbidityNameRegex\": \"(?i)(.*)average(.*)glucose(.*)\",\n        \"morbidityTestName\": \"Average Glucose\",\n        \"morbidityTestUnit\": \"mg/dL\",\n        \"morbidityMarkerMinVal\": 121,\n        \"morbidityMarkerMaxVal\": 150\n    },\n    {\n        \"morbidityId\": 3,\n        \"morbidityTestId\": \"DIA_PG\",\n        \"morbidityNameRegex\": \"(?i)(.*)plasma(.*)glucose(.*)\",\n        \"morbidityTestName\": \"Plasma Glucose\",\n        \"morbidityTestUnit\": \"mg/dL\",\n        \"morbidityMarkerMinVal\": 140,\n        \"morbidityMarkerMaxVal\": 199\n    },\n    {\n        \"morbidityId\": 4,\n        \"morbidityTestId\": \"DIA_HBA1C\",\n        \"morbidityNameRegex\": \"(.*)HbA[1I]c(.*)|(.*)H(.*)P(.*)L(.*)C(.*)\",\n        \"morbidityTestName\": \"HbA1c\",\n        \"morbidityTestUnit\": \"%\",\n        \"morbidityMarkerMinVal\": 5.7,\n        \"morbidityMarkerMaxVal\": 6.5\n    },\n    {\n        \"morbidityId\": 5,\n        \"morbidityTestId\": \"THYRO_TSH\",\n        \"morbidityNameRegex\": \"(?i)(.*)T(.*)S(.*)H(.*)|(.*)THYROID STIMULATING HORMONE(.*)\",\n        \"morbidityTestName\": \"TSH\",\n        \"morbidityTestUnit\": \"μIU/ml\",\n        \"morbidityMarkerMinVal\": 0.55,\n        \"morbidityMarkerMaxVal\": 4.78\n    },\n    {\n        \"morbidityId\": 6,\n        \"morbidityTestId\": \"THYRO_TSH_1\",\n        \"morbidityNameRegex\": \"(?i)(.*)T(.*)S(.*)H(.*)|(.*)THYROID STIMULATING HORMONE(.*)\",\n        \"morbidityTestName\": \"TSH\",\n        \"morbidityTestUnit\": \"uIU/ml\",\n        \"morbidityMarkerMinVal\": 0.55,\n        \"morbidityMarkerMaxVal\": 4.78\n    },\n    {\n        \"morbidityId\": 7,\n        \"morbidityTestId\": \"THYRO_T3\",\n        \"morbidityNameRegex\": \"(?i)(.*)T3(.*)\",\n        \"morbidityTestName\": \"T3\",\n        \"morbidityTestUnit\": \"ng/dL\",\n        \"morbidityMarkerMinVal\": 60,\n        \"morbidityMarkerMaxVal\": 180\n    },\n    {\n        \"morbidityId\": 8,\n        \"morbidityTestId\": \"THYRO_T3_1\",\n        \"morbidityNameRegex\": \"(?i)(.*)T3(.*)\",\n        \"morbidityTestName\": \"T3\",\n        \"morbidityTestUnit\": \"ng/mL\",\n        \"morbidityMarkerMinVal\": 0.6,\n        \"morbidityMarkerMaxVal\": 1.8\n    },\n    {\n        \"morbidityId\": 9,\n        \"morbidityTestId\": \"THYRO_T3_2\",\n        \"morbidityNameRegex\": \"(?i)(.*)T3(.*)\",\n        \"morbidityTestName\": \"T3\",\n        \"morbidityTestUnit\": \"pg/mL\",\n        \"morbidityMarkerMinVal\": 1.5,\n        \"morbidityMarkerMaxVal\": 4.1\n    },\n    {\n        \"morbidityId\": 10,\n        \"morbidityTestId\": \"THYRO_T3_3\",\n        \"morbidityNameRegex\": \"(?i)(.*)T3(.*)\",\n        \"morbidityTestName\": \"T3\",\n        \"morbidityTestUnit\": \"nmol/L\",\n        \"morbidityMarkerMinVal\": 0.9,\n        \"morbidityMarkerMaxVal\": 2.76\n    },\n    {\n        \"morbidityId\": 11,\n        \"morbidityTestId\": \"THYRO_T4\",\n        \"morbidityNameRegex\": \"(?i)(.*)T4(.*)\",\n        \"morbidityTestName\": \"T4\",\n        \"morbidityTestUnit\": \"μg/dL\",\n        \"morbidityMarkerMinVal\": 5,\n        \"morbidityMarkerMaxVal\": 12\n    },\n    {\n        \"morbidityId\": 12,\n        \"morbidityTestId\": \"THYRO_T4_1\",\n        \"morbidityNameRegex\": \"(?i)(.*)T4(.*)\",\n        \"morbidityTestName\": \"T4\",\n        \"morbidityTestUnit\": \"ug/dL\",\n        \"morbidityMarkerMinVal\": 5,\n        \"morbidityMarkerMaxVal\": 12\n    },\n    {\n        \"morbidityId\": 13,\n        \"morbidityTestId\": \"THYRO_T4_2\",\n        \"morbidityNameRegex\": \"(?i)(.*)T4(.*)\",\n        \"morbidityTestName\": \"T4\",\n        \"morbidityTestUnit\": \"ng/dL\",\n        \"morbidityMarkerMinVal\": 0.8,\n        \"morbidityMarkerMaxVal\": 1.9\n    },\n    {\n        \"morbidityId\": 14,\n        \"morbidityTestId\": \"BP_LEVEL\",\n        \"morbidityNameRegex\": \"(?i)(.*)Blood(.*)Pressure(.*)\",\n        \"morbidityTestName\": \"Blood Pressure Levels\",\n        \"morbidityTestUnit\": \"mm Hg\",\n        \"morbidityMarkerMinVal\": 80,\n        \"morbidityMarkerMaxVal\": 130\n    },\n    {\n        \"morbidityId\": 15,\n        \"morbidityTestId\": \"THYRO_TSH_2\",\n        \"morbidityNameRegex\": \"(?i)(.*)T(.*)S(.*)H(.*)|(.*)THYROID STIMULATING HORMONE(.*)\",\n        \"morbidityTestName\": \"TSH\",\n        \"morbidityTestUnit\": \"mIU/L\",\n        \"morbidityMarkerMinVal\": 0.45,\n        \"morbidityMarkerMaxVal\": 4.12\n    }\n]"
								}
							]
						},
						{
							"name": "Retrieve morbidity condition by test name  with invalid URL - Admin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"commonTests.notFoundRequest();\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{invalidBaseURL}}/morbidity/{{validTestName}}",
									"host": [
										"{{invalidBaseURL}}"
									],
									"path": [
										"morbidity",
										"{{validTestName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve morbidity condition by test name without authorization - Admin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"commonTests.unauthorizedRequest();\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/morbidity/{{validTestName}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"morbidity",
										"{{validTestName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve morbidity condition by invalid test name - Admin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"commonTests.notFoundRequest();\r",
											"\r",
											"const jsonData= pm.response.json();\r",
											"\r",
											"pm.test(\"Response body contains error details\", () => {\r",
											" pm.expect(jsonData).to.have.property('errorCode', 'NOT_FOUND');\r",
											" pm.expect(jsonData).to.have.property('errorMessage', 'Morbidity not found with MorbidityTestName : TSH ULTRASENSITIVE');\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/morbidity/{{invalidTestName}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"morbidity",
										"{{invalidTestName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve morbidity condition by test name - Admin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const morbidityNames= pm.variables.get(\"morbidityNames\");\r",
											"pm.variables.set(\"testName\",morbidityNames.shift());\r",
											"\r",
											"if (Array.isArray(morbidityNames) && morbidityNames.length >0) {\r",
											"    \r",
											"    pm.execution.setNextRequest(\"Retrieve morbidity condition by test name - Admin\");\r",
											"} else {\r",
											"     pm.execution.setNextRequest(\"Retrieve all morbidities with invalid URL - Dietician\"); //\"Retrieve All Morbidities by Dietician\"\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData= pm.response.json();\r",
											"\r",
											"pm.test(\"Response is a JSON array\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(jsonData).to.be.an('array');\r",
											"});\r",
											"\r",
											"commonTests.validGetPutRequest();\r",
											"commonTests.morbidityGetRequest();\r",
											"\r",
											"\r",
											"pm.test(\"Response data matches the test name\", function () {\r",
											"    jsonData.forEach(morbidity => {\r",
											"        pm.expect(morbidity.morbidityTestName).to.eql(pm.variables.get('testName'));\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/morbidity/{{validTestName}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"morbidity",
										"{{validTestName}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Get test report by Patient",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present and correct\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
							"});\r",
							"\r",
							"const jsonData= pm.response.json();\r",
							"pm.test(\"Response has patientId key\", function () {\r",
							"    pm.expect(jsonData).to.have.property('patientId');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{patientToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/patient/testReports/{{patientId}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"patient",
						"testReports",
						"{{patientId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get a file by Patient",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{patientToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/patient/testReports/viewFile/{{fileId}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"patient",
						"testReports",
						"viewFile",
						"{{fileId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Patient logout",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"commonTests.validGetPutRequest();"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{patientToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/logoutdietician",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"logoutdietician"
					]
				}
			},
			"response": [
				{
					"name": "success_200",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/logoutdietician",
							"protocol": "https",
							"host": [
								"dietician-july-api-hackathon-80f2590665cc",
								"herokuapp",
								"com"
							],
							"path": [
								"dietician",
								"logoutdietician"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "plain",
					"header": [
						{
							"key": "Server",
							"value": "Cowboy"
						},
						{
							"key": "Report-To",
							"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722630307&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=sgGtGuPZm0OI3fAMgtZ1SDirvQfo8RfkPIsl9p3qEpA%3D\"}]}"
						},
						{
							"key": "Reporting-Endpoints",
							"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722630307&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=sgGtGuPZm0OI3fAMgtZ1SDirvQfo8RfkPIsl9p3qEpA%3D"
						},
						{
							"key": "Nel",
							"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Vary",
							"value": "Origin"
						},
						{
							"key": "Vary",
							"value": "Access-Control-Request-Method"
						},
						{
							"key": "Vary",
							"value": "Access-Control-Request-Headers"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "X-Xss-Protection",
							"value": "1; mode=block"
						},
						{
							"key": "Cache-Control",
							"value": "no-cache, no-store, max-age=0, must-revalidate"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "Expires",
							"value": "0"
						},
						{
							"key": "Strict-Transport-Security",
							"value": "max-age=31536000 ; includeSubDomains"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "Content-Type",
							"value": "text/plain;charset=UTF-8"
						},
						{
							"key": "Content-Length",
							"value": "17"
						},
						{
							"key": "Date",
							"value": "Fri, 02 Aug 2024 20:25:07 GMT"
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						}
					],
					"cookie": [],
					"body": "Logout successful"
				}
			]
		},
		{
			"name": "Delete Patient with invalid Auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.get(\"dietToken\")"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/patient/{{patientId}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"patient",
						"{{patientId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Patient with invalid PatientId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Renamed the 'jsonBody' variable to 'responseJSON'\r",
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{dieticianToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/patient/{{InvalidpatientId}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"patient",
						"{{InvalidpatientId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Patient with invalid URL",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", () => {\r",
							"    pm.response.to.have.status(\"Not Found\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{dieticianToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{invalidBaseURL}}/patient/{{patientId}}",
					"host": [
						"{{invalidBaseURL}}"
					],
					"path": [
						"patient",
						"{{patientId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Patient",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{dieticianToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "",
							"value": "",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{baseURL}}/patient/{{patientId}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"patient",
						"{{patientId}}"
					]
				}
			},
			"response": [
				{
					"name": "Delete patient success",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/patient/853",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"patient",
								"853"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "plain",
					"header": [
						{
							"key": "Server",
							"value": "Cowboy"
						},
						{
							"key": "Report-To",
							"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722813935&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=zi8qqvVaFInMFQa0iYaJARasdLtsUYeKZ1rHYzFXi2U%3D\"}]}"
						},
						{
							"key": "Reporting-Endpoints",
							"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722813935&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=zi8qqvVaFInMFQa0iYaJARasdLtsUYeKZ1rHYzFXi2U%3D"
						},
						{
							"key": "Nel",
							"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Vary",
							"value": "Origin"
						},
						{
							"key": "Vary",
							"value": "Access-Control-Request-Method"
						},
						{
							"key": "Vary",
							"value": "Access-Control-Request-Headers"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "X-Xss-Protection",
							"value": "1; mode=block"
						},
						{
							"key": "Cache-Control",
							"value": "no-cache, no-store, max-age=0, must-revalidate"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "Expires",
							"value": "0"
						},
						{
							"key": "Strict-Transport-Security",
							"value": "max-age=31536000 ; includeSubDomains"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "Content-Type",
							"value": "text/plain;charset=UTF-8"
						},
						{
							"key": "Content-Length",
							"value": "41"
						},
						{
							"key": "Date",
							"value": "Sun, 04 Aug 2024 23:25:35 GMT"
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						}
					],
					"cookie": [],
					"body": "Patient with Id 853 deleted Successfully!"
				}
			]
		},
		{
			"name": "Dietician logout",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"commonTests.validGetPutRequest();"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{dieticianToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/logoutdietician",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"logoutdietician"
					]
				}
			},
			"response": [
				{
					"name": "success_200",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/logoutdietician",
							"protocol": "https",
							"host": [
								"dietician-july-api-hackathon-80f2590665cc",
								"herokuapp",
								"com"
							],
							"path": [
								"dietician",
								"logoutdietician"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "plain",
					"header": [
						{
							"key": "Server",
							"value": "Cowboy"
						},
						{
							"key": "Report-To",
							"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722630307&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=sgGtGuPZm0OI3fAMgtZ1SDirvQfo8RfkPIsl9p3qEpA%3D\"}]}"
						},
						{
							"key": "Reporting-Endpoints",
							"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722630307&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=sgGtGuPZm0OI3fAMgtZ1SDirvQfo8RfkPIsl9p3qEpA%3D"
						},
						{
							"key": "Nel",
							"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Vary",
							"value": "Origin"
						},
						{
							"key": "Vary",
							"value": "Access-Control-Request-Method"
						},
						{
							"key": "Vary",
							"value": "Access-Control-Request-Headers"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "X-Xss-Protection",
							"value": "1; mode=block"
						},
						{
							"key": "Cache-Control",
							"value": "no-cache, no-store, max-age=0, must-revalidate"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "Expires",
							"value": "0"
						},
						{
							"key": "Strict-Transport-Security",
							"value": "max-age=31536000 ; includeSubDomains"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "Content-Type",
							"value": "text/plain;charset=UTF-8"
						},
						{
							"key": "Content-Length",
							"value": "17"
						},
						{
							"key": "Date",
							"value": "Fri, 02 Aug 2024 20:25:07 GMT"
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						}
					],
					"cookie": [],
					"body": "Logout successful"
				}
			]
		},
		{
			"name": "Dietician Invalidendpoint",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response status code is 400\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(400);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"pm.collectionVariables.set(\"deletedietician\", \"/diet\");\r",
							"\r",
							"console.log(\"Endpoint set to invalid value:\", pm.collectionVariables.get(\"deletedietician\"));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}{{invalidEndPoint}}",
					"host": [
						"{{baseURL}}{{invalidEndPoint}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Dietician InvalidBaseurl",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 404\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(404);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response content type is text/html\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/html\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response body contains the expected error message or title\", function () {\r",
							"    const responseData = pm.response.text();\r",
							"    \r",
							"    pm.expect(responseData).to.include(\"Application Error\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response body contains specific HTML elements\", function () {\r",
							"    const responseData = pm.response.text();\r",
							"    \r",
							"    pm.expect(responseData).to.include(\"<html>\");\r",
							"    pm.expect(responseData).to.include(\"<head>\");\r",
							"    pm.expect(responseData).to.include(\"<body>\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"    \r",
							" \r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{InvalidBaseURL}}{{deletedietician}}",
					"host": [
						"{{InvalidBaseURL}}{{deletedietician}}"
					]
				}
			},
			"response": [
				{
					"name": "Delete Dietician InvalidBaseurl",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://dietician-july-api--80f2590665cc.herokuapp.com/dietician/dietician/{{dietician_id}}",
							"protocol": "https",
							"host": [
								"dietician-july-api--80f2590665cc",
								"herokuapp",
								"com"
							],
							"path": [
								"dietician",
								"dietician",
								"{{dietician_id}}"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "html",
					"header": [
						{
							"key": "Content-Length",
							"value": "563"
						},
						{
							"key": "Cache-Control",
							"value": "no-cache, no-store"
						},
						{
							"key": "Content-Type",
							"value": "text/html; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "2024-08-03 23:31:42.703031358 +0000 UTC"
						},
						{
							"key": "Server",
							"value": "heroku-router"
						}
					],
					"cookie": [],
					"body": "<!DOCTYPE html>\n<html>\n    <head>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta charset=\"utf-8\">\n        <title>Heroku | Application Error</title>\n        <style media=\"screen\">\n      html,body,iframe {\n        margin: 0;\n        padding: 0;\n      }\n      html,body {\n        height: 100%;\n        overflow: hidden;\n      }\n      iframe {\n        width: 100%;\n        height: 100%;\n        border: 0;\n      }\n    </style>\n    </head>\n    <body>\n        <iframe src=\"//www.herokucdn.com/error-pages/no-such-app.html\"></iframe>\n    </body>\n</html>"
				}
			]
		},
		{
			"name": "Dietician no auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response status code is 401\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(401);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Presence of timestamp, status, error, and path fields in the response\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.timestamp).to.exist;\r",
							"    pm.expect(responseData.status).to.exist;\r",
							"    pm.expect(responseData.error).to.exist;\r",
							"    pm.expect(responseData.path).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Error message is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error message should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Path is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.path).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Path should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/dietician/{{dieticianId}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"dietician",
						"{{dieticianId}}"
					]
				}
			},
			"response": [
				{
					"name": "Delete Dietician no auth Copy",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/dietician/{{dietician_id}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"dietician",
								"{{dietician_id}}"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "plain",
					"header": [
						{
							"key": "Server",
							"value": "Cowboy"
						},
						{
							"key": "Report-To",
							"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722728098&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=vCW8XHCeDvf8C8pNvm0ervEae6%2FR%2FoPU7J3JWBm7TEs%3D\"}]}"
						},
						{
							"key": "Reporting-Endpoints",
							"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722728098&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=vCW8XHCeDvf8C8pNvm0ervEae6%2FR%2FoPU7J3JWBm7TEs%3D"
						},
						{
							"key": "Nel",
							"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Vary",
							"value": "Origin"
						},
						{
							"key": "Vary",
							"value": "Access-Control-Request-Method"
						},
						{
							"key": "Vary",
							"value": "Access-Control-Request-Headers"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "X-Xss-Protection",
							"value": "1; mode=block"
						},
						{
							"key": "Cache-Control",
							"value": "no-cache, no-store, max-age=0, must-revalidate"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "Expires",
							"value": "0"
						},
						{
							"key": "Strict-Transport-Security",
							"value": "max-age=31536000 ; includeSubDomains"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "Content-Type",
							"value": "text/plain;charset=UTF-8"
						},
						{
							"key": "Content-Length",
							"value": "30"
						},
						{
							"key": "Date",
							"value": "Sat, 03 Aug 2024 23:34:58 GMT"
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						}
					],
					"cookie": [],
					"body": "Deleted dietician with id-1028"
				}
			]
		},
		{
			"name": "Dietician with auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response status code is 401\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(401);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Presence of timestamp, status, error, and path fields in the response\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.timestamp).to.exist;\r",
							"    pm.expect(responseData.status).to.exist;\r",
							"    pm.expect(responseData.error).to.exist;\r",
							"    pm.expect(responseData.path).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Error message is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error message should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Path is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.path).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Path should not be empty\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"\r",
							"pm.request.headers.remove(\"Authorization\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/dietician/{{dieticianId}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"dietician",
						"{{dieticianId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Logout with no auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"commonTests_1.unauthorizedRequest();"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}logoutdietician",
					"host": [
						"{{baseURL}}logoutdietician"
					]
				}
			},
			"response": [
				{
					"name": "logout other than bearer token",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}logoutdietician",
							"host": [
								"{{baseURL}}logoutdietician"
							]
						}
					},
					"status": "Unauthorized",
					"code": 401,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "Cowboy"
						},
						{
							"key": "Report-To",
							"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1723050134&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=imUGEXEdrR38qT5OLiMbqpr9aUrlpfuDPJV1GqvDOO8%3D\"}]}"
						},
						{
							"key": "Reporting-Endpoints",
							"value": "heroku-nel=https://nel.heroku.com/reports?ts=1723050134&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=imUGEXEdrR38qT5OLiMbqpr9aUrlpfuDPJV1GqvDOO8%3D"
						},
						{
							"key": "Nel",
							"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Vary",
							"value": "Origin"
						},
						{
							"key": "Vary",
							"value": "Access-Control-Request-Method"
						},
						{
							"key": "Vary",
							"value": "Access-Control-Request-Headers"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "X-Xss-Protection",
							"value": "1; mode=block"
						},
						{
							"key": "Cache-Control",
							"value": "no-cache, no-store, max-age=0, must-revalidate"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "Expires",
							"value": "0"
						},
						{
							"key": "Strict-Transport-Security",
							"value": "max-age=31536000 ; includeSubDomains"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Date",
							"value": "Wed, 07 Aug 2024 17:02:13 GMT"
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						}
					],
					"cookie": [],
					"body": "{\n    \"timestamp\": \"2024-08-07T17:02:14.211+00:00\",\n    \"status\": 401,\n    \"error\": \"Unauthorized\",\n    \"path\": \"/dietician/logoutdietician\"\n}"
				}
			]
		},
		{
			"name": "Logout with invalid endpoint",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"commonTests.unauthorizedRequest();"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{adminToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}{{invalidEndpoint}}",
					"host": [
						"{{baseURL}}{{invalidEndpoint}}"
					]
				}
			},
			"response": [
				{
					"name": "invalid_endpoint_405",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}login",
							"host": [
								"{{baseURL}}login"
							]
						}
					},
					"status": "Method Not Allowed",
					"code": 405,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "Cowboy"
						},
						{
							"key": "Report-To",
							"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722628572&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=v%2BY4gjWVuEOw7nIDRoQlWrJq8ggf9fDgeOvFsxbPNfQ%3D\"}]}"
						},
						{
							"key": "Reporting-Endpoints",
							"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722628572&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=v%2BY4gjWVuEOw7nIDRoQlWrJq8ggf9fDgeOvFsxbPNfQ%3D"
						},
						{
							"key": "Nel",
							"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Vary",
							"value": "Origin"
						},
						{
							"key": "Vary",
							"value": "Access-Control-Request-Method"
						},
						{
							"key": "Vary",
							"value": "Access-Control-Request-Headers"
						},
						{
							"key": "Allow",
							"value": "POST"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "X-Xss-Protection",
							"value": "1; mode=block"
						},
						{
							"key": "Cache-Control",
							"value": "no-cache, no-store, max-age=0, must-revalidate"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "Expires",
							"value": "0"
						},
						{
							"key": "Strict-Transport-Security",
							"value": "max-age=31536000 ; includeSubDomains"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Date",
							"value": "Fri, 02 Aug 2024 19:56:12 GMT"
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						}
					],
					"cookie": [],
					"body": "{\n    \"timestamp\": \"2024-08-02T19:56:12.894+00:00\",\n    \"status\": 405,\n    \"error\": \"Method Not Allowed\",\n    \"path\": \"/dietician/login\"\n}"
				},
				{
					"name": "user_get_001",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}login",
							"host": [
								"{{baseURL}}login"
							]
						}
					},
					"status": "Method Not Allowed",
					"code": 405,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "Cowboy"
						},
						{
							"key": "Report-To",
							"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722635066&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=ae96SW5JtPuv3%2FuoOZfGXzKi0%2BkEZ5JUzHuJAHN2WII%3D\"}]}"
						},
						{
							"key": "Reporting-Endpoints",
							"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722635066&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=ae96SW5JtPuv3%2FuoOZfGXzKi0%2BkEZ5JUzHuJAHN2WII%3D"
						},
						{
							"key": "Nel",
							"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Vary",
							"value": "Origin"
						},
						{
							"key": "Vary",
							"value": "Access-Control-Request-Method"
						},
						{
							"key": "Vary",
							"value": "Access-Control-Request-Headers"
						},
						{
							"key": "Allow",
							"value": "POST"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "X-Xss-Protection",
							"value": "1; mode=block"
						},
						{
							"key": "Cache-Control",
							"value": "no-cache, no-store, max-age=0, must-revalidate"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "Expires",
							"value": "0"
						},
						{
							"key": "Strict-Transport-Security",
							"value": "max-age=31536000 ; includeSubDomains"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Date",
							"value": "Fri, 02 Aug 2024 21:44:26 GMT"
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						}
					],
					"cookie": [],
					"body": "{\n    \"timestamp\": \"2024-08-02T21:44:26.179+00:00\",\n    \"status\": 405,\n    \"error\": \"Method Not Allowed\",\n    \"path\": \"/dietician/login\"\n}"
				},
				{
					"name": "user_get_001",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}save",
							"host": [
								"{{baseURL}}save"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "Cowboy"
						},
						{
							"key": "Report-To",
							"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722636359&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=gP4jGm2SXNUsTbC9oSdzIuU1Zhy4%2BAGtqTruC0kBYTo%3D\"}]}"
						},
						{
							"key": "Reporting-Endpoints",
							"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722636359&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=gP4jGm2SXNUsTbC9oSdzIuU1Zhy4%2BAGtqTruC0kBYTo%3D"
						},
						{
							"key": "Nel",
							"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Vary",
							"value": "Origin"
						},
						{
							"key": "Vary",
							"value": "Access-Control-Request-Method"
						},
						{
							"key": "Vary",
							"value": "Access-Control-Request-Headers"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "X-Xss-Protection",
							"value": "1; mode=block"
						},
						{
							"key": "Cache-Control",
							"value": "no-cache, no-store, max-age=0, must-revalidate"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "Expires",
							"value": "0"
						},
						{
							"key": "Strict-Transport-Security",
							"value": "max-age=31536000 ; includeSubDomains"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Date",
							"value": "Fri, 02 Aug 2024 22:05:59 GMT"
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						}
					],
					"cookie": [],
					"body": "{\n    \"timestamp\": \"2024-08-02T22:05:59.273+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/dietician/save\"\n}"
				}
			]
		},
		{
			"name": "Admin logout",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"commonTests.validGetPutRequest();"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{adminToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/logoutdietician",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"logoutdietician"
					]
				}
			},
			"response": [
				{
					"name": "success_200",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/logoutdietician",
							"protocol": "https",
							"host": [
								"dietician-july-api-hackathon-80f2590665cc",
								"herokuapp",
								"com"
							],
							"path": [
								"dietician",
								"logoutdietician"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "plain",
					"header": [
						{
							"key": "Server",
							"value": "Cowboy"
						},
						{
							"key": "Report-To",
							"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722630307&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=sgGtGuPZm0OI3fAMgtZ1SDirvQfo8RfkPIsl9p3qEpA%3D\"}]}"
						},
						{
							"key": "Reporting-Endpoints",
							"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722630307&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=sgGtGuPZm0OI3fAMgtZ1SDirvQfo8RfkPIsl9p3qEpA%3D"
						},
						{
							"key": "Nel",
							"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Vary",
							"value": "Origin"
						},
						{
							"key": "Vary",
							"value": "Access-Control-Request-Method"
						},
						{
							"key": "Vary",
							"value": "Access-Control-Request-Headers"
						},
						{
							"key": "X-Content-Type-Options",
							"value": "nosniff"
						},
						{
							"key": "X-Xss-Protection",
							"value": "1; mode=block"
						},
						{
							"key": "Cache-Control",
							"value": "no-cache, no-store, max-age=0, must-revalidate"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "Expires",
							"value": "0"
						},
						{
							"key": "Strict-Transport-Security",
							"value": "max-age=31536000 ; includeSubDomains"
						},
						{
							"key": "X-Frame-Options",
							"value": "DENY"
						},
						{
							"key": "Content-Type",
							"value": "text/plain;charset=UTF-8"
						},
						{
							"key": "Content-Length",
							"value": "17"
						},
						{
							"key": "Date",
							"value": "Fri, 02 Aug 2024 20:25:07 GMT"
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						}
					],
					"cookie": [],
					"body": "Logout successful"
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"commonTests = {\r",
					"    validGetPutRequest: function () {\r",
					"        //Status code\r",
					"        pm.test(\"Status code is 200\", () => {\r",
					"            pm.response.to.have.status(200);\r",
					"        });\r",
					"\r",
					"        pm.test(\"Status code name has string\", () => {\r",
					"            pm.response.to.have.status(\"OK\");\r",
					"        });\r",
					"\r",
					"        //Header \r",
					"        pm.test(\"Content-Type is present\", () => {\r",
					"            pm.response.to.have.header(\"Content-Type\");\r",
					"        });\r",
					"\r",
					"        pm.test(\"Content-Type header is application/json\", () => {\r",
					"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json');\r",
					"        });\r",
					"\r",
					"        //Response time\r",
					"        pm.test(\"Response time is less than 1000ms\", () => {\r",
					"            pm.expect(pm.response.responseTime).to.be.below(1000);\r",
					"        });\r",
					"    },\r",
					"    unauthorizedRequest: function () {\r",
					"        //Unauthorized\r",
					"        pm.test(\"Status code is 401\", () => {\r",
					"            pm.response.to.have.status(401);\r",
					"        });\r",
					"\r",
					"        pm.test(\"Status code name has string\", () => {\r",
					"            pm.response.to.have.status(\"Unauthorized\");\r",
					"        });\r",
					"    },\r",
					"    notFoundRequest: function () {\r",
					"        //Invalid URL \r",
					"        pm.test(\"Status code is 404\", () => {\r",
					"            pm.response.to.have.status(404);\r",
					"        });\r",
					"\r",
					"        pm.test(\"Status code name has string\", () => {\r",
					"            pm.response.to.have.status(\"Not Found\");\r",
					"        });\r",
					"    },\r",
					"    invalidInputsRequest: function () {\r",
					"        //Unauthorized\r",
					"        pm.test(\"Status code is 400\", () => {\r",
					"            pm.response.to.have.status(400);\r",
					"        });\r",
					"\r",
					"        pm.test(\"Status code name has string\", () => {\r",
					"            pm.response.to.have.status(\"Bad Request\");\r",
					"        });\r",
					"    },\r",
					"    loginSchemaValidation:function(){\r",
					"    // Add a test to check for response schema validation\r",
					"pm.test(\"Response schema is valid\", function () {\r",
					"  var schema = {\r",
					"    type: \"object\",\r",
					"    properties: {\r",
					"      token: { type: \"string\" },\r",
					"      type: { type: \"string\" },\r",
					"      userId: { type: \"number\" },\r",
					"      loginUserEmail: { type: \"string\" },\r",
					"      roles: { type: \"array\" }\r",
					"    },\r",
					"    required: [\"token\", \"type\", \"userId\", \"loginUserEmail\", \"roles\"],\r",
					"  };\r",
					"\r",
					"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;\r",
					"});\r",
					"    },\r",
					"    morbidityGetRequest: function () {\r",
					"        const jsonData= pm.response.json();\r",
					"        pm.test(\"Each morbidity has required fields\", () => {\r",
					"            //const morbidities = pm.response.json();\r",
					"            jsonData.forEach(morbidity => {\r",
					"                pm.expect(morbidity).to.have.property('morbidityId');\r",
					"                pm.expect(morbidity).to.have.property('morbidityTestId');\r",
					"                pm.expect(morbidity).to.have.property('morbidityNameRegex');\r",
					"                pm.expect(morbidity).to.have.property('morbidityTestName');\r",
					"                pm.expect(morbidity).to.have.property('morbidityTestUnit');\r",
					"                pm.expect(morbidity).to.have.property('morbidityMarkerMinVal');\r",
					"                pm.expect(morbidity).to.have.property('morbidityMarkerMaxVal');\r",
					"            });\r",
					"        });\r",
					"\r",
					"        pm.test(\"Test data type of the response\", () => {\r",
					"            jsonData.forEach(morbidity => {\r",
					"                pm.expect(morbidity).to.be.an('object');\r",
					"                pm.expect(morbidity.morbidityId).to.be.a('number');\r",
					"                pm.expect(morbidity.morbidityTestId).to.be.a('string');\r",
					"                pm.expect(morbidity.morbidityNameRegex).to.be.a('string');\r",
					"                pm.expect(morbidity.morbidityTestName).to.be.a('string');\r",
					"                pm.expect(morbidity.morbidityTestUnit).to.be.a('string');\r",
					"                pm.expect(morbidity.morbidityMarkerMinVal).to.be.a('number');\r",
					"                pm.expect(morbidity.morbidityMarkerMaxVal).to.be.a('number');\r",
					"            });\r",
					"        });\r",
					"    }\r",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "Getdietician",
			"value": ""
		},
		{
			"key": "BaseURL",
			"value": ""
		}
	]
}